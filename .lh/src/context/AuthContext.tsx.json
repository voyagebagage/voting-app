{
    "sourceFile": "src/context/AuthContext.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 29,
            "patches": [
                {
                    "date": 1725141505538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725142009842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+\"use client\";\n import React, { createContext, useState, useContext, useEffect } from \"react\";\n import { TelegramUser } from \"@/types\";\n \n interface AuthContextType {\n"
                },
                {
                    "date": 1725142611341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-\"use client\";\n import React, { createContext, useState, useContext, useEffect } from \"react\";\n import { TelegramUser } from \"@/types\";\n \n interface AuthContextType {\n@@ -16,28 +15,33 @@\n   const [user, setUser] = useState<TelegramUser | null>(null);\n \n   const login = (userData: TelegramUser) => {\n     setUser(userData);\n-    // Set a cookie here instead of using localStorage\n-    document.cookie = `user=${JSON.stringify(\n-      userData\n-    )}; path=/; max-age=86400; secure; samesite=strict`;\n   };\n \n   const logout = () => {\n     setUser(null);\n-    // Remove the cookie\n-    document.cookie = \"user=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;\";\n+    // Remove the auth_token cookie\n+    document.cookie =\n+      \"auth_token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;\";\n   };\n \n   useEffect(() => {\n-    // Check for existing user cookie on mount\n-    const userCookie = document.cookie\n-      .split(\"; \")\n-      .find((row) => row.startsWith(\"user=\"));\n-    if (userCookie) {\n-      const userData = JSON.parse(userCookie.split(\"=\")[1]);\n-      setUser(userData);\n+    // Check for existing auth_token cookie on mount\n+    const hasAuthToken = document.cookie\n+      .split(\";\")\n+      .some((item) => item.trim().startsWith(\"auth_token=\"));\n+    if (hasAuthToken) {\n+      // If we have an auth_token, we consider the user logged in\n+      // You might want to verify the token with your backend here\n+      fetch(\"/api/auth/verify\")\n+        .then((response) => response.json())\n+        .then((data) => {\n+          if (data.user) {\n+            setUser(data.user);\n+          }\n+        })\n+        .catch((error) => console.error(\"Error verifying token:\", error));\n     }\n   }, []);\n \n   return (\n"
                },
                {
                    "date": 1725142695749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+\"use client\";\n import React, { createContext, useState, useContext, useEffect } from \"react\";\n import { TelegramUser } from \"@/types\";\n \n interface AuthContextType {\n"
                },
                {
                    "date": 1725143484165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-\"use client\";\n import React, { createContext, useState, useContext, useEffect } from \"react\";\n import { TelegramUser } from \"@/types\";\n \n interface AuthContextType {\n"
                },
                {
                    "date": 1725143531416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+\"use client\";\n import React, { createContext, useState, useContext, useEffect } from \"react\";\n import { TelegramUser } from \"@/types\";\n \n interface AuthContextType {\n"
                },
                {
                    "date": 1725169211096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,10 @@\n }) => {\n   const [user, setUser] = useState<TelegramUser | null>(null);\n \n   const login = (userData: TelegramUser) => {\n+    console.log(\"User data: LOGIN\", userData);\n+\n     setUser(userData);\n   };\n \n   const logout = () => {\n"
                },
                {
                    "date": 1725170174749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-\"use client\";\n import React, { createContext, useState, useContext, useEffect } from \"react\";\n import { TelegramUser } from \"@/types\";\n \n interface AuthContextType {\n@@ -14,40 +13,45 @@\n   children,\n }) => {\n   const [user, setUser] = useState<TelegramUser | null>(null);\n \n+  useEffect(() => {\n+    // Check if user is already authenticated\n+    const checkAuth = async () => {\n+      try {\n+        const response = await fetch(\"/api/auth/verify\", {\n+          credentials: \"include\", // This is important for sending cookies\n+        });\n+        if (response.ok) {\n+          const data = await response.json();\n+          if (data.user) {\n+            setUser(data.user);\n+          }\n+        }\n+      } catch (error) {\n+        console.error(\"Error checking authentication:\", error);\n+      }\n+    };\n+\n+    checkAuth();\n+  }, []);\n+\n   const login = (userData: TelegramUser) => {\n-    console.log(\"User data: LOGIN\", userData);\n-\n     setUser(userData);\n   };\n \n-  const logout = () => {\n-    setUser(null);\n-    // Remove the auth_token cookie\n-    document.cookie =\n-      \"auth_token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;\";\n+  const logout = async () => {\n+    try {\n+      await fetch(\"/api/auth/logout\", {\n+        method: \"POST\",\n+        credentials: \"include\",\n+      });\n+      setUser(null);\n+    } catch (error) {\n+      console.error(\"Error logging out:\", error);\n+    }\n   };\n \n-  useEffect(() => {\n-    // Check for existing auth_token cookie on mount\n-    const hasAuthToken = document.cookie\n-      .split(\";\")\n-      .some((item) => item.trim().startsWith(\"auth_token=\"));\n-    if (hasAuthToken) {\n-      // If we have an auth_token, we consider the user logged in\n-      // You might want to verify the token with your backend here\n-      fetch(\"/api/auth/verify\")\n-        .then((response) => response.json())\n-        .then((data) => {\n-          if (data.user) {\n-            setUser(data.user);\n-          }\n-        })\n-        .catch((error) => console.error(\"Error verifying token:\", error));\n-    }\n-  }, []);\n-\n   return (\n     <AuthContext.Provider value={{ user, login, logout }}>\n       {children}\n     </AuthContext.Provider>\n"
                },
                {
                    "date": 1725170316322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+\"use client\";\n+\n import React, { createContext, useState, useContext, useEffect } from \"react\";\n import { TelegramUser } from \"@/types\";\n \n interface AuthContextType {\n"
                },
                {
                    "date": 1725172505717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,10 @@\n     checkAuth();\n   }, []);\n \n   const login = (userData: TelegramUser) => {\n+    console.log(\"User data: LOGIN\", userData);\n+\n     setUser(userData);\n   };\n \n   const logout = async () => {\n"
                },
                {
                    "date": 1725173714331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,11 @@\n     };\n \n     checkAuth();\n   }, []);\n-\n+  useEffect(() => {\n+    console.log(\"User state updated:\", user);\n+  }, [user]);\n   const login = (userData: TelegramUser) => {\n     console.log(\"User data: LOGIN\", userData);\n \n     setUser(userData);\n"
                },
                {
                    "date": 1725174063285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,16 +16,19 @@\n }) => {\n   const [user, setUser] = useState<TelegramUser | null>(null);\n \n   useEffect(() => {\n+    console.log(\"AuthProvider useEffect running\");\n     // Check if user is already authenticated\n     const checkAuth = async () => {\n       try {\n         const response = await fetch(\"/api/auth/verify\", {\n-          credentials: \"include\", // This is important for sending cookies\n+          credentials: \"include\",\n         });\n+        console.log(\"Verify response status:\", response.status);\n         if (response.ok) {\n           const data = await response.json();\n+          console.log(\"Verify response data:\", data);\n           if (data.user) {\n             setUser(data.user);\n           }\n         }\n"
                },
                {
                    "date": 1725174590048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n   const login = (userData: TelegramUser) => {\n     console.log(\"User data: LOGIN\", userData);\n \n     setUser(userData);\n+    localStorage.setItem(\"user\", JSON.stringify(userData));\n   };\n \n   const logout = async () => {\n     try {\n"
                },
                {
                    "date": 1725174639010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,22 +19,26 @@\n   useEffect(() => {\n     console.log(\"AuthProvider useEffect running\");\n     // Check if user is already authenticated\n     const checkAuth = async () => {\n-      try {\n-        const response = await fetch(\"/api/auth/verify\", {\n-          credentials: \"include\",\n-        });\n-        console.log(\"Verify response status:\", response.status);\n-        if (response.ok) {\n-          const data = await response.json();\n-          console.log(\"Verify response data:\", data);\n-          if (data.user) {\n-            setUser(data.user);\n+      const storedUser = localStorage.getItem(\"user\");\n+      if (storedUser) {\n+        setUser(JSON.parse(storedUser));\n+      } else {\n+        try {\n+          const response = await fetch(\"/api/auth/verify\", {\n+            credentials: \"include\", // This is important for sending cookies\n+          });\n+          if (response.ok) {\n+            const data = await response.json();\n+            if (data.user) {\n+              setUser(data.user);\n+              localStorage.setItem(\"user\", JSON.stringify(data.user));\n+            }\n           }\n+        } catch (error) {\n+          console.error(\"Error checking authentication:\", error);\n         }\n-      } catch (error) {\n-        console.error(\"Error checking authentication:\", error);\n       }\n     };\n \n     checkAuth();\n"
                },
                {
                    "date": 1725263990600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,25 +19,27 @@\n   useEffect(() => {\n     console.log(\"AuthProvider useEffect running\");\n     // Check if user is already authenticated\n     const checkAuth = async () => {\n-      const storedUser = localStorage.getItem(\"user\");\n-      if (storedUser) {\n-        setUser(JSON.parse(storedUser));\n-      } else {\n-        try {\n-          const response = await fetch(\"/api/auth/verify\", {\n-            credentials: \"include\", // This is important for sending cookies\n-          });\n-          if (response.ok) {\n-            const data = await response.json();\n-            if (data.user) {\n-              setUser(data.user);\n-              localStorage.setItem(\"user\", JSON.stringify(data.user));\n+      if (window) {\n+        const storedUser = localStorage.getItem(\"user\");\n+        if (storedUser) {\n+          setUser(JSON.parse(storedUser));\n+        } else {\n+          try {\n+            const response = await fetch(\"/api/auth/verify\", {\n+              credentials: \"include\", // This is important for sending cookies\n+            });\n+            if (response.ok) {\n+              const data = await response.json();\n+              if (data.user) {\n+                setUser(data.user);\n+                localStorage.setItem(\"user\", JSON.stringify(data.user));\n+              }\n             }\n+          } catch (error) {\n+            console.error(\"Error checking authentication:\", error);\n           }\n-        } catch (error) {\n-          console.error(\"Error checking authentication:\", error);\n         }\n       }\n     };\n \n"
                },
                {
                    "date": 1725264019130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n   const login = (userData: TelegramUser) => {\n     console.log(\"User data: LOGIN\", userData);\n \n     setUser(userData);\n-    localStorage.setItem(\"user\", JSON.stringify(userData));\n+    if (window) localStorage.setItem(\"user\", JSON.stringify(userData));\n   };\n \n   const logout = async () => {\n     try {\n"
                },
                {
                    "date": 1725264264155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,10 @@\n   const login = (userData: TelegramUser) => {\n     console.log(\"User data: LOGIN\", userData);\n \n     setUser(userData);\n-    if (window) localStorage.setItem(\"user\", JSON.stringify(userData));\n+    if (typeof window !== \"undefined\")\n+      localStorage.setItem(\"user\", JSON.stringify(userData));\n   };\n \n   const logout = async () => {\n     try {\n"
                },
                {
                    "date": 1725264274028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n   useEffect(() => {\n     console.log(\"AuthProvider useEffect running\");\n     // Check if user is already authenticated\n     const checkAuth = async () => {\n-      if (window) {\n+      if (typeof window !== \"undefined\") {\n         const storedUser = localStorage.getItem(\"user\");\n         if (storedUser) {\n           setUser(JSON.parse(storedUser));\n         } else {\n"
                },
                {
                    "date": 1725266484459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,31 +16,22 @@\n }) => {\n   const [user, setUser] = useState<TelegramUser | null>(null);\n \n   useEffect(() => {\n-    console.log(\"AuthProvider useEffect running\");\n     // Check if user is already authenticated\n     const checkAuth = async () => {\n-      if (typeof window !== \"undefined\") {\n-        const storedUser = localStorage.getItem(\"user\");\n-        if (storedUser) {\n-          setUser(JSON.parse(storedUser));\n-        } else {\n-          try {\n-            const response = await fetch(\"/api/auth/verify\", {\n-              credentials: \"include\", // This is important for sending cookies\n-            });\n-            if (response.ok) {\n-              const data = await response.json();\n-              if (data.user) {\n-                setUser(data.user);\n-                localStorage.setItem(\"user\", JSON.stringify(data.user));\n-              }\n-            }\n-          } catch (error) {\n-            console.error(\"Error checking authentication:\", error);\n+      try {\n+        const response = await fetch(\"/api/auth/verify\", {\n+          credentials: \"include\", // This is important for sending cookies\n+        });\n+        if (response.ok) {\n+          const data = await response.json();\n+          if (data.user) {\n+            setUser(data.user);\n           }\n         }\n+      } catch (error) {\n+        console.error(\"Error checking authentication:\", error);\n       }\n     };\n \n     checkAuth();\n@@ -51,10 +42,8 @@\n   const login = (userData: TelegramUser) => {\n     console.log(\"User data: LOGIN\", userData);\n \n     setUser(userData);\n-    if (typeof window !== \"undefined\")\n-      localStorage.setItem(\"user\", JSON.stringify(userData));\n   };\n \n   const logout = async () => {\n     try {\n"
                },
                {
                    "date": 1725270136354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,11 +35,9 @@\n     };\n \n     checkAuth();\n   }, []);\n-  useEffect(() => {\n-    console.log(\"User state updated:\", user);\n-  }, [user]);\n+\n   const login = (userData: TelegramUser) => {\n     console.log(\"User data: LOGIN\", userData);\n \n     setUser(userData);\n"
                },
                {
                    "date": 1725557559456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({\n   children,\n }) => {\n   const [user, setUser] = useState<TelegramUser | null>(null);\n-\n+const [isAuthenticated, setIsAuthenticated] = useState(false);\n   useEffect(() => {\n     // Check if user is already authenticated\n     const checkAuth = async () => {\n       try {\n"
                },
                {
                    "date": 1725557566210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n         if (response.ok) {\n           const data = await response.json();\n           if (data.user) {\n             setUser(data.user);\n+            setIsAuthenticated(true);\n           }\n         }\n       } catch (error) {\n         console.error(\"Error checking authentication:\", error);\n"
                },
                {
                    "date": 1725557714146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     }\n   };\n \n   return (\n-    <AuthContext.Provider value={{ user, login, logout }}>\n+    <AuthContext.Provider value={{ user, login, logout,isAuthenticated }}>\n       {children}\n     </AuthContext.Provider>\n   );\n };\n"
                },
                {
                    "date": 1725557730765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { TelegramUser } from \"@/types\";\n \n interface AuthContextType {\n   user: TelegramUser | null;\n+  isAuthenticated: boolean;\n   login: (user: TelegramUser) => void;\n   logout: () => void;\n }\n \n"
                },
                {
                    "date": 1725686028861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     checkAuth();\n   }, []);\n \n   const login = (userData: TelegramUser) => {\n-    console.log(\"User data: LOGIN\", userData);\n+    console.log([\"User data: LOGIN\", userData]);\n \n     setUser(userData);\n   };\n \n"
                },
                {
                    "date": 1725687279000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         if (response.ok) {\n           const data = await response.json();\n           if (data.user) {\n             setUser(data.user);\n-            setIsAuthenticated(true);\n+            // setIsAuthenticated(true);\n           }\n         }\n       } catch (error) {\n         console.error(\"Error checking authentication:\", error);\n"
                },
                {
                    "date": 1725687790915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     checkAuth();\n   }, []);\n \n   const login = (userData: TelegramUser) => {\n-    console.log([\"User data: LOGIN\", userData]);\n+    console.log([\"User LOGIN\", userData]);\n \n     setUser(userData);\n   };\n \n"
                },
                {
                    "date": 1725687893163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         if (response.ok) {\n           const data = await response.json();\n           if (data.user) {\n             setUser(data.user);\n-            // setIsAuthenticated(true);\n+            setIsAuthenticated(true);\n           }\n         }\n       } catch (error) {\n         console.error(\"Error checking authentication:\", error);\n"
                },
                {
                    "date": 1725688099300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         if (response.ok) {\n           const data = await response.json();\n           if (data.user) {\n             setUser(data.user);\n-            setIsAuthenticated(true);\n+           \n           }\n         }\n       } catch (error) {\n         console.error(\"Error checking authentication:\", error);\n"
                },
                {
                    "date": 1725688712819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n         if (response.ok) {\n           const data = await response.json();\n           if (data.user) {\n             setUser(data.user);\n+            setIsAuthenticated(true);\n           }\n         }\n       } catch (error) {\n         console.error(\"Error checking authentication:\", error);\n@@ -41,8 +42,9 @@\n   const login = (userData: TelegramUser) => {\n     console.log([\"User LOGIN\", userData]);\n \n     setUser(userData);\n+    setIsAuthenticated(true);\n   };\n \n   const logout = async () => {\n     try {\n"
                }
            ],
            "date": 1725141505538,
            "name": "Commit-0",
            "content": "import React, { createContext, useState, useContext, useEffect } from \"react\";\nimport { TelegramUser } from \"@/types\";\n\ninterface AuthContextType {\n  user: TelegramUser | null;\n  login: (user: TelegramUser) => void;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [user, setUser] = useState<TelegramUser | null>(null);\n\n  const login = (userData: TelegramUser) => {\n    setUser(userData);\n    // Set a cookie here instead of using localStorage\n    document.cookie = `user=${JSON.stringify(\n      userData\n    )}; path=/; max-age=86400; secure; samesite=strict`;\n  };\n\n  const logout = () => {\n    setUser(null);\n    // Remove the cookie\n    document.cookie = \"user=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;\";\n  };\n\n  useEffect(() => {\n    // Check for existing user cookie on mount\n    const userCookie = document.cookie\n      .split(\"; \")\n      .find((row) => row.startsWith(\"user=\"));\n    if (userCookie) {\n      const userData = JSON.parse(userCookie.split(\"=\")[1]);\n      setUser(userData);\n    }\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n"
        }
    ]
}