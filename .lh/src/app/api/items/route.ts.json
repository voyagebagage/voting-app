{
    "sourceFile": "src/app/api/items/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1724758545459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724760573341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { NextRequest, NextResponse } from \"next/server\";\n import dbConnect from \"@/lib/mongodb\";\n import Item from \"@/models/Item\";\n-import { fetchPlacesFromGoogle } from \"@/lib/googleMapsApi\"; // You'll need to implement this\n+import { fetchPlacesFromGoogle } from \"@/lib/googleMapsApi\";\n+import { verifyToken } from \"@/lib/auth\";\n \n export async function GET(request: NextRequest) {\n   const { searchParams } = new URL(request.url);\n   const category = searchParams.get(\"category\");\n@@ -22,15 +23,9 @@\n     let items = await Item.find({ category, type });\n \n     if (items.length === 0 && type === \"place\" && location) {\n       const googlePlaces = await fetchPlacesFromGoogle(category, location);\n-      items = await Item.insertMany(\n-        googlePlaces.map((place) => ({\n-          ...place,\n-          type: \"place\",\n-          addedBy: \"system\",\n-        }))\n-      );\n+      items = await Item.insertMany(googlePlaces);\n     }\n \n     return NextResponse.json(items);\n   } catch (error) {\n@@ -42,14 +37,27 @@\n   }\n }\n \n export async function POST(request: NextRequest) {\n-  const { name, category, type, description, contactInfo, addedBy } =\n+  const token = request.headers.get(\"Authorization\")?.split(\" \")[1];\n+  if (!token) {\n+    return NextResponse.json(\n+      { error: \"Authentication required\" },\n+      { status: 401 }\n+    );\n+  }\n+\n+  const decodedToken = verifyToken(token);\n+  if (!decodedToken) {\n+    return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n+  }\n+\n+  const { name, category, type, description, contactInfo } =\n     await request.json();\n \n-  if (!name || !category || !type || !addedBy) {\n+  if (!name || !category || !type) {\n     return NextResponse.json(\n-      { error: \"Name, category, type, and addedBy are required\" },\n+      { error: \"Name, category, and type are required\" },\n       { status: 400 }\n     );\n   }\n \n@@ -61,9 +69,9 @@\n       category,\n       type,\n       description,\n       contactInfo,\n-      addedBy,\n+      addedBy: decodedToken.userId,\n     });\n \n     return NextResponse.json(newItem, { status: 201 });\n   } catch (error) {\n"
                },
                {
                    "date": 1724760694618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,12 @@\n import { NextRequest, NextResponse } from \"next/server\";\n-import dbConnect from \"@/lib/mongodb\";\n+// import dbConnect from \"@/lib/mongodb\";\n import Item from \"@/models/Item\";\n-import { fetchPlacesFromGoogle } from \"@/lib/googleMapsApi\";\n-import { verifyToken } from \"@/lib/auth\";\n+// import { fetchPlacesFromGoogle } from \"@/lib/googleMapsApi\";\n+import { verifyToken } from \"../auth/auth\";\n+import { fetchPlacesFromGoogle } from \"@/app/lib/googleMapApi\";\n+import dbConnect from \"@/app/lib/mongodb\";\n+// import { verifyToken } from \"@/lib/auth\";\n \n export async function GET(request: NextRequest) {\n   const { searchParams } = new URL(request.url);\n   const category = searchParams.get(\"category\");\n"
                },
                {
                    "date": 1724760702389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,9 @@\n import { NextRequest, NextResponse } from \"next/server\";\n-// import dbConnect from \"@/lib/mongodb\";\n import Item from \"@/models/Item\";\n-// import { fetchPlacesFromGoogle } from \"@/lib/googleMapsApi\";\n import { verifyToken } from \"../auth/auth\";\n import { fetchPlacesFromGoogle } from \"@/app/lib/googleMapApi\";\n import dbConnect from \"@/app/lib/mongodb\";\n-// import { verifyToken } from \"@/lib/auth\";\n \n export async function GET(request: NextRequest) {\n   const { searchParams } = new URL(request.url);\n   const category = searchParams.get(\"category\");\n"
                },
                {
                    "date": 1724782684448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,12 @@\n import { NextRequest, NextResponse } from \"next/server\";\n+import dbConnect from \"@/lib/mongodb\";\n import Item from \"@/models/Item\";\n-import { verifyToken } from \"../auth/auth\";\n-import { fetchPlacesFromGoogle } from \"@/app/lib/googleMapApi\";\n-import dbConnect from \"@/app/lib/mongodb\";\n \n export async function GET(request: NextRequest) {\n   const { searchParams } = new URL(request.url);\n   const category = searchParams.get(\"category\");\n   const type = searchParams.get(\"type\");\n-  const location = searchParams.get(\"location\");\n \n   if (!category || !type) {\n     return NextResponse.json(\n       { error: \"Category and type are required\" },\n@@ -19,15 +16,9 @@\n \n   await dbConnect();\n \n   try {\n-    let items = await Item.find({ category, type });\n-\n-    if (items.length === 0 && type === \"place\" && location) {\n-      const googlePlaces = await fetchPlacesFromGoogle(category, location);\n-      items = await Item.insertMany(googlePlaces);\n-    }\n-\n+    const items = await Item.find({ category, type });\n     return NextResponse.json(items);\n   } catch (error) {\n     console.error(\"Error fetching items:\", error);\n     return NextResponse.json(\n@@ -35,50 +26,88 @@\n       { status: 500 }\n     );\n   }\n }\n+// import { NextRequest, NextResponse } from \"next/server\";\n+// import Item from \"@/models/Item\";\n+// import { verifyToken } from \"../auth/auth\";\n+// import { fetchPlacesFromGoogle } from \"@/app/lib/googleMapApi\";\n+// import dbConnect from \"@/app/lib/mongodb\";\n \n-export async function POST(request: NextRequest) {\n-  const token = request.headers.get(\"Authorization\")?.split(\" \")[1];\n-  if (!token) {\n-    return NextResponse.json(\n-      { error: \"Authentication required\" },\n-      { status: 401 }\n-    );\n-  }\n+// export async function GET(request: NextRequest) {\n+//   const { searchParams } = new URL(request.url);\n+//   const category = searchParams.get(\"category\");\n+//   const type = searchParams.get(\"type\");\n+//   const location = searchParams.get(\"location\");\n \n-  const decodedToken = verifyToken(token);\n-  if (!decodedToken) {\n-    return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n-  }\n+//   if (!category || !type) {\n+//     return NextResponse.json(\n+//       { error: \"Category and type are required\" },\n+//       { status: 400 }\n+//     );\n+//   }\n \n-  const { name, category, type, description, contactInfo } =\n-    await request.json();\n+//   await dbConnect();\n \n-  if (!name || !category || !type) {\n-    return NextResponse.json(\n-      { error: \"Name, category, and type are required\" },\n-      { status: 400 }\n-    );\n-  }\n+//   try {\n+//     let items = await Item.find({ category, type });\n \n-  await dbConnect();\n+//     if (items.length === 0 && type === \"place\" && location) {\n+//       const googlePlaces = await fetchPlacesFromGoogle(category, location);\n+//       items = await Item.insertMany(googlePlaces);\n+//     }\n \n-  try {\n-    const newItem = await Item.create({\n-      name,\n-      category,\n-      type,\n-      description,\n-      contactInfo,\n-      addedBy: decodedToken.userId,\n-    });\n+//     return NextResponse.json(items);\n+//   } catch (error) {\n+//     console.error(\"Error fetching items:\", error);\n+//     return NextResponse.json(\n+//       { error: \"Failed to fetch items\" },\n+//       { status: 500 }\n+//     );\n+//   }\n+// }\n \n-    return NextResponse.json(newItem, { status: 201 });\n-  } catch (error) {\n-    console.error(\"Error adding new item:\", error);\n-    return NextResponse.json(\n-      { error: \"Failed to add new item\" },\n-      { status: 500 }\n-    );\n-  }\n-}\n+// export async function POST(request: NextRequest) {\n+//   const token = request.headers.get(\"Authorization\")?.split(\" \")[1];\n+//   if (!token) {\n+//     return NextResponse.json(\n+//       { error: \"Authentication required\" },\n+//       { status: 401 }\n+//     );\n+//   }\n+\n+//   const decodedToken = verifyToken(token);\n+//   if (!decodedToken) {\n+//     return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n+//   }\n+\n+//   const { name, category, type, description, contactInfo } =\n+//     await request.json();\n+\n+//   if (!name || !category || !type) {\n+//     return NextResponse.json(\n+//       { error: \"Name, category, and type are required\" },\n+//       { status: 400 }\n+//     );\n+//   }\n+\n+//   await dbConnect();\n+\n+//   try {\n+//     const newItem = await Item.create({\n+//       name,\n+//       category,\n+//       type,\n+//       description,\n+//       contactInfo,\n+//       addedBy: decodedToken.userId,\n+//     });\n+\n+//     return NextResponse.json(newItem, { status: 201 });\n+//   } catch (error) {\n+//     console.error(\"Error adding new item:\", error);\n+//     return NextResponse.json(\n+//       { error: \"Failed to add new item\" },\n+//       { status: 500 }\n+//     );\n+//   }\n+// }\n"
                },
                {
                    "date": 1724782769067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { NextRequest, NextResponse } from \"next/server\";\n-import dbConnect from \"@/lib/mongodb\";\n+import dbConnect from \"@/app/lib/mongodb\";\n import Item from \"@/models/Item\";\n \n export async function GET(request: NextRequest) {\n   const { searchParams } = new URL(request.url);\n"
                },
                {
                    "date": 1724843293505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { NextRequest, NextResponse } from \"next/server\";\n import dbConnect from \"@/app/lib/mongodb\";\n-import Item from \"@/models/Item\";\n+import Item from \"@/models/Items\";\n \n export async function GET(request: NextRequest) {\n   const { searchParams } = new URL(request.url);\n   const category = searchParams.get(\"category\");\n"
                }
            ],
            "date": 1724758545459,
            "name": "Commit-0",
            "content": "import { NextRequest, NextResponse } from \"next/server\";\nimport dbConnect from \"@/lib/mongodb\";\nimport Item from \"@/models/Item\";\nimport { fetchPlacesFromGoogle } from \"@/lib/googleMapsApi\"; // You'll need to implement this\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const category = searchParams.get(\"category\");\n  const type = searchParams.get(\"type\");\n  const location = searchParams.get(\"location\");\n\n  if (!category || !type) {\n    return NextResponse.json(\n      { error: \"Category and type are required\" },\n      { status: 400 }\n    );\n  }\n\n  await dbConnect();\n\n  try {\n    let items = await Item.find({ category, type });\n\n    if (items.length === 0 && type === \"place\" && location) {\n      const googlePlaces = await fetchPlacesFromGoogle(category, location);\n      items = await Item.insertMany(\n        googlePlaces.map((place) => ({\n          ...place,\n          type: \"place\",\n          addedBy: \"system\",\n        }))\n      );\n    }\n\n    return NextResponse.json(items);\n  } catch (error) {\n    console.error(\"Error fetching items:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch items\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  const { name, category, type, description, contactInfo, addedBy } =\n    await request.json();\n\n  if (!name || !category || !type || !addedBy) {\n    return NextResponse.json(\n      { error: \"Name, category, type, and addedBy are required\" },\n      { status: 400 }\n    );\n  }\n\n  await dbConnect();\n\n  try {\n    const newItem = await Item.create({\n      name,\n      category,\n      type,\n      description,\n      contactInfo,\n      addedBy,\n    });\n\n    return NextResponse.json(newItem, { status: 201 });\n  } catch (error) {\n    console.error(\"Error adding new item:\", error);\n    return NextResponse.json(\n      { error: \"Failed to add new item\" },\n      { status: 500 }\n    );\n  }\n}\n"
        }
    ]
}