{
    "sourceFile": "src/app/api/vote/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1724758589459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724759731521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { NextRequest, NextResponse } from \"next/server\";\n-import dbConnect from \"@/lib/mongodb\";\n-import Item from \"@/models/Item\";\n+import dbConnect from \"../../lib/mongodb\";\n+import Item from \"../items/model\";\n import Vote from \"@/models/Vote\";\n \n export async function POST(request: NextRequest) {\n   const { itemId, userId, category } = await request.json();\n"
                },
                {
                    "date": 1724759815883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { NextRequest, NextResponse } from \"next/server\";\n import dbConnect from \"../../lib/mongodb\";\n-import Item from \"../items/model\";\n+import Item from \"../../lib/models/Item\";\n import Vote from \"@/models/Vote\";\n \n export async function POST(request: NextRequest) {\n   const { itemId, userId, category } = await request.json();\n"
                },
                {
                    "date": 1724759884332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { NextRequest, NextResponse } from \"next/server\";\n import dbConnect from \"../../lib/mongodb\";\n-import Item from \"../../lib/models/Item\";\n+import Item from \"../../../models/Item\";\n import Vote from \"@/models/Vote\";\n \n export async function POST(request: NextRequest) {\n   const { itemId, userId, category } = await request.json();\n"
                },
                {
                    "date": 1724760110975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { NextRequest, NextResponse } from \"next/server\";\n import dbConnect from \"../../lib/mongodb\";\n-import Item from \"../../../models/Item\";\n+import Item from \"@/models/Item\";\n import Vote from \"@/models/Vote\";\n \n export async function POST(request: NextRequest) {\n   const { itemId, userId, category } = await request.json();\n"
                },
                {
                    "date": 1724760745057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,29 @@\n import { NextRequest, NextResponse } from \"next/server\";\n-import dbConnect from \"../../lib/mongodb\";\n+import dbConnect from \"@/lib/mongodb\";\n import Item from \"@/models/Item\";\n import Vote from \"@/models/Vote\";\n+import { verifyToken } from \"@/lib/auth\";\n \n export async function POST(request: NextRequest) {\n-  const { itemId, userId, category } = await request.json();\n+  const token = request.headers.get(\"Authorization\")?.split(\" \")[1];\n+  if (!token) {\n+    return NextResponse.json(\n+      { error: \"Authentication required\" },\n+      { status: 401 }\n+    );\n+  }\n \n-  if (!itemId || !userId || !category) {\n+  const decodedToken = verifyToken(token);\n+  if (!decodedToken) {\n+    return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n+  }\n+\n+  const { itemId, category } = await request.json();\n+\n+  if (!itemId || !category) {\n     return NextResponse.json(\n-      { error: \"ItemId, userId, and category are required\" },\n+      { error: \"ItemId and category are required\" },\n       { status: 400 }\n     );\n   }\n \n@@ -20,9 +34,9 @@\n     const startOfDay = new Date();\n     startOfDay.setHours(0, 0, 0, 0);\n \n     const existingVote = await Vote.findOne({\n-      userId,\n+      userId: decodedToken.userId,\n       category,\n       createdAt: { $gte: startOfDay },\n     });\n \n@@ -33,9 +47,9 @@\n       );\n     }\n \n     // Create new vote\n-    await Vote.create({ userId, itemId, category });\n+    await Vote.create({ userId: decodedToken.userId, itemId, category });\n \n     // Update item's vote count\n     const updatedItem = await Item.findByIdAndUpdate(\n       itemId,\n"
                },
                {
                    "date": 1724760754914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n import { NextRequest, NextResponse } from \"next/server\";\n-import dbConnect from \"@/lib/mongodb\";\n+// import dbConnect from \"@/lib/mongodb\";\n import Item from \"@/models/Item\";\n import Vote from \"@/models/Vote\";\n import { verifyToken } from \"@/lib/auth\";\n+import dbConnect from \"@/app/lib/mongodb\";\n \n export async function POST(request: NextRequest) {\n   const token = request.headers.get(\"Authorization\")?.split(\" \")[1];\n   if (!token) {\n"
                },
                {
                    "date": 1724760764915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,11 @@\n import { NextRequest, NextResponse } from \"next/server\";\n // import dbConnect from \"@/lib/mongodb\";\n import Item from \"@/models/Item\";\n import Vote from \"@/models/Vote\";\n-import { verifyToken } from \"@/lib/auth\";\n+// import { verifyToken } from \"@/lib/auth\";\n import dbConnect from \"@/app/lib/mongodb\";\n+import { verifyToken } from \"../auth/auth\";\n \n export async function POST(request: NextRequest) {\n   const token = request.headers.get(\"Authorization\")?.split(\" \")[1];\n   if (!token) {\n"
                },
                {
                    "date": 1724782703838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,15 @@\n import { NextRequest, NextResponse } from \"next/server\";\n-// import dbConnect from \"@/lib/mongodb\";\n+import dbConnect from \"@/lib/mongodb\";\n import Item from \"@/models/Item\";\n import Vote from \"@/models/Vote\";\n-// import { verifyToken } from \"@/lib/auth\";\n-import dbConnect from \"@/app/lib/mongodb\";\n-import { verifyToken } from \"../auth/auth\";\n \n export async function POST(request: NextRequest) {\n-  const token = request.headers.get(\"Authorization\")?.split(\" \")[1];\n-  if (!token) {\n-    return NextResponse.json(\n-      { error: \"Authentication required\" },\n-      { status: 401 }\n-    );\n-  }\n+  const { itemId, category, userId } = await request.json();\n \n-  const decodedToken = verifyToken(token);\n-  if (!decodedToken) {\n-    return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n-  }\n-\n-  const { itemId, category } = await request.json();\n-\n-  if (!itemId || !category) {\n+  if (!itemId || !category || !userId) {\n     return NextResponse.json(\n-      { error: \"ItemId and category are required\" },\n+      { error: \"ItemId, category, and userId are required\" },\n       { status: 400 }\n     );\n   }\n \n@@ -36,9 +20,9 @@\n     const startOfDay = new Date();\n     startOfDay.setHours(0, 0, 0, 0);\n \n     const existingVote = await Vote.findOne({\n-      userId: decodedToken.userId,\n+      userId,\n       category,\n       createdAt: { $gte: startOfDay },\n     });\n \n@@ -49,9 +33,9 @@\n       );\n     }\n \n     // Create new vote\n-    await Vote.create({ userId: decodedToken.userId, itemId, category });\n+    await Vote.create({ userId, itemId, category });\n \n     // Update item's vote count\n     const updatedItem = await Item.findByIdAndUpdate(\n       itemId,\n@@ -67,4 +51,72 @@\n       { status: 500 }\n     );\n   }\n }\n+// import { NextRequest, NextResponse } from \"next/server\";\n+// import Item from \"@/models/Item\";\n+// import Vote from \"@/models/Vote\";\n+// import dbConnect from \"@/app/lib/mongodb\";\n+// import { verifyToken } from \"../auth/auth\";\n+\n+// export async function POST(request: NextRequest) {\n+//   const token = request.headers.get(\"Authorization\")?.split(\" \")[1];\n+//   if (!token) {\n+//     return NextResponse.json(\n+//       { error: \"Authentication required\" },\n+//       { status: 401 }\n+//     );\n+//   }\n+\n+//   const decodedToken = verifyToken(token);\n+//   if (!decodedToken) {\n+//     return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n+//   }\n+\n+//   const { itemId, category } = await request.json();\n+\n+//   if (!itemId || !category) {\n+//     return NextResponse.json(\n+//       { error: \"ItemId and category are required\" },\n+//       { status: 400 }\n+//     );\n+//   }\n+\n+//   await dbConnect();\n+\n+//   try {\n+//     // Check if user has already voted for this category today\n+//     const startOfDay = new Date();\n+//     startOfDay.setHours(0, 0, 0, 0);\n+\n+//     const existingVote = await Vote.findOne({\n+//       userId: decodedToken.userId,\n+//       category,\n+//       createdAt: { $gte: startOfDay },\n+//     });\n+\n+//     if (existingVote) {\n+//       return NextResponse.json(\n+//         { error: \"You have already voted in this category today\" },\n+//         { status: 400 }\n+//       );\n+//     }\n+\n+//     // Create new vote\n+//     await Vote.create({ userId: decodedToken.userId, itemId, category });\n+\n+//     // Update item's vote count\n+//     const updatedItem = await Item.findByIdAndUpdate(\n+//       itemId,\n+//       { $inc: { votes: 1 } },\n+//       { new: true }\n+//     );\n+\n+//     return NextResponse.json(updatedItem);\n+//   } catch (error) {\n+//     console.error(\"Error voting:\", error);\n+//     return NextResponse.json(\n+//       { error: \"Failed to register vote\" },\n+//       { status: 500 }\n+//     );\n+//   }\n+// }\n"
                },
                {
                    "date": 1724782742947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+import { NextRequest, NextResponse } from \"next/server\";\n+import dbConnect from \"@/lib/mongodb\";\n+import Item from \"@/models/Item\";\n+import Vote from \"@/models/Vote\";\n+\n+export async function POST(request: NextRequest) {\n+  const { itemId, category, userId } = await request.json();\n+\n+  if (!itemId || !category || !userId) {\n+    return NextResponse.json(\n+      { error: \"ItemId, category, and userId are required\" },\n+      { status: 400 }\n+    );\n+  }\n+\n+  await dbConnect();\n+\n+  try {\n+    // Check if user has already voted for this category today\n+    const startOfDay = new Date();\n+    startOfDay.setHours(0, 0, 0, 0);\n+\n+    const existingVote = await Vote.findOne({\n+      userId,\n+      category,\n+      createdAt: { $gte: startOfDay },\n+    });\n+\n+    if (existingVote) {\n+      return NextResponse.json(\n+        { error: \"You have already voted in this category today\" },\n+        { status: 400 }\n+      );\n+    }\n+\n+    // Create new vote\n+    await Vote.create({ userId, itemId, category });\n+\n+    // Update item's vote count\n+    const updatedItem = await Item.findByIdAndUpdate(\n+      itemId,\n+      { $inc: { votes: 1 } },\n+      { new: true }\n+    );\n+\n+    return NextResponse.json(updatedItem);\n+  } catch (error) {\n+    console.error(\"Error voting:\", error);\n+    return NextResponse.json(\n+      { error: \"Failed to register vote\" },\n+      { status: 500 }\n+    );\n+  }\n+}\n+// import { NextRequest, NextResponse } from \"next/server\";\n+// import Item from \"@/models/Item\";\n+// import Vote from \"@/models/Vote\";\n+// import dbConnect from \"@/app/lib/mongodb\";\n+// import { verifyToken } from \"../auth/auth\";\n+\n+// export async function POST(request: NextRequest) {\n+//   const token = request.headers.get(\"Authorization\")?.split(\" \")[1];\n+//   if (!token) {\n+//     return NextResponse.json(\n+//       { error: \"Authentication required\" },\n+//       { status: 401 }\n+//     );\n+//   }\n+\n+//   const decodedToken = verifyToken(token);\n+//   if (!decodedToken) {\n+//     return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n+//   }\n+\n+//   const { itemId, category } = await request.json();\n+\n+//   if (!itemId || !category) {\n+//     return NextResponse.json(\n+//       { error: \"ItemId and category are required\" },\n+//       { status: 400 }\n+//     );\n+//   }\n+\n+//   await dbConnect();\n+\n+//   try {\n+//     // Check if user has already voted for this category today\n+//     const startOfDay = new Date();\n+//     startOfDay.setHours(0, 0, 0, 0);\n+\n+//     const existingVote = await Vote.findOne({\n+//       userId: decodedToken.userId,\n+//       category,\n+//       createdAt: { $gte: startOfDay },\n+//     });\n+\n+//     if (existingVote) {\n+//       return NextResponse.json(\n+//         { error: \"You have already voted in this category today\" },\n+//         { status: 400 }\n+//       );\n+//     }\n+\n+//     // Create new vote\n+//     await Vote.create({ userId: decodedToken.userId, itemId, category });\n+\n+//     // Update item's vote count\n+//     const updatedItem = await Item.findByIdAndUpdate(\n+//       itemId,\n+//       { $inc: { votes: 1 } },\n+//       { new: true }\n+//     );\n+\n+//     return NextResponse.json(updatedItem);\n+//   } catch (error) {\n+//     console.error(\"Error voting:\", error);\n+//     return NextResponse.json(\n+//       { error: \"Failed to register vote\" },\n+//       { status: 500 }\n+//     );\n+//   }\n+// }\n"
                },
                {
                    "date": 1724782757947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { NextRequest, NextResponse } from \"next/server\";\n-import dbConnect from \"@/lib/mongodb\";\n+import dbConnect from \"@/app/lib/mongodb\";\n import Item from \"@/models/Item\";\n import Vote from \"@/models/Vote\";\n \n export async function POST(request: NextRequest) {\n@@ -119,126 +119,4 @@\n //       { status: 500 }\n //     );\n //   }\n // }\n-import { NextRequest, NextResponse } from \"next/server\";\n-import dbConnect from \"@/lib/mongodb\";\n-import Item from \"@/models/Item\";\n-import Vote from \"@/models/Vote\";\n-\n-export async function POST(request: NextRequest) {\n-  const { itemId, category, userId } = await request.json();\n-\n-  if (!itemId || !category || !userId) {\n-    return NextResponse.json(\n-      { error: \"ItemId, category, and userId are required\" },\n-      { status: 400 }\n-    );\n-  }\n-\n-  await dbConnect();\n-\n-  try {\n-    // Check if user has already voted for this category today\n-    const startOfDay = new Date();\n-    startOfDay.setHours(0, 0, 0, 0);\n-\n-    const existingVote = await Vote.findOne({\n-      userId,\n-      category,\n-      createdAt: { $gte: startOfDay },\n-    });\n-\n-    if (existingVote) {\n-      return NextResponse.json(\n-        { error: \"You have already voted in this category today\" },\n-        { status: 400 }\n-      );\n-    }\n-\n-    // Create new vote\n-    await Vote.create({ userId, itemId, category });\n-\n-    // Update item's vote count\n-    const updatedItem = await Item.findByIdAndUpdate(\n-      itemId,\n-      { $inc: { votes: 1 } },\n-      { new: true }\n-    );\n-\n-    return NextResponse.json(updatedItem);\n-  } catch (error) {\n-    console.error(\"Error voting:\", error);\n-    return NextResponse.json(\n-      { error: \"Failed to register vote\" },\n-      { status: 500 }\n-    );\n-  }\n-}\n-// import { NextRequest, NextResponse } from \"next/server\";\n-// import Item from \"@/models/Item\";\n-// import Vote from \"@/models/Vote\";\n-// import dbConnect from \"@/app/lib/mongodb\";\n-// import { verifyToken } from \"../auth/auth\";\n-\n-// export async function POST(request: NextRequest) {\n-//   const token = request.headers.get(\"Authorization\")?.split(\" \")[1];\n-//   if (!token) {\n-//     return NextResponse.json(\n-//       { error: \"Authentication required\" },\n-//       { status: 401 }\n-//     );\n-//   }\n-\n-//   const decodedToken = verifyToken(token);\n-//   if (!decodedToken) {\n-//     return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n-//   }\n-\n-//   const { itemId, category } = await request.json();\n-\n-//   if (!itemId || !category) {\n-//     return NextResponse.json(\n-//       { error: \"ItemId and category are required\" },\n-//       { status: 400 }\n-//     );\n-//   }\n-\n-//   await dbConnect();\n-\n-//   try {\n-//     // Check if user has already voted for this category today\n-//     const startOfDay = new Date();\n-//     startOfDay.setHours(0, 0, 0, 0);\n-\n-//     const existingVote = await Vote.findOne({\n-//       userId: decodedToken.userId,\n-//       category,\n-//       createdAt: { $gte: startOfDay },\n-//     });\n-\n-//     if (existingVote) {\n-//       return NextResponse.json(\n-//         { error: \"You have already voted in this category today\" },\n-//         { status: 400 }\n-//       );\n-//     }\n-\n-//     // Create new vote\n-//     await Vote.create({ userId: decodedToken.userId, itemId, category });\n-\n-//     // Update item's vote count\n-//     const updatedItem = await Item.findByIdAndUpdate(\n-//       itemId,\n-//       { $inc: { votes: 1 } },\n-//       { new: true }\n-//     );\n-\n-//     return NextResponse.json(updatedItem);\n-//   } catch (error) {\n-//     console.error(\"Error voting:\", error);\n-//     return NextResponse.json(\n-//       { error: \"Failed to register vote\" },\n-//       { status: 500 }\n-//     );\n-//   }\n-// }\n"
                },
                {
                    "date": 1724843293531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { NextRequest, NextResponse } from \"next/server\";\n import dbConnect from \"@/app/lib/mongodb\";\n-import Item from \"@/models/Item\";\n+import Item from \"@/models/Items\";\n import Vote from \"@/models/Vote\";\n \n export async function POST(request: NextRequest) {\n   const { itemId, category, userId } = await request.json();\n"
                }
            ],
            "date": 1724758589459,
            "name": "Commit-0",
            "content": "import { NextRequest, NextResponse } from \"next/server\";\nimport dbConnect from \"@/lib/mongodb\";\nimport Item from \"@/models/Item\";\nimport Vote from \"@/models/Vote\";\n\nexport async function POST(request: NextRequest) {\n  const { itemId, userId, category } = await request.json();\n\n  if (!itemId || !userId || !category) {\n    return NextResponse.json(\n      { error: \"ItemId, userId, and category are required\" },\n      { status: 400 }\n    );\n  }\n\n  await dbConnect();\n\n  try {\n    // Check if user has already voted for this category today\n    const startOfDay = new Date();\n    startOfDay.setHours(0, 0, 0, 0);\n\n    const existingVote = await Vote.findOne({\n      userId,\n      category,\n      createdAt: { $gte: startOfDay },\n    });\n\n    if (existingVote) {\n      return NextResponse.json(\n        { error: \"You have already voted in this category today\" },\n        { status: 400 }\n      );\n    }\n\n    // Create new vote\n    await Vote.create({ userId, itemId, category });\n\n    // Update item's vote count\n    const updatedItem = await Item.findByIdAndUpdate(\n      itemId,\n      { $inc: { votes: 1 } },\n      { new: true }\n    );\n\n    return NextResponse.json(updatedItem);\n  } catch (error) {\n    console.error(\"Error voting:\", error);\n    return NextResponse.json(\n      { error: \"Failed to register vote\" },\n      { status: 500 }\n    );\n  }\n}\n"
        }
    ]
}