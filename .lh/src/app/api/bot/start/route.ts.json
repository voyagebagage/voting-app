{
    "sourceFile": "src/app/api/bot/start/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1725144024443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725144600869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { NextRequest, NextResponse } from \"next/server\";\n-import { verifyTelegramAuth, generateToken } from \"@/app/lib/auth\";\n+import { generateToken } from \"@/app/lib/auth\";\n import { cookies } from \"next/headers\";\n \n export async function GET(request: NextRequest) {\n   const { searchParams } = new URL(request.url);\n"
                }
            ],
            "date": 1725144024443,
            "name": "Commit-0",
            "content": "import { NextRequest, NextResponse } from \"next/server\";\nimport { verifyTelegramAuth, generateToken } from \"@/app/lib/auth\";\nimport { cookies } from \"next/headers\";\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const startPayload = searchParams.get(\"start\");\n\n  if (!startPayload) {\n    return NextResponse.json(\n      { error: \"Invalid start command\" },\n      { status: 400 }\n    );\n  }\n\n  // Here you would typically verify the user with Telegram's API\n  // For this example, we'll just create a mock user\n  const mockUser = {\n    id: 12345,\n    first_name: \"Test\",\n    username: \"testuser\",\n  };\n\n  const token = generateToken(mockUser.id.toString());\n\n  cookies().set(\"auth_token\", token, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === \"production\",\n    sameSite: \"lax\",\n    maxAge: 86400, // 1 day\n    path: \"/\",\n  });\n\n  // Redirect to the app's main page\n  return NextResponse.redirect(new URL(\"/\", request.url));\n}\n"
        }
    ]
}