{
    "sourceFile": "src/app/api/validate-hash/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1725048572449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725048936251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   }\n \n   const dataCheckString = hash\n     .split(\"&\")\n-    .filter((param) => !param.startsWith(\"hash=\"))\n+    .filter((param: string) => !param.startsWith(\"hash=\"))\n     .sort()\n     .join(\"\\n\");\n \n   const secretKey = crypto\n@@ -26,9 +26,9 @@\n     .digest(\"hex\");\n \n   const receivedHash = hash\n     .split(\"&\")\n-    .find((param) => param.startsWith(\"hash=\"))\n+    .find((param: string) => param.startsWith(\"hash=\"))\n     ?.split(\"=\")[1];\n \n   if (calculatedHash === receivedHash) {\n     return NextResponse.json({ valid: true });\n"
                },
                {
                    "date": 1725049189377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,14 @@\n   const receivedHash = hash\n     .split(\"&\")\n     .find((param: string) => param.startsWith(\"hash=\"))\n     ?.split(\"=\")[1];\n+  console.log([\n+    \"Received hash:\",\n+    receivedHash,\n+    \"Calculated hash:\",\n+    calculatedHash,\n+  ]);\n \n   if (calculatedHash === receivedHash) {\n     return NextResponse.json({ valid: true });\n   } else {\n"
                },
                {
                    "date": 1725049821571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,18 +5,26 @@\n \n export async function POST(request: NextRequest) {\n   const { hash } = await request.json();\n \n+  console.log(\"Received hash:\", hash);\n+  console.log(\"BOT_TOKEN:\", BOT_TOKEN ? \"Set\" : \"Not set\");\n+\n   if (!hash) {\n-    return NextResponse.json({ error: \"Hash is required\" }, { status: 400 });\n+    return NextResponse.json(\n+      { error: \"Hash is required\", valid: false },\n+      { status: 400 }\n+    );\n   }\n \n   const dataCheckString = hash\n     .split(\"&\")\n     .filter((param: string) => !param.startsWith(\"hash=\"))\n     .sort()\n     .join(\"\\n\");\n \n+  console.log(\"Data check string:\", dataCheckString);\n+\n   const secretKey = crypto\n     .createHash(\"sha256\")\n     .update(BOT_TOKEN || \"\")\n     .digest();\n@@ -24,21 +32,22 @@\n     .createHmac(\"sha256\", secretKey)\n     .update(dataCheckString)\n     .digest(\"hex\");\n \n+  console.log(\"Calculated hash:\", calculatedHash);\n+\n   const receivedHash = hash\n     .split(\"&\")\n     .find((param: string) => param.startsWith(\"hash=\"))\n     ?.split(\"=\")[1];\n-  console.log([\n-    \"Received hash:\",\n-    receivedHash,\n-    \"Calculated hash:\",\n-    calculatedHash,\n-  ]);\n \n+  console.log(\"Received hash:\", receivedHash);\n+\n   if (calculatedHash === receivedHash) {\n     return NextResponse.json({ valid: true });\n   } else {\n-    return NextResponse.json({ error: \"Invalid hash\" }, { status: 401 });\n+    return NextResponse.json(\n+      { error: \"Invalid hash\", valid: false },\n+      { status: 401 }\n+    );\n   }\n }\n"
                },
                {
                    "date": 1725053464792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,36 @@\n-import { NextRequest, NextResponse } from \"next/server\";\n+// src/app/api/auth/telegram/route.ts\n+\n+import { NextResponse } from \"next/server\";\n import crypto from \"crypto\";\n \n-const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;\n+const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN; // Ensure you have this set in your environment variables\n \n-export async function POST(request: NextRequest) {\n-  const { hash } = await request.json();\n+export async function POST(request: Request) {\n+  const { data, hash } = await request.json();\n \n-  console.log(\"Received hash:\", hash);\n-  console.log(\"BOT_TOKEN:\", BOT_TOKEN ? \"Set\" : \"Not set\");\n-\n-  if (!hash) {\n-    return NextResponse.json(\n-      { error: \"Hash is required\", valid: false },\n-      { status: 400 }\n-    );\n-  }\n-\n-  const dataCheckString = hash\n-    .split(\"&\")\n-    .filter((param: string) => !param.startsWith(\"hash=\"))\n+  // Sort and concatenate data key-value pairs\n+  const dataCheckString = Object.keys(data)\n+    .filter((key) => key !== \"hash\" && data[key] !== undefined)\n     .sort()\n+    .map((key) => `${key}=${data[key]}`)\n     .join(\"\\n\");\n \n-  console.log(\"Data check string:\", dataCheckString);\n+  // Create a SHA-256 hash of the bot token to derive a secret key\n+  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN!).digest();\n \n-  const secretKey = crypto\n-    .createHash(\"sha256\")\n-    .update(BOT_TOKEN || \"\")\n-    .digest();\n-  const calculatedHash = crypto\n+  // Compute HMAC using the secret key and the check string\n+  const hmac = crypto\n     .createHmac(\"sha256\", secretKey)\n     .update(dataCheckString)\n     .digest(\"hex\");\n \n-  console.log(\"Calculated hash:\", calculatedHash);\n-\n-  const receivedHash = hash\n-    .split(\"&\")\n-    .find((param: string) => param.startsWith(\"hash=\"))\n-    ?.split(\"=\")[1];\n-\n-  console.log(\"Received hash:\", receivedHash);\n-\n-  if (calculatedHash === receivedHash) {\n-    return NextResponse.json({ valid: true });\n+  // Compare computed HMAC with Telegram's hash\n+  if (hmac === hash) {\n+    return NextResponse.json({ success: true, token: \"YOUR_GENERATED_TOKEN\" });\n   } else {\n     return NextResponse.json(\n-      { error: \"Invalid hash\", valid: false },\n+      { success: false, error: \"Invalid data\" },\n       { status: 401 }\n     );\n   }\n }\n"
                }
            ],
            "date": 1725048572448,
            "name": "Commit-0",
            "content": "import { NextRequest, NextResponse } from \"next/server\";\nimport crypto from \"crypto\";\n\nconst BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;\n\nexport async function POST(request: NextRequest) {\n  const { hash } = await request.json();\n\n  if (!hash) {\n    return NextResponse.json({ error: \"Hash is required\" }, { status: 400 });\n  }\n\n  const dataCheckString = hash\n    .split(\"&\")\n    .filter((param) => !param.startsWith(\"hash=\"))\n    .sort()\n    .join(\"\\n\");\n\n  const secretKey = crypto\n    .createHash(\"sha256\")\n    .update(BOT_TOKEN || \"\")\n    .digest();\n  const calculatedHash = crypto\n    .createHmac(\"sha256\", secretKey)\n    .update(dataCheckString)\n    .digest(\"hex\");\n\n  const receivedHash = hash\n    .split(\"&\")\n    .find((param) => param.startsWith(\"hash=\"))\n    ?.split(\"=\")[1];\n\n  if (calculatedHash === receivedHash) {\n    return NextResponse.json({ valid: true });\n  } else {\n    return NextResponse.json({ error: \"Invalid hash\" }, { status: 401 });\n  }\n}\n"
        }
    ]
}