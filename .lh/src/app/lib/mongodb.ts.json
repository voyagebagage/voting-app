{
    "sourceFile": "src/app/lib/mongodb.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1724758052817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724761026891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,21 +7,26 @@\n     \"Please define the MONGODB_URI environment variable inside .env.local\"\n   );\n }\n \n-let cached = global.mongoose;\n+interface Cached {\n+  conn: typeof mongoose | null;\n+  promise: Promise<typeof mongoose> | null;\n+}\n \n+let cached: Cached = (global as any).mongoose;\n+\n if (!cached) {\n-  cached = global.mongoose = { conn: null, promise: null };\n+  cached = (global as any).mongoose = { conn: null, promise: null };\n }\n \n-async function dbConnect() {\n+async function dbConnect(): Promise<typeof mongoose> {\n   if (cached.conn) {\n     return cached.conn;\n   }\n \n   if (!cached.promise) {\n-    const opts = {\n+    const opts: mongoose.ConnectOptions = {\n       bufferCommands: false,\n     };\n \n     cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\n"
                }
            ],
            "date": 1724758052817,
            "name": "Commit-0",
            "content": "import mongoose from \"mongoose\";\n\nconst MONGODB_URI = process.env.MONGODB_URI as string;\n\nif (!MONGODB_URI) {\n  throw new Error(\n    \"Please define the MONGODB_URI environment variable inside .env.local\"\n  );\n}\n\nlet cached = global.mongoose;\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null };\n}\n\nasync function dbConnect() {\n  if (cached.conn) {\n    return cached.conn;\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: false,\n    };\n\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\n      return mongoose;\n    });\n  }\n\n  try {\n    cached.conn = await cached.promise;\n  } catch (e) {\n    cached.promise = null;\n    throw e;\n  }\n\n  return cached.conn;\n}\n\nexport default dbConnect;\n"
        }
    ]
}