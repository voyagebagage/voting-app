{
    "sourceFile": "src/app/lib/auth.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 59,
            "patches": [
                {
                    "date": 1724756387464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724756808588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { verifyTelegramLoginData } from \"telegram-login-button\";\n+import verifyTelegramLoginData from \"telegram-login-button\";\n \n const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n \n interface TelegramAuthData {\n"
                },
                {
                    "date": 1724757011522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import verifyTelegramLoginData from \"telegram-login-button\";\n+import { verifyTelegramLoginData } from \"telegram-login-button\";\n \n const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n \n interface TelegramAuthData {\n"
                },
                {
                    "date": 1724757028111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { verifyTelegramLoginData } from \"telegram-login-button\";\n+import verifyTelegramLoginData from \"telegram-login-button\";\n \n const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n \n interface TelegramAuthData {\n@@ -9,8 +9,9 @@\n   username?: string;\n   photo_url?: string;\n   auth_date: number;\n   hash: string;\n+  botName: string;\n }\n \n export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n   return verifyTelegramLoginData(authData, BOT_TOKEN);\n"
                },
                {
                    "date": 1724757121742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import { ReactNode } from \"react\";\n import verifyTelegramLoginData from \"telegram-login-button\";\n \n const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n \n@@ -12,7 +13,8 @@\n   hash: string;\n   botName: string;\n }\n \n-export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n-  return verifyTelegramLoginData(authData, BOT_TOKEN);\n+export function verifyTelegramAuth(authData: TelegramAuthData): ReactNode {\n+  const result = verifyTelegramLoginData(authData, BOT_TOKEN);\n+  return result !== undefined ? result : false;\n }\n"
                },
                {
                    "date": 1724757221855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-import { ReactNode } from \"react\";\n import verifyTelegramLoginData from \"telegram-login-button\";\n \n const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n \n@@ -10,11 +9,15 @@\n   username?: string;\n   photo_url?: string;\n   auth_date: number;\n   hash: string;\n-  botName: string;\n }\n \n-export function verifyTelegramAuth(authData: TelegramAuthData): ReactNode {\n-  const result = verifyTelegramLoginData(authData, BOT_TOKEN);\n-  return result !== undefined ? result : false;\n+export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n+  try {\n+    const result = verifyTelegramLoginData(authData, BOT_TOKEN);\n+    return result === true;\n+  } catch (error) {\n+    console.error(\"Error verifying Telegram login data:\", error);\n+    return false;\n+  }\n }\n"
                },
                {
                    "date": 1724757340456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import verifyTelegramLoginData from \"telegram-login-button\";\n \n const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n+const BOT_NAME = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME as string;\n \n interface TelegramAuthData {\n   id: number;\n   first_name: string;\n@@ -13,9 +14,10 @@\n }\n \n export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n   try {\n-    const result = verifyTelegramLoginData(authData, BOT_TOKEN);\n+    const dataWithBotName = { ...authData, botName: BOT_NAME };\n+    const result = verifyTelegramLoginData(dataWithBotName, BOT_TOKEN);\n     return result === true;\n   } catch (error) {\n     console.error(\"Error verifying Telegram login data:\", error);\n     return false;\n"
                },
                {
                    "date": 1724767513034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,19 @@\n import verifyTelegramLoginData from \"telegram-login-button\";\n \n-const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n-const BOT_NAME = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME as string;\n+const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;\n+const BOT_NAME = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME;\n \n+if (!BOT_TOKEN) {\n+  throw new Error(\"TELEGRAM_BOT_TOKEN is not set in environment variables\");\n+}\n+\n+if (!BOT_NAME) {\n+  throw new Error(\n+    \"NEXT_PUBLIC_TELEGRAM_BOT_NAME is not set in environment variables\"\n+  );\n+}\n+\n interface TelegramAuthData {\n   id: number;\n   first_name: string;\n   last_name?: string;\n"
                },
                {
                    "date": 1724767557760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,17 +2,15 @@\n \n const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;\n const BOT_NAME = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME;\n \n-if (!BOT_TOKEN) {\n-  throw new Error(\"TELEGRAM_BOT_TOKEN is not set in environment variables\");\n-}\n+// if (!BOT_TOKEN) {\n+//   throw new Error(\"TELEGRAM_BOT_TOKEN is not set in environment variables\");\n+// }\n \n-if (!BOT_NAME) {\n-  throw new Error(\n-    \"NEXT_PUBLIC_TELEGRAM_BOT_NAME is not set in environment variables\"\n-  );\n-}\n+// if (!BOT_NAME) {\n+//   throw new Error(\"NEXT_PUBLIC_TELEGRAM_BOT_NAME is not set in environment variables\");\n+// }\n \n interface TelegramAuthData {\n   id: number;\n   first_name: string;\n"
                },
                {
                    "date": 1724767586324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import verifyTelegramLoginData from \"telegram-login-button\";\n+\n+const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n+const BOT_NAME = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME as string;\n+\n+if (!BOT_TOKEN) {\n+  throw new Error(\"TELEGRAM_BOT_TOKEN is not set in environment variables\");\n+}\n+\n+if (!BOT_NAME) {\n+  throw new Error(\n+    \"NEXT_PUBLIC_TELEGRAM_BOT_NAME is not set in environment variables\"\n+  );\n+}\n+\n+interface TelegramAuthData {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n+  try {\n+    const dataWithBotName = { ...authData, botName: BOT_NAME };\n+    const result = verifyTelegramLoginData(dataWithBotName, BOT_TOKEN);\n+    return result === true;\n+  } catch (error) {\n+    console.error(\"Error verifying Telegram login data:\", error);\n+    return false;\n+  }\n+}\n"
                },
                {
                    "date": 1724783576590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,8 @@\n-import verifyTelegramLoginData from \"telegram-login-button\";\n+import crypto from \"crypto\";\n \n const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n-const BOT_NAME = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME as string;\n \n-if (!BOT_TOKEN) {\n-  throw new Error(\"TELEGRAM_BOT_TOKEN is not set in environment variables\");\n-}\n-\n-if (!BOT_NAME) {\n-  throw new Error(\n-    \"NEXT_PUBLIC_TELEGRAM_BOT_NAME is not set in environment variables\"\n-  );\n-}\n-\n interface TelegramAuthData {\n   id: number;\n   first_name: string;\n   last_name?: string;\n@@ -23,46 +12,51 @@\n   hash: string;\n }\n \n export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n-  try {\n-    const dataWithBotName = { ...authData, botName: BOT_NAME };\n-    const result = verifyTelegramLoginData(dataWithBotName, BOT_TOKEN);\n-    return result === true;\n-  } catch (error) {\n-    console.error(\"Error verifying Telegram login data:\", error);\n-    return false;\n-  }\n+  const { hash, ...data } = authData;\n+  const dataCheckString = Object.keys(data)\n+    .sort()\n+    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n+    .join(\"\\n\");\n+  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n+  const hmac = crypto\n+    .createHmac(\"sha256\", secretKey)\n+    .update(dataCheckString)\n+    .digest(\"hex\");\n+  return hmac === hash;\n }\n-import verifyTelegramLoginData from \"telegram-login-button\";\n+// import verifyTelegramLoginData from \"telegram-login-button\";\n \n-const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;\n-const BOT_NAME = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME;\n+// const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n+// const BOT_NAME = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME as string;\n \n // if (!BOT_TOKEN) {\n //   throw new Error(\"TELEGRAM_BOT_TOKEN is not set in environment variables\");\n // }\n \n // if (!BOT_NAME) {\n-//   throw new Error(\"NEXT_PUBLIC_TELEGRAM_BOT_NAME is not set in environment variables\");\n+//   throw new Error(\n+//     \"NEXT_PUBLIC_TELEGRAM_BOT_NAME is not set in environment variables\"\n+//   );\n // }\n \n-interface TelegramAuthData {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n+// interface TelegramAuthData {\n+//   id: number;\n+//   first_name: string;\n+//   last_name?: string;\n+//   username?: string;\n+//   photo_url?: string;\n+//   auth_date: number;\n+//   hash: string;\n+// }\n \n-export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n-  try {\n-    const dataWithBotName = { ...authData, botName: BOT_NAME };\n-    const result = verifyTelegramLoginData(dataWithBotName, BOT_TOKEN);\n-    return result === true;\n-  } catch (error) {\n-    console.error(\"Error verifying Telegram login data:\", error);\n-    return false;\n-  }\n-}\n+// export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n+//   try {\n+//     const dataWithBotName = { ...authData, botName: BOT_NAME };\n+//     const result = verifyTelegramLoginData(dataWithBotName, BOT_TOKEN);\n+//     return result === true;\n+//   } catch (error) {\n+//     console.error(\"Error verifying Telegram login data:\", error);\n+//     return false;\n+//   }\n+// }\n"
                },
                {
                    "date": 1724844083972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,42 @@\n import crypto from \"crypto\";\n+import jwt from \"jsonwebtoken\"; // You'll need to install this package: npm install jsonwebtoken @types/jsonwebtoken\n \n const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n+const JWT_SECRET = process.env.JWT_SECRET as string;\n \n-interface TelegramAuthData {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n+// ... (keep your existing TelegramAuthData interface and verifyTelegramAuth function)\n+\n+export function generateToken(userId: string): string {\n+  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"1d\" });\n }\n+// import crypto from \"crypto\";\n \n-export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n-  const { hash, ...data } = authData;\n-  const dataCheckString = Object.keys(data)\n-    .sort()\n-    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n-    .join(\"\\n\");\n-  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n-  const hmac = crypto\n-    .createHmac(\"sha256\", secretKey)\n-    .update(dataCheckString)\n-    .digest(\"hex\");\n-  return hmac === hash;\n-}\n+// const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n+\n+// interface TelegramAuthData {\n+//   id: number;\n+//   first_name: string;\n+//   last_name?: string;\n+//   username?: string;\n+//   photo_url?: string;\n+//   auth_date: number;\n+//   hash: string;\n+// }\n+\n+// export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n+//   const { hash, ...data } = authData;\n+//   const dataCheckString = Object.keys(data)\n+//     .sort()\n+//     .map((key) => `${key}=${data[key as keyof typeof data]}`)\n+//     .join(\"\\n\");\n+//   const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n+//   const hmac = crypto\n+//     .createHmac(\"sha256\", secretKey)\n+//     .update(dataCheckString)\n+//     .digest(\"hex\");\n+//   return hmac === hash;\n+// }\n // import verifyTelegramLoginData from \"telegram-login-button\";\n \n // const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n // const BOT_NAME = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME as string;\n"
                },
                {
                    "date": 1724844174300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,35 +8,31 @@\n \n export function generateToken(userId: string): string {\n   return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"1d\" });\n }\n-// import crypto from \"crypto\";\n+interface TelegramAuthData {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n \n-// const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n-\n-// interface TelegramAuthData {\n-//   id: number;\n-//   first_name: string;\n-//   last_name?: string;\n-//   username?: string;\n-//   photo_url?: string;\n-//   auth_date: number;\n-//   hash: string;\n-// }\n-\n-// export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n-//   const { hash, ...data } = authData;\n-//   const dataCheckString = Object.keys(data)\n-//     .sort()\n-//     .map((key) => `${key}=${data[key as keyof typeof data]}`)\n-//     .join(\"\\n\");\n-//   const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n-//   const hmac = crypto\n-//     .createHmac(\"sha256\", secretKey)\n-//     .update(dataCheckString)\n-//     .digest(\"hex\");\n-//   return hmac === hash;\n-// }\n+export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n+  const { hash, ...data } = authData;\n+  const dataCheckString = Object.keys(data)\n+    .sort()\n+    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n+    .join(\"\\n\");\n+  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n+  const hmac = crypto\n+    .createHmac(\"sha256\", secretKey)\n+    .update(dataCheckString)\n+    .digest(\"hex\");\n+  return hmac === hash;\n+}\n // import verifyTelegramLoginData from \"telegram-login-button\";\n \n // const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n // const BOT_NAME = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME as string;\n"
                },
                {
                    "date": 1724844200783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,8 @@\n import crypto from \"crypto\";\n-import jwt from \"jsonwebtoken\"; // You'll need to install this package: npm install jsonwebtoken @types/jsonwebtoken\n \n const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n-const JWT_SECRET = process.env.JWT_SECRET as string;\n \n-// ... (keep your existing TelegramAuthData interface and verifyTelegramAuth function)\n-\n-export function generateToken(userId: string): string {\n-  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"1d\" });\n-}\n interface TelegramAuthData {\n   id: number;\n   first_name: string;\n   last_name?: string;\n"
                },
                {
                    "date": 1724926833019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,29 @@\n-import crypto from \"crypto\";\n+import jwt from \"jsonwebtoken\";\n \n-const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n+const JWT_SECRET = process.env.JWT_SECRET as string;\n \n-interface TelegramAuthData {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n+export function verifyToken(token: string): { userId: string } | null {\n+  try {\n+    return jwt.verify(token, JWT_SECRET) as { userId: string };\n+  } catch (error) {\n+    return null;\n+  }\n }\n \n-export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n-  const { hash, ...data } = authData;\n-  const dataCheckString = Object.keys(data)\n-    .sort()\n-    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n-    .join(\"\\n\");\n-  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n-  const hmac = crypto\n-    .createHmac(\"sha256\", secretKey)\n-    .update(dataCheckString)\n-    .digest(\"hex\");\n-  return hmac === hash;\n+export function generateToken(userId: string): string {\n+  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"1d\" });\n }\n+\n+export async function verifyTokenAndGetUser(token: string) {\n+  const response = await fetch(\"/api/auth/verify\", {\n+    headers: { Authorization: `Bearer ${token}` },\n+  });\n+  if (response.ok) {\n+    return response.json();\n+  }\n+  throw new Error(\"Invalid token\");\n+}\n // import verifyTelegramLoginData from \"telegram-login-button\";\n \n // const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n // const BOT_NAME = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME as string;\n"
                },
                {
                    "date": 1724927163875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,20 @@\n import jwt from \"jsonwebtoken\";\n+import crypto from \"crypto\";\n \n const JWT_SECRET = process.env.JWT_SECRET as string;\n+const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n \n+interface TelegramAuthData {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n export function verifyToken(token: string): { userId: string } | null {\n   try {\n     return jwt.verify(token, JWT_SECRET) as { userId: string };\n   } catch (error) {\n@@ -13,8 +25,24 @@\n export function generateToken(userId: string): string {\n   return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"1d\" });\n }\n \n+export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n+  const { hash, ...data } = authData;\n+  const dataCheckString = Object.keys(data)\n+    .sort()\n+    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n+    .join(\"\\n\");\n+\n+  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n+  const hmac = crypto\n+    .createHmac(\"sha256\", secretKey)\n+    .update(dataCheckString)\n+    .digest(\"hex\");\n+\n+  return hmac === hash;\n+}\n+\n export async function verifyTokenAndGetUser(token: string) {\n   const response = await fetch(\"/api/auth/verify\", {\n     headers: { Authorization: `Bearer ${token}` },\n   });\n"
                },
                {
                    "date": 1724928062356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,10 @@\n+import crypto from \"crypto\";\n import jwt from \"jsonwebtoken\";\n-import crypto from \"crypto\";\n \n const JWT_SECRET = process.env.JWT_SECRET as string;\n const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n \n-interface TelegramAuthData {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n export function verifyToken(token: string): { userId: string } | null {\n   try {\n     return jwt.verify(token, JWT_SECRET) as { userId: string };\n   } catch (error) {\n@@ -25,64 +15,27 @@\n export function generateToken(userId: string): string {\n   return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"1d\" });\n }\n \n-export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n+export async function verifyTokenAndGetUser(token: string) {\n+  const response = await fetch(\"/api/auth/verify\", {\n+    headers: { Authorization: `Bearer ${token}` },\n+  });\n+  if (response.ok) {\n+    return response.json();\n+  }\n+  throw new Error(\"Invalid token\");\n+}\n+\n+export function verifyTelegramAuth(authData: any): boolean {\n   const { hash, ...data } = authData;\n   const dataCheckString = Object.keys(data)\n     .sort()\n-    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n+    .map((key) => `${key}=${data[key]}`)\n     .join(\"\\n\");\n-\n   const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n   const hmac = crypto\n     .createHmac(\"sha256\", secretKey)\n     .update(dataCheckString)\n     .digest(\"hex\");\n-\n   return hmac === hash;\n }\n-\n-export async function verifyTokenAndGetUser(token: string) {\n-  const response = await fetch(\"/api/auth/verify\", {\n-    headers: { Authorization: `Bearer ${token}` },\n-  });\n-  if (response.ok) {\n-    return response.json();\n-  }\n-  throw new Error(\"Invalid token\");\n-}\n-// import verifyTelegramLoginData from \"telegram-login-button\";\n-\n-// const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n-// const BOT_NAME = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME as string;\n-\n-// if (!BOT_TOKEN) {\n-//   throw new Error(\"TELEGRAM_BOT_TOKEN is not set in environment variables\");\n-// }\n-\n-// if (!BOT_NAME) {\n-//   throw new Error(\n-//     \"NEXT_PUBLIC_TELEGRAM_BOT_NAME is not set in environment variables\"\n-//   );\n-// }\n-\n-// interface TelegramAuthData {\n-//   id: number;\n-//   first_name: string;\n-//   last_name?: string;\n-//   username?: string;\n-//   photo_url?: string;\n-//   auth_date: number;\n-//   hash: string;\n-// }\n-\n-// export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n-//   try {\n-//     const dataWithBotName = { ...authData, botName: BOT_NAME };\n-//     const result = verifyTelegramLoginData(dataWithBotName, BOT_TOKEN);\n-//     return result === true;\n-//   } catch (error) {\n-//     console.error(\"Error verifying Telegram login data:\", error);\n-//     return false;\n-//   }\n-// }\n"
                },
                {
                    "date": 1724931194826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,18 @@\n \n const JWT_SECRET = process.env.JWT_SECRET as string;\n const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n \n+export interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n export function verifyToken(token: string): { userId: string } | null {\n   try {\n     return jwt.verify(token, JWT_SECRET) as { userId: string };\n   } catch (error) {\n@@ -15,23 +25,30 @@\n export function generateToken(userId: string): string {\n   return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"1d\" });\n }\n \n-export async function verifyTokenAndGetUser(token: string) {\n-  const response = await fetch(\"/api/auth/verify\", {\n-    headers: { Authorization: `Bearer ${token}` },\n-  });\n-  if (response.ok) {\n-    return response.json();\n+export async function verifyTokenAndGetUser(\n+  token: string\n+): Promise<TelegramUser | null> {\n+  try {\n+    const response = await fetch(\"/api/auth/verify\", {\n+      headers: { Authorization: `Bearer ${token}` },\n+    });\n+    if (response.ok) {\n+      return response.json();\n+    }\n+    return null;\n+  } catch (error) {\n+    console.error(\"Error verifying token:\", error);\n+    return null;\n   }\n-  throw new Error(\"Invalid token\");\n }\n \n-export function verifyTelegramAuth(authData: any): boolean {\n+export function verifyTelegramAuth(authData: TelegramUser): boolean {\n   const { hash, ...data } = authData;\n   const dataCheckString = Object.keys(data)\n     .sort()\n-    .map((key) => `${key}=${data[key]}`)\n+    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n     .join(\"\\n\");\n   const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n   const hmac = crypto\n     .createHmac(\"sha256\", secretKey)\n"
                },
                {
                    "date": 1725031390947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n   id: number;\n   first_name: string;\n   last_name?: string;\n   username?: string;\n+  language_code?: string;\n   photo_url?: string;\n   auth_date: number;\n   hash: string;\n }\n"
                },
                {
                    "date": 1725032374014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,11 +49,16 @@\n   const dataCheckString = Object.keys(data)\n     .sort()\n     .map((key) => `${key}=${data[key as keyof typeof data]}`)\n     .join(\"\\n\");\n-  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n+\n+  const secretKey = crypto\n+    .createHash(\"sha256\")\n+    .update(BOT_TOKEN || \"\")\n+    .digest();\n   const hmac = crypto\n     .createHmac(\"sha256\", secretKey)\n     .update(dataCheckString)\n     .digest(\"hex\");\n+\n   return hmac === hash;\n }\n"
                },
                {
                    "date": 1725032944167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,10 @@\n }\n \n export function verifyTelegramAuth(authData: TelegramUser): boolean {\n   const { hash, ...data } = authData;\n+  console.log(\"Data:\", data, \"Hash:\", hash);\n+\n   const dataCheckString = Object.keys(data)\n     .sort()\n     .map((key) => `${key}=${data[key as keyof typeof data]}`)\n     .join(\"\\n\");\n"
                },
                {
                    "date": 1725034663309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n export function verifyToken(token: string): { userId: string } | null {\n   try {\n     return jwt.verify(token, JWT_SECRET) as { userId: string };\n   } catch (error) {\n+    console.error(\"Error verifying JWT:\", error);\n     return null;\n   }\n }\n \n@@ -44,23 +45,31 @@\n   }\n }\n \n export function verifyTelegramAuth(authData: TelegramUser): boolean {\n+  console.log(\"Verifying Telegram auth data:\", authData);\n+\n   const { hash, ...data } = authData;\n-  console.log(\"Data:\", data, \"Hash:\", hash);\n \n   const dataCheckString = Object.keys(data)\n     .sort()\n     .map((key) => `${key}=${data[key as keyof typeof data]}`)\n     .join(\"\\n\");\n \n-  const secretKey = crypto\n-    .createHash(\"sha256\")\n-    .update(BOT_TOKEN || \"\")\n-    .digest();\n+  console.log(\"Data check string:\", dataCheckString);\n+\n+  if (!BOT_TOKEN) {\n+    console.error(\"BOT_TOKEN is not set\");\n+    return false;\n+  }\n+\n+  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n   const hmac = crypto\n     .createHmac(\"sha256\", secretKey)\n     .update(dataCheckString)\n     .digest(\"hex\");\n \n+  console.log(\"Generated HMAC:\", hmac);\n+  console.log(\"Received hash:\", hash);\n+\n   return hmac === hash;\n }\n"
                },
                {
                    "date": 1725036036670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n   const { hash, ...data } = authData;\n \n   const dataCheckString = Object.keys(data)\n     .sort()\n+    .filter((key) => data[key as keyof typeof data] !== undefined)\n     .map((key) => `${key}=${data[key as keyof typeof data]}`)\n     .join(\"\\n\");\n \n   console.log(\"Data check string:\", dataCheckString);\n"
                },
                {
                    "date": 1725038943766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+import crypto from \"crypto\";\n+import jwt from \"jsonwebtoken\";\n+\n+const JWT_SECRET = process.env.JWT_SECRET as string;\n+const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n+\n+export interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  language_code?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+export function verifyToken(token: string): { userId: string } | null {\n+  try {\n+    return jwt.verify(token, JWT_SECRET) as { userId: string };\n+  } catch (error) {\n+    console.error(\"Error verifying JWT:\", error);\n+    return null;\n+  }\n+}\n+\n+export function generateToken(userId: string): string {\n+  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"1d\" });\n+}\n+\n+export async function verifyTokenAndGetUser(\n+  token: string\n+): Promise<TelegramUser | null> {\n+  try {\n+    const response = await fetch(\"/api/auth/verify\", {\n+      headers: { Authorization: `Bearer ${token}` },\n+    });\n+    if (response.ok) {\n+      return response.json();\n+    }\n+    return null;\n+  } catch (error) {\n+    console.error(\"Error verifying token:\", error);\n+    return null;\n+  }\n+}\n+\n+export function verifyTelegramAuth(authData: TelegramUser): boolean {\n+  console.log(\"Verifying Telegram auth data:\", authData);\n+\n+  const { hash, ...data } = authData;\n+\n+  const dataCheckString = Object.keys(data)\n+    .sort()\n+    .filter((k) => data[k] !== undefined)\n+    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n+    .join(\"\\n\");\n+\n+  console.log(\"Data check string:\", dataCheckString);\n+\n+  if (!BOT_TOKEN) {\n+    console.error(\"BOT_TOKEN is not set\");\n+    return false;\n+  }\n+\n+  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n+  const hmac = crypto\n+    .createHmac(\"sha256\", secretKey)\n+    .update(dataCheckString)\n+    .digest(\"hex\");\n+\n+  console.log(\"Generated HMAC:\", hmac);\n+  console.log(\"Received hash:\", hash);\n+\n+  return hmac === hash;\n+}\n"
                },
                {
                    "date": 1725038973371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \n   const dataCheckString = Object.keys(data)\n     .sort()\n     .filter((k) => data[k] !== undefined)\n-    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n+    .map((k) => `${k}=${data[k]}`)\n     .join(\"\\n\");\n \n   console.log(\"Data check string:\", dataCheckString);\n \n@@ -73,80 +73,4 @@\n   console.log(\"Received hash:\", hash);\n \n   return hmac === hash;\n }\n-import crypto from \"crypto\";\n-import jwt from \"jsonwebtoken\";\n-\n-const JWT_SECRET = process.env.JWT_SECRET as string;\n-const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n-\n-export interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  language_code?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n-export function verifyToken(token: string): { userId: string } | null {\n-  try {\n-    return jwt.verify(token, JWT_SECRET) as { userId: string };\n-  } catch (error) {\n-    console.error(\"Error verifying JWT:\", error);\n-    return null;\n-  }\n-}\n-\n-export function generateToken(userId: string): string {\n-  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"1d\" });\n-}\n-\n-export async function verifyTokenAndGetUser(\n-  token: string\n-): Promise<TelegramUser | null> {\n-  try {\n-    const response = await fetch(\"/api/auth/verify\", {\n-      headers: { Authorization: `Bearer ${token}` },\n-    });\n-    if (response.ok) {\n-      return response.json();\n-    }\n-    return null;\n-  } catch (error) {\n-    console.error(\"Error verifying token:\", error);\n-    return null;\n-  }\n-}\n-\n-export function verifyTelegramAuth(authData: TelegramUser): boolean {\n-  console.log(\"Verifying Telegram auth data:\", authData);\n-\n-  const { hash, ...data } = authData;\n-\n-  const dataCheckString = Object.keys(data)\n-    .sort()\n-    .filter((key) => data[key as keyof typeof data] !== undefined)\n-    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n-    .join(\"\\n\");\n-\n-  console.log(\"Data check string:\", dataCheckString);\n-\n-  if (!BOT_TOKEN) {\n-    console.error(\"BOT_TOKEN is not set\");\n-    return false;\n-  }\n-\n-  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n-  const hmac = crypto\n-    .createHmac(\"sha256\", secretKey)\n-    .update(dataCheckString)\n-    .digest(\"hex\");\n-\n-  console.log(\"Generated HMAC:\", hmac);\n-  console.log(\"Received hash:\", hash);\n-\n-  return hmac === hash;\n-}\n"
                },
                {
                    "date": 1725039396450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,10 @@\n   const { hash, ...data } = authData;\n \n   const dataCheckString = Object.keys(data)\n     .sort()\n-    .filter((k) => data[k] !== undefined)\n-    .map((k) => `${k}=${data[k]}`)\n+    .filter((key) => data[key as keyof typeof data] !== undefined)\n+    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n     .join(\"\\n\");\n \n   console.log(\"Data check string:\", dataCheckString);\n \n"
                },
                {
                    "date": 1725039791785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,32 +45,24 @@\n   }\n }\n \n export function verifyTelegramAuth(authData: TelegramUser): boolean {\n-  console.log(\"Verifying Telegram auth data:\", authData);\n-\n   const { hash, ...data } = authData;\n \n-  const dataCheckString = Object.keys(data)\n+  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n+\n+  const checkString = Object.keys(data)\n     .sort()\n-    .filter((key) => data[key as keyof typeof data] !== undefined)\n-    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n+    .map((k) => `${k}=${data[k as keyof typeof data]}`)\n     .join(\"\\n\");\n \n-  console.log(\"Data check string:\", dataCheckString);\n-\n-  if (!BOT_TOKEN) {\n-    console.error(\"BOT_TOKEN is not set\");\n-    return false;\n-  }\n-\n-  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n   const hmac = crypto\n     .createHmac(\"sha256\", secretKey)\n-    .update(dataCheckString)\n+    .update(checkString)\n     .digest(\"hex\");\n \n+  console.log(\"Check String:\", checkString);\n   console.log(\"Generated HMAC:\", hmac);\n-  console.log(\"Received hash:\", hash);\n+  console.log(\"Received Hash:\", hash);\n \n   return hmac === hash;\n }\n"
                },
                {
                    "date": 1725040836254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,9 @@\n export function verifyTelegramAuth(authData: TelegramUser): boolean {\n   const { hash, ...data } = authData;\n \n   const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n+  console.log(\"Secret Key:\", secretKey);\n \n   const checkString = Object.keys(data)\n     .sort()\n     .map((k) => `${k}=${data[k as keyof typeof data]}`)\n"
                },
                {
                    "date": 1725040847360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,10 @@\n     .sort()\n     .map((k) => `${k}=${data[k as keyof typeof data]}`)\n     .join(\"\\n\");\n \n+  console.log(\"Check String:\", checkString);\n+\n   const hmac = crypto\n     .createHmac(\"sha256\", secretKey)\n     .update(checkString)\n     .digest(\"hex\");\n"
                },
                {
                    "date": 1725040911095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     .createHmac(\"sha256\", secretKey)\n     .update(checkString)\n     .digest(\"hex\");\n \n-  console.log(\"Check String:\", checkString);\n+  console.log(\"0000000Check String:\", checkString);\n   console.log(\"Generated HMAC:\", hmac);\n   console.log(\"Received Hash:\", hash);\n \n   return hmac === hash;\n"
                },
                {
                    "date": 1725040999530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,23 +48,20 @@\n export function verifyTelegramAuth(authData: TelegramUser): boolean {\n   const { hash, ...data } = authData;\n \n   const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n-  console.log(\"Secret Key:\", secretKey);\n \n   const checkString = Object.keys(data)\n     .sort()\n     .map((k) => `${k}=${data[k as keyof typeof data]}`)\n     .join(\"\\n\");\n \n-  console.log(\"Check String:\", checkString);\n-\n   const hmac = crypto\n     .createHmac(\"sha256\", secretKey)\n     .update(checkString)\n     .digest(\"hex\");\n \n-  console.log(\"0000000Check String:\", checkString);\n+  console.log(\"Check String:\", checkString);\n   console.log(\"Generated HMAC:\", hmac);\n   console.log(\"Received Hash:\", hash);\n \n   return hmac === hash;\n"
                },
                {
                    "date": 1725041110682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,24 +45,41 @@\n   }\n }\n \n export function verifyTelegramAuth(authData: TelegramUser): boolean {\n+  console.log(\"Auth data received:\", authData);\n+\n+  if (!authData.hash) {\n+    console.error(\"No hash provided in auth data\");\n+    return false;\n+  }\n+\n   const { hash, ...data } = authData;\n \n-  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n-\n   const checkString = Object.keys(data)\n+    .filter((key) => data[key as keyof typeof data] !== undefined)\n     .sort()\n-    .map((k) => `${k}=${data[k as keyof typeof data]}`)\n+    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n     .join(\"\\n\");\n \n+  console.log(\"Check string:\", checkString);\n+\n+  if (!BOT_TOKEN) {\n+    console.error(\"BOT_TOKEN is not set\");\n+    return false;\n+  }\n+\n+  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n   const hmac = crypto\n     .createHmac(\"sha256\", secretKey)\n     .update(checkString)\n     .digest(\"hex\");\n \n-  console.log(\"Check String:\", checkString);\n+  console.log(\n+    \"Secret key (first 10 chars):\",\n+    secretKey.toString(\"hex\").substring(0, 10)\n+  );\n   console.log(\"Generated HMAC:\", hmac);\n-  console.log(\"Received Hash:\", hash);\n+  console.log(\"Received hash:\", hash);\n \n   return hmac === hash;\n }\n"
                },
                {
                    "date": 1725042636316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     return false;\n   }\n \n   const { hash, ...data } = authData;\n-\n+  console.log(\"Data keys sorted:\", Object.keys(data).sort());\n   const checkString = Object.keys(data)\n     .filter((key) => data[key as keyof typeof data] !== undefined)\n     .sort()\n     .map((key) => `${key}=${data[key as keyof typeof data]}`)\n@@ -68,8 +68,10 @@\n     return false;\n   }\n \n   const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n+  console.log(\"Secret Key:\", secretKey.toString(\"hex\"));\n+\n   const hmac = crypto\n     .createHmac(\"sha256\", secretKey)\n     .update(checkString)\n     .digest(\"hex\");\n"
                },
                {
                    "date": 1725043242453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,12 +55,10 @@\n \n   const { hash, ...data } = authData;\n   console.log(\"Data keys sorted:\", Object.keys(data).sort());\n   const checkString = Object.keys(data)\n-    .filter((key) => data[key as keyof typeof data] !== undefined)\n-    .sort()\n-    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n-    .join(\"\\n\");\n+    .filter((key) => key !== \"hash\" && initData[key] !== undefined)\n+    .sort();\n \n   console.log(\"Check string:\", checkString);\n \n   if (!BOT_TOKEN) {\n"
                },
                {
                    "date": 1725043257470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \n   const { hash, ...data } = authData;\n   console.log(\"Data keys sorted:\", Object.keys(data).sort());\n   const checkString = Object.keys(data)\n-    .filter((key) => key !== \"hash\" && initData[key] !== undefined)\n+    .filter((key) => key !== \"hash\" && data[key] !== undefined)\n     .sort();\n \n   console.log(\"Check string:\", checkString);\n \n"
                },
                {
                    "date": 1725043279033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,12 +54,14 @@\n   }\n \n   const { hash, ...data } = authData;\n   console.log(\"Data keys sorted:\", Object.keys(data).sort());\n-  const checkString = Object.keys(data)\n+  const dataKeys = Object.keys(data)\n     .filter((key) => key !== \"hash\" && data[key] !== undefined)\n     .sort();\n-\n+  const dataCheckString = dataKeys\n+    .map((key) => `${key}=${initData[key]}`)\n+    .join(\"\\n\");\n   console.log(\"Check string:\", checkString);\n \n   if (!BOT_TOKEN) {\n     console.error(\"BOT_TOKEN is not set\");\n"
                },
                {
                    "date": 1725043293169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n   console.log(\"Data keys sorted:\", Object.keys(data).sort());\n   const dataKeys = Object.keys(data)\n     .filter((key) => key !== \"hash\" && data[key] !== undefined)\n     .sort();\n-  const dataCheckString = dataKeys\n+  const checkString = dataKeys\n     .map((key) => `${key}=${initData[key]}`)\n     .join(\"\\n\");\n   console.log(\"Check string:\", checkString);\n \n"
                },
                {
                    "date": 1725043362969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,11 +57,9 @@\n   console.log(\"Data keys sorted:\", Object.keys(data).sort());\n   const dataKeys = Object.keys(data)\n     .filter((key) => key !== \"hash\" && data[key] !== undefined)\n     .sort();\n-  const checkString = dataKeys\n-    .map((key) => `${key}=${initData[key]}`)\n-    .join(\"\\n\");\n+  const checkString = dataKeys.map((key) => `${key}=${data[key]}`).join(\"\\n\");\n   console.log(\"Check string:\", checkString);\n \n   if (!BOT_TOKEN) {\n     console.error(\"BOT_TOKEN is not set\");\n"
                },
                {
                    "date": 1725043779953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n     console.error(\"BOT_TOKEN is not set\");\n     return false;\n   }\n \n-  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n+  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest(\"hex\");\n   console.log(\"Secret Key:\", secretKey.toString(\"hex\"));\n \n   const hmac = crypto\n     .createHmac(\"sha256\", secretKey)\n"
                },
                {
                    "date": 1725047329048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,13 +65,13 @@\n     console.error(\"BOT_TOKEN is not set\");\n     return false;\n   }\n \n-  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest(\"hex\");\n+  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n   console.log(\"Secret Key:\", secretKey.toString(\"hex\"));\n \n   const hmac = crypto\n-    .createHmac(\"sha256\", secretKey)\n+    .createHmac(\"sha256\", secretKey.digest())\n     .update(checkString)\n     .digest(\"hex\");\n \n   console.log(\n"
                },
                {
                    "date": 1725047344328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n   const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n   console.log(\"Secret Key:\", secretKey.toString(\"hex\"));\n \n   const hmac = crypto\n-    .createHmac(\"sha256\", secretKey.digest())\n+    .createHmac(\"sha256\", secretKey)\n     .update(checkString)\n     .digest(\"hex\");\n \n   console.log(\n"
                },
                {
                    "date": 1725048537337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,41 +45,24 @@\n   }\n }\n \n export function verifyTelegramAuth(authData: TelegramUser): boolean {\n-  console.log(\"Auth data received:\", authData);\n-\n-  if (!authData.hash) {\n-    console.error(\"No hash provided in auth data\");\n-    return false;\n-  }\n-\n   const { hash, ...data } = authData;\n-  console.log(\"Data keys sorted:\", Object.keys(data).sort());\n-  const dataKeys = Object.keys(data)\n-    .filter((key) => key !== \"hash\" && data[key] !== undefined)\n-    .sort();\n-  const checkString = dataKeys.map((key) => `${key}=${data[key]}`).join(\"\\n\");\n-  console.log(\"Check string:\", checkString);\n \n-  if (!BOT_TOKEN) {\n-    console.error(\"BOT_TOKEN is not set\");\n-    return false;\n-  }\n-\n   const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n-  console.log(\"Secret Key:\", secretKey.toString(\"hex\"));\n \n+  const checkString = Object.keys(data)\n+    .sort()\n+    .map((k) => `${k}=${data[k as keyof typeof data]}`)\n+    .join(\"\\n\");\n+\n   const hmac = crypto\n     .createHmac(\"sha256\", secretKey)\n     .update(checkString)\n     .digest(\"hex\");\n \n-  console.log(\n-    \"Secret key (first 10 chars):\",\n-    secretKey.toString(\"hex\").substring(0, 10)\n-  );\n+  console.log(\"Check String:\", checkString);\n   console.log(\"Generated HMAC:\", hmac);\n-  console.log(\"Received hash:\", hash);\n+  console.log(\"Received Hash:\", hash);\n \n   return hmac === hash;\n }\n"
                },
                {
                    "date": 1725098873083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,24 +45,31 @@\n   }\n }\n \n export function verifyTelegramAuth(authData: TelegramUser): boolean {\n+  console.log(\"Verifying Telegram auth data:\", authData);\n+\n   const { hash, ...data } = authData;\n \n-  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n-\n-  const checkString = Object.keys(data)\n+  const dataCheckString = Object.keys(data)\n     .sort()\n-    .map((k) => `${k}=${data[k as keyof typeof data]}`)\n+    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n     .join(\"\\n\");\n \n+  console.log(\"Data check string:\", dataCheckString);\n+\n+  if (!BOT_TOKEN) {\n+    console.error(\"BOT_TOKEN is not set\");\n+    return false;\n+  }\n+\n+  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n   const hmac = crypto\n     .createHmac(\"sha256\", secretKey)\n-    .update(checkString)\n+    .update(dataCheckString)\n     .digest(\"hex\");\n \n-  console.log(\"Check String:\", checkString);\n   console.log(\"Generated HMAC:\", hmac);\n-  console.log(\"Received Hash:\", hash);\n+  console.log(\"Received hash:\", hash);\n \n   return hmac === hash;\n }\n"
                },
                {
                    "date": 1725100144938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,20 +44,14 @@\n     return null;\n   }\n }\n \n-export function verifyTelegramAuth(authData: TelegramUser): boolean {\n-  console.log(\"Verifying Telegram auth data:\", authData);\n+export function verifyTelegramAuth(initData: string): boolean {\n+  const urlParams = new URLSearchParams(initData);\n+  const hash = urlParams.get(\"hash\");\n+  urlParams.delete(\"hash\");\n+  const dataCheckString = urlParams.toString();\n \n-  const { hash, ...data } = authData;\n-\n-  const dataCheckString = Object.keys(data)\n-    .sort()\n-    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n-    .join(\"\\n\");\n-\n-  console.log(\"Data check string:\", dataCheckString);\n-\n   if (!BOT_TOKEN) {\n     console.error(\"BOT_TOKEN is not set\");\n     return false;\n   }\n@@ -67,8 +61,9 @@\n     .createHmac(\"sha256\", secretKey)\n     .update(dataCheckString)\n     .digest(\"hex\");\n \n+  console.log(\"Data check string:\", dataCheckString);\n   console.log(\"Generated HMAC:\", hmac);\n   console.log(\"Received hash:\", hash);\n \n   return hmac === hash;\n"
                },
                {
                    "date": 1725101089183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,18 @@\n     return null;\n   }\n }\n \n+function parseInitData(initData: string) {\n+  const q = new URLSearchParams(initData);\n+  const hash = q.get(\"hash\");\n+  q.delete(\"hash\");\n+  const v = Array.from(q.entries());\n+  v.sort(([aN], [bN]) => aN.localeCompare(bN));\n+  const data_check_string = v.map(([n, v]) => `${n}=${v}`).join(\"\\n\");\n+  return { hash, data_check_string };\n+}\n+\n export function verifyTelegramAuth(initData: string): boolean {\n   const urlParams = new URLSearchParams(initData);\n   const hash = urlParams.get(\"hash\");\n   urlParams.delete(\"hash\");\n"
                },
                {
                    "date": 1725101107466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,27 +54,48 @@\n   const data_check_string = v.map(([n, v]) => `${n}=${v}`).join(\"\\n\");\n   return { hash, data_check_string };\n }\n \n+// export function verifyTelegramAuth(initData: string): boolean {\n+//   const urlParams = new URLSearchParams(initData);\n+//   const hash = urlParams.get(\"hash\");\n+//   urlParams.delete(\"hash\");\n+//   const dataCheckString = urlParams.toString();\n+\n+//   if (!BOT_TOKEN) {\n+//     console.error(\"BOT_TOKEN is not set\");\n+//     return false;\n+//   }\n+\n+//   const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n+//   const hmac = crypto\n+//     .createHmac(\"sha256\", secretKey)\n+//     .update(dataCheckString)\n+//     .digest(\"hex\");\n+\n+//   console.log(\"Data check string:\", dataCheckString);\n+//   console.log(\"Generated HMAC:\", hmac);\n+//   console.log(\"Received hash:\", hash);\n+\n+//   return hmac === hash;\n+// }\n export function verifyTelegramAuth(initData: string): boolean {\n-  const urlParams = new URLSearchParams(initData);\n-  const hash = urlParams.get(\"hash\");\n-  urlParams.delete(\"hash\");\n-  const dataCheckString = urlParams.toString();\n+  const { hash, data_check_string } = parseInitData(initData);\n \n   if (!BOT_TOKEN) {\n     console.error(\"BOT_TOKEN is not set\");\n     return false;\n   }\n \n-  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n-  const hmac = crypto\n-    .createHmac(\"sha256\", secretKey)\n-    .update(dataCheckString)\n+  const secret_key = createHmac(\"sha256\", \"WebAppData\")\n+    .update(BOT_TOKEN)\n+    .digest();\n+  const key = createHmac(\"sha256\", secret_key)\n+    .update(data_check_string)\n     .digest(\"hex\");\n \n-  console.log(\"Data check string:\", dataCheckString);\n-  console.log(\"Generated HMAC:\", hmac);\n+  console.log(\"Data check string:\", data_check_string);\n+  console.log(\"Generated key:\", key);\n   console.log(\"Received hash:\", hash);\n \n-  return hmac === hash;\n+  return key === hash;\n }\n"
                },
                {
                    "date": 1725101115020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import crypto from \"crypto\";\n+import { createHmac } from \"crypto\";\n import jwt from \"jsonwebtoken\";\n \n const JWT_SECRET = process.env.JWT_SECRET as string;\n const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n"
                },
                {
                    "date": 1725102256839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,21 @@\n import { createHmac } from \"crypto\";\n import jwt from \"jsonwebtoken\";\n+import { TelegramUser } from \"@/types\";\n \n const JWT_SECRET = process.env.JWT_SECRET as string;\n const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n \n-export interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  language_code?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n+// export interface TelegramUser {\n+//   id: number;\n+//   first_name: string;\n+//   last_name?: string;\n+//   username?: string;\n+//   language_code?: string;\n+//   photo_url?: string;\n+//   auth_date: number;\n+//   hash: string;\n+// }\n \n export function verifyToken(token: string): { userId: string } | null {\n   try {\n     return jwt.verify(token, JWT_SECRET) as { userId: string };\n"
                },
                {
                    "date": 1725142671761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+import { createHmac } from \"crypto\";\n+import jwt from \"jsonwebtoken\";\n+import { TelegramUser } from \"@/types\";\n+\n+const JWT_SECRET = process.env.JWT_SECRET as string;\n+const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n+\n+// export interface TelegramUser {\n+//   id: number;\n+//   first_name: string;\n+//   last_name?: string;\n+//   username?: string;\n+//   language_code?: string;\n+//   photo_url?: string;\n+//   auth_date: number;\n+//   hash: string;\n+// }\n+\n+export function generateToken(userId: string): string {\n+  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"1d\" });\n+}\n+\n+export function verifyToken(token: string): any {\n+  try {\n+    return jwt.verify(token, JWT_SECRET);\n+  } catch (error) {\n+    return null;\n+  }\n+}\n+export async function verifyTokenAndGetUser(\n+  token: string\n+): Promise<TelegramUser | null> {\n+  try {\n+    const response = await fetch(\"/api/auth/verify\", {\n+      headers: { Authorization: `Bearer ${token}` },\n+    });\n+    if (response.ok) {\n+      return response.json();\n+    }\n+    return null;\n+  } catch (error) {\n+    console.error(\"Error verifying token:\", error);\n+    return null;\n+  }\n+}\n+\n+function parseInitData(initData: string) {\n+  const q = new URLSearchParams(initData);\n+  const hash = q.get(\"hash\");\n+  q.delete(\"hash\");\n+  const v = Array.from(q.entries());\n+  v.sort(([aN], [bN]) => aN.localeCompare(bN));\n+  const data_check_string = v.map(([n, v]) => `${n}=${v}`).join(\"\\n\");\n+  return { hash, data_check_string };\n+}\n+\n+// export function verifyTelegramAuth(initData: string): boolean {\n+//   const urlParams = new URLSearchParams(initData);\n+//   const hash = urlParams.get(\"hash\");\n+//   urlParams.delete(\"hash\");\n+//   const dataCheckString = urlParams.toString();\n+\n+//   if (!BOT_TOKEN) {\n+//     console.error(\"BOT_TOKEN is not set\");\n+//     return false;\n+//   }\n+\n+//   const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n+//   const hmac = crypto\n+//     .createHmac(\"sha256\", secretKey)\n+//     .update(dataCheckString)\n+//     .digest(\"hex\");\n+\n+//   console.log(\"Data check string:\", dataCheckString);\n+//   console.log(\"Generated HMAC:\", hmac);\n+//   console.log(\"Received hash:\", hash);\n+\n+//   return hmac === hash;\n+// }\n+export function verifyTelegramAuth(initData: string): boolean {\n+  const { hash, data_check_string } = parseInitData(initData);\n+\n+  if (!BOT_TOKEN) {\n+    console.error(\"BOT_TOKEN is not set\");\n+    return false;\n+  }\n+\n+  const secret_key = createHmac(\"sha256\", \"WebAppData\")\n+    .update(BOT_TOKEN)\n+    .digest();\n+  const key = createHmac(\"sha256\", secret_key)\n+    .update(data_check_string)\n+    .digest(\"hex\");\n+\n+  console.log(\"Data check string:\", data_check_string);\n+  console.log(\"Generated key:\", key);\n+  console.log(\"Received hash:\", hash);\n+\n+  return key === hash;\n+}\n"
                },
                {
                    "date": 1725167553076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { createHmac } from \"crypto\";\n+import { createHmac, createHash } from \"crypto\";\n import jwt from \"jsonwebtoken\";\n import { TelegramUser } from \"@/types\";\n \n const JWT_SECRET = process.env.JWT_SECRET as string;\n@@ -76,127 +76,48 @@\n //   console.log(\"Received hash:\", hash);\n \n //   return hmac === hash;\n // }\n-export function verifyTelegramAuth(initData: string): boolean {\n-  const { hash, data_check_string } = parseInitData(initData);\n-\n-  if (!BOT_TOKEN) {\n-    console.error(\"BOT_TOKEN is not set\");\n-    return false;\n-  }\n-\n-  const secret_key = createHmac(\"sha256\", \"WebAppData\")\n-    .update(BOT_TOKEN)\n-    .digest();\n-  const key = createHmac(\"sha256\", secret_key)\n-    .update(data_check_string)\n-    .digest(\"hex\");\n-\n-  console.log(\"Data check string:\", data_check_string);\n-  console.log(\"Generated key:\", key);\n-  console.log(\"Received hash:\", hash);\n-\n-  return key === hash;\n-}\n-import { createHmac } from \"crypto\";\n-import jwt from \"jsonwebtoken\";\n-import { TelegramUser } from \"@/types\";\n-\n-const JWT_SECRET = process.env.JWT_SECRET as string;\n-const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n-\n-// export interface TelegramUser {\n-//   id: number;\n-//   first_name: string;\n-//   last_name?: string;\n-//   username?: string;\n-//   language_code?: string;\n-//   photo_url?: string;\n-//   auth_date: number;\n-//   hash: string;\n-// }\n-\n-export function verifyToken(token: string): { userId: string } | null {\n-  try {\n-    return jwt.verify(token, JWT_SECRET) as { userId: string };\n-  } catch (error) {\n-    console.error(\"Error verifying JWT:\", error);\n-    return null;\n-  }\n-}\n-\n-export function generateToken(userId: string): string {\n-  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"1d\" });\n-}\n-\n-export async function verifyTokenAndGetUser(\n-  token: string\n-): Promise<TelegramUser | null> {\n-  try {\n-    const response = await fetch(\"/api/auth/verify\", {\n-      headers: { Authorization: `Bearer ${token}` },\n-    });\n-    if (response.ok) {\n-      return response.json();\n-    }\n-    return null;\n-  } catch (error) {\n-    console.error(\"Error verifying token:\", error);\n-    return null;\n-  }\n-}\n-\n-function parseInitData(initData: string) {\n-  const q = new URLSearchParams(initData);\n-  const hash = q.get(\"hash\");\n-  q.delete(\"hash\");\n-  const v = Array.from(q.entries());\n-  v.sort(([aN], [bN]) => aN.localeCompare(bN));\n-  const data_check_string = v.map(([n, v]) => `${n}=${v}`).join(\"\\n\");\n-  return { hash, data_check_string };\n-}\n-\n // export function verifyTelegramAuth(initData: string): boolean {\n-//   const urlParams = new URLSearchParams(initData);\n-//   const hash = urlParams.get(\"hash\");\n-//   urlParams.delete(\"hash\");\n-//   const dataCheckString = urlParams.toString();\n+//   const { hash, data_check_string } = parseInitData(initData);\n \n //   if (!BOT_TOKEN) {\n //     console.error(\"BOT_TOKEN is not set\");\n //     return false;\n //   }\n \n-//   const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n-//   const hmac = crypto\n-//     .createHmac(\"sha256\", secretKey)\n-//     .update(dataCheckString)\n+//   const secret_key = createHmac(\"sha256\", \"WebAppData\")\n+//     .update(BOT_TOKEN)\n+//     .digest();\n+//   const key = createHmac(\"sha256\", secret_key)\n+//     .update(data_check_string)\n //     .digest(\"hex\");\n \n-//   console.log(\"Data check string:\", dataCheckString);\n-//   console.log(\"Generated HMAC:\", hmac);\n+//   console.log(\"Data check string:\", data_check_string);\n+//   console.log(\"Generated key:\", key);\n //   console.log(\"Received hash:\", hash);\n \n-//   return hmac === hash;\n+//   return key === hash;\n // }\n export function verifyTelegramAuth(initData: string): boolean {\n-  const { hash, data_check_string } = parseInitData(initData);\n+  const urlParams = new URLSearchParams(initData);\n+  const hash = urlParams.get(\"hash\");\n+  urlParams.delete(\"hash\");\n \n-  if (!BOT_TOKEN) {\n-    console.error(\"BOT_TOKEN is not set\");\n-    return false;\n-  }\n+  const dataCheckString = Array.from(urlParams.entries())\n+    .sort(([a], [b]) => a.localeCompare(b))\n+    .map(([key, value]) => `${key}=${value}`)\n+    .join(\"\\n\");\n \n-  const secret_key = createHmac(\"sha256\", \"WebAppData\")\n-    .update(BOT_TOKEN)\n-    .digest();\n-  const key = createHmac(\"sha256\", secret_key)\n-    .update(data_check_string)\n+  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n+\n+  const hmac = crypto\n+    .createHmac(\"sha256\", secretKey)\n+    .update(dataCheckString)\n     .digest(\"hex\");\n \n-  console.log(\"Data check string:\", data_check_string);\n-  console.log(\"Generated key:\", key);\n+  console.log(\"Data check string:\", dataCheckString);\n+  console.log(\"Generated hash:\", hmac);\n   console.log(\"Received hash:\", hash);\n \n-  return key === hash;\n+  return hmac === hash;\n }\n"
                },
                {
                    "date": 1725167578966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,12 +107,11 @@\n     .sort(([a], [b]) => a.localeCompare(b))\n     .map(([key, value]) => `${key}=${value}`)\n     .join(\"\\n\");\n \n-  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n+  const secretKey = createHash(\"sha256\").update(BOT_TOKEN).digest();\n \n-  const hmac = crypto\n-    .createHmac(\"sha256\", secretKey)\n+  const hmac = createHmac(\"sha256\", secretKey)\n     .update(dataCheckString)\n     .digest(\"hex\");\n \n   console.log(\"Data check string:\", dataCheckString);\n"
                },
                {
                    "date": 1725168211935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,47 +76,49 @@\n //   console.log(\"Received hash:\", hash);\n \n //   return hmac === hash;\n // }\n-// export function verifyTelegramAuth(initData: string): boolean {\n-//   const { hash, data_check_string } = parseInitData(initData);\n \n-//   if (!BOT_TOKEN) {\n-//     console.error(\"BOT_TOKEN is not set\");\n-//     return false;\n-//   }\n+export function verifyTelegramAuth(initData: string): boolean {\n+  const { hash, data_check_string } = parseInitData(initData);\n \n-//   const secret_key = createHmac(\"sha256\", \"WebAppData\")\n-//     .update(BOT_TOKEN)\n-//     .digest();\n-//   const key = createHmac(\"sha256\", secret_key)\n-//     .update(data_check_string)\n-//     .digest(\"hex\");\n+  if (!BOT_TOKEN) {\n+    console.error(\"BOT_TOKEN is not set\");\n+    return false;\n+  }\n \n-//   console.log(\"Data check string:\", data_check_string);\n-//   console.log(\"Generated key:\", key);\n-//   console.log(\"Received hash:\", hash);\n+  const secret_key = createHmac(\"sha256\", \"WebAppData\")\n+    .update(BOT_TOKEN)\n+    .digest();\n+  const key = createHmac(\"sha256\", secret_key)\n+    .update(data_check_string)\n+    .digest(\"hex\");\n \n-//   return key === hash;\n-// }\n-export function verifyTelegramAuth(initData: string): boolean {\n-  const urlParams = new URLSearchParams(initData);\n-  const hash = urlParams.get(\"hash\");\n-  urlParams.delete(\"hash\");\n+  console.log(\"Data check string:\", data_check_string);\n+  console.log(\"Generated key:\", key);\n+  console.log(\"Received hash:\", hash);\n \n-  const dataCheckString = Array.from(urlParams.entries())\n-    .sort(([a], [b]) => a.localeCompare(b))\n-    .map(([key, value]) => `${key}=${value}`)\n-    .join(\"\\n\");\n+  return key === hash;\n+}\n \n-  const secretKey = createHash(\"sha256\").update(BOT_TOKEN).digest();\n+// export function verifyTelegramAuth(initData: string): boolean {\n+//   const urlParams = new URLSearchParams(initData);\n+//   const hash = urlParams.get(\"hash\");\n+//   urlParams.delete(\"hash\");\n \n-  const hmac = createHmac(\"sha256\", secretKey)\n-    .update(dataCheckString)\n-    .digest(\"hex\");\n+//   const dataCheckString = Array.from(urlParams.entries())\n+//     .sort(([a], [b]) => a.localeCompare(b))\n+//     .map(([key, value]) => `${key}=${value}`)\n+//     .join(\"\\n\");\n \n-  console.log(\"Data check string:\", dataCheckString);\n-  console.log(\"Generated hash:\", hmac);\n-  console.log(\"Received hash:\", hash);\n+//   const secretKey = createHash(\"sha256\").update(BOT_TOKEN).digest();\n \n-  return hmac === hash;\n-}\n+//   const hmac = createHmac(\"sha256\", secretKey)\n+//     .update(dataCheckString)\n+//     .digest(\"hex\");\n+\n+//   console.log(\"Data check string:\", dataCheckString);\n+//   console.log(\"Generated hash:\", hmac);\n+//   console.log(\"Received hash:\", hash);\n+\n+//   return hmac === hash;\n+// }\n"
                },
                {
                    "date": 1725168595538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,72 +53,21 @@\n   const data_check_string = v.map(([n, v]) => `${n}=${v}`).join(\"\\n\");\n   return { hash, data_check_string };\n }\n \n-// export function verifyTelegramAuth(initData: string): boolean {\n-//   const urlParams = new URLSearchParams(initData);\n-//   const hash = urlParams.get(\"hash\");\n-//   urlParams.delete(\"hash\");\n-//   const dataCheckString = urlParams.toString();\n-\n-//   if (!BOT_TOKEN) {\n-//     console.error(\"BOT_TOKEN is not set\");\n-//     return false;\n-//   }\n-\n-//   const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n-//   const hmac = crypto\n-//     .createHmac(\"sha256\", secretKey)\n-//     .update(dataCheckString)\n-//     .digest(\"hex\");\n-\n-//   console.log(\"Data check string:\", dataCheckString);\n-//   console.log(\"Generated HMAC:\", hmac);\n-//   console.log(\"Received hash:\", hash);\n-\n-//   return hmac === hash;\n-// }\n-\n export function verifyTelegramAuth(initData: string): boolean {\n   const { hash, data_check_string } = parseInitData(initData);\n-\n   if (!BOT_TOKEN) {\n     console.error(\"BOT_TOKEN is not set\");\n     return false;\n   }\n-\n   const secret_key = createHmac(\"sha256\", \"WebAppData\")\n     .update(BOT_TOKEN)\n     .digest();\n   const key = createHmac(\"sha256\", secret_key)\n     .update(data_check_string)\n     .digest(\"hex\");\n-\n   console.log(\"Data check string:\", data_check_string);\n   console.log(\"Generated key:\", key);\n   console.log(\"Received hash:\", hash);\n-\n   return key === hash;\n }\n-\n-// export function verifyTelegramAuth(initData: string): boolean {\n-//   const urlParams = new URLSearchParams(initData);\n-//   const hash = urlParams.get(\"hash\");\n-//   urlParams.delete(\"hash\");\n-\n-//   const dataCheckString = Array.from(urlParams.entries())\n-//     .sort(([a], [b]) => a.localeCompare(b))\n-//     .map(([key, value]) => `${key}=${value}`)\n-//     .join(\"\\n\");\n-\n-//   const secretKey = createHash(\"sha256\").update(BOT_TOKEN).digest();\n-\n-//   const hmac = createHmac(\"sha256\", secretKey)\n-//     .update(dataCheckString)\n-//     .digest(\"hex\");\n-\n-//   console.log(\"Data check string:\", dataCheckString);\n-//   console.log(\"Generated hash:\", hmac);\n-//   console.log(\"Received hash:\", hash);\n-\n-//   return hmac === hash;\n-// }\n"
                },
                {
                    "date": 1725169137463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,9 @@\n }\n \n export function verifyTelegramAuth(initData: string): boolean {\n   const { hash, data_check_string } = parseInitData(initData);\n+\n   if (!BOT_TOKEN) {\n     console.error(\"BOT_TOKEN is not set\");\n     return false;\n   }\n"
                },
                {
                    "date": 1725169622590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,8 @@\n     console.error(\"Error verifying token:\", error);\n     return null;\n   }\n }\n-\n function parseInitData(initData: string) {\n   const q = new URLSearchParams(initData);\n   const hash = q.get(\"hash\");\n   q.delete(\"hash\");\n@@ -60,15 +59,18 @@\n   if (!BOT_TOKEN) {\n     console.error(\"BOT_TOKEN is not set\");\n     return false;\n   }\n+\n   const secret_key = createHmac(\"sha256\", \"WebAppData\")\n     .update(BOT_TOKEN)\n     .digest();\n   const key = createHmac(\"sha256\", secret_key)\n     .update(data_check_string)\n     .digest(\"hex\");\n+\n   console.log(\"Data check string:\", data_check_string);\n   console.log(\"Generated key:\", key);\n   console.log(\"Received hash:\", hash);\n+\n   return key === hash;\n }\n"
                },
                {
                    "date": 1725169773308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,19 +15,8 @@\n //   auth_date: number;\n //   hash: string;\n // }\n \n-export function generateToken(userId: string): string {\n-  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"1d\" });\n-}\n-\n-export function verifyToken(token: string): any {\n-  try {\n-    return jwt.verify(token, JWT_SECRET);\n-  } catch (error) {\n-    return null;\n-  }\n-}\n export async function verifyTokenAndGetUser(\n   token: string\n ): Promise<TelegramUser | null> {\n   try {\n@@ -42,8 +31,9 @@\n     console.error(\"Error verifying token:\", error);\n     return null;\n   }\n }\n+\n function parseInitData(initData: string) {\n   const q = new URLSearchParams(initData);\n   const hash = q.get(\"hash\");\n   q.delete(\"hash\");\n@@ -73,4 +63,16 @@\n   console.log(\"Received hash:\", hash);\n \n   return key === hash;\n }\n+\n+export function generateToken(userId: string): string {\n+  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"1d\" });\n+}\n+\n+export function verifyToken(token: string): any {\n+  try {\n+    return jwt.verify(token, JWT_SECRET);\n+  } catch (error) {\n+    return null;\n+  }\n+}\n"
                },
                {
                    "date": 1725174755038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,11 +68,26 @@\n export function generateToken(userId: string): string {\n   return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"1d\" });\n }\n \n-export function verifyToken(token: string): any {\n+// export function verifyToken(token: string): any {\n+try {\n+  return jwt.verify(token, JWT_SECRET);\n+} catch (error) {\n+  return null;\n+}\n+// }\n+export function verifyToken(token: string): TelegramUser | null {\n   try {\n-    return jwt.verify(token, JWT_SECRET);\n+    const decoded = jwt.verify(token, JWT_SECRET) as { userId: string };\n+    // Here you should fetch the full user data based on the userId\n+    // For now, we'll just return a mock user object\n+    return {\n+      id: parseInt(decoded.userId),\n+      first_name: \"User\",\n+      // ... other fields\n+    };\n   } catch (error) {\n+    console.error(\"Error verifying token:\", error);\n     return null;\n   }\n }\n"
                },
                {
                    "date": 1725174820009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,14 +69,14 @@\n   return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"1d\" });\n }\n \n // export function verifyToken(token: string): any {\n-try {\n-  return jwt.verify(token, JWT_SECRET);\n-} catch (error) {\n-  return null;\n-}\n+// try {\n+//   return jwt.verify(token, JWT_SECRET);\n+// } catch (error) {\n+//   return null;\n // }\n+// }\n export function verifyToken(token: string): TelegramUser | null {\n   try {\n     const decoded = jwt.verify(token, JWT_SECRET) as { userId: string };\n     // Here you should fetch the full user data based on the userId\n"
                },
                {
                    "date": 1725517018822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,9 @@\n     // For now, we'll just return a mock user object\n     return {\n       id: parseInt(decoded.userId),\n       first_name: \"User\",\n+\n     };\n   } catch (error) {\n     console.error(\"Error verifying token:\", error);\n     return null;\n"
                },
                {
                    "date": 1725517110018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,10 +78,9 @@\n // }\n export function verifyToken(token: string): TelegramUser | null {\n   try {\n     const decoded = jwt.verify(token, JWT_SECRET) as { userId: string };\n-    // Here you should fetch the full user data based on the userId\n-    // For now, we'll just return a mock user object\n+   \n     return {\n       id: parseInt(decoded.userId),\n       first_name: \"User\",\n     };\n"
                }
            ],
            "date": 1724756387464,
            "name": "Commit-0",
            "content": "import { verifyTelegramLoginData } from \"telegram-login-button\";\n\nconst BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n\ninterface TelegramAuthData {\n  id: number;\n  first_name: string;\n  last_name?: string;\n  username?: string;\n  photo_url?: string;\n  auth_date: number;\n  hash: string;\n}\n\nexport function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n  return verifyTelegramLoginData(authData, BOT_TOKEN);\n}\n"
        }
    ]
}