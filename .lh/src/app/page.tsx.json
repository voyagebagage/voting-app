{
    "sourceFile": "src/app/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 109,
            "patches": [
                {
                    "date": 1724755797344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724755831484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,63 +1,108 @@\n-\"use client\";\n+import Image from \"next/image\";\n \n-import { useEffect } from \"react\";\n-import { useRouter } from \"next/navigation\";\n+export default function Home() {\n+  return (\n+    <main className=\"flex min-h-screen flex-col items-center justify-between p-24\">\n+      <div className=\"z-10 w-full max-w-5xl items-center justify-between font-mono text-sm lg:flex\">\n+        <p className=\"fixed left-0 top-0 flex w-full justify-center border-b border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:w-auto  lg:rounded-xl lg:border lg:bg-gray-200 lg:p-4 lg:dark:bg-zinc-800/30\">\n+          Get started by editing&nbsp;\n+          <code className=\"font-mono font-bold\">src/app/page.tsx</code>\n+        </p>\n+        <div className=\"fixed bottom-0 left-0 flex h-48 w-full items-end justify-center bg-gradient-to-t from-white via-white dark:from-black dark:via-black lg:static lg:size-auto lg:bg-none\">\n+          <a\n+            className=\"pointer-events-none flex place-items-center gap-2 p-8 lg:pointer-events-auto lg:p-0\"\n+            href=\"https://vercel.com?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app\"\n+            target=\"_blank\"\n+            rel=\"noopener noreferrer\">\n+            By{\" \"}\n+            <Image\n+              src=\"/vercel.svg\"\n+              alt=\"Vercel Logo\"\n+              className=\"dark:invert\"\n+              width={100}\n+              height={24}\n+              priority\n+            />\n+          </a>\n+        </div>\n+      </div>\n \n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n+      <div className=\"relative z-[-1] flex place-items-center before:absolute before:h-[300px] before:w-full before:-translate-x-1/2 before:rounded-full before:bg-gradient-radial before:from-white before:to-transparent before:blur-2xl before:content-[''] after:absolute after:-z-20 after:h-[180px] after:w-full after:translate-x-1/3 after:bg-gradient-conic after:from-sky-200 after:via-blue-200 after:blur-2xl after:content-[''] before:dark:bg-gradient-to-br before:dark:from-transparent before:dark:to-blue-700 before:dark:opacity-10 after:dark:from-sky-900 after:dark:via-[#0141ff] after:dark:opacity-40 sm:before:w-[480px] sm:after:w-[240px] before:lg:h-[360px]\">\n+        <Image\n+          className=\"relative dark:drop-shadow-[0_0_0.3rem_#ffffff70] dark:invert\"\n+          src=\"/next.svg\"\n+          alt=\"Next.js Logo\"\n+          width={180}\n+          height={37}\n+          priority\n+        />\n+      </div>\n \n-declare global {\n-  interface Window {\n-    onTelegramAuth: (user: TelegramUser) => void;\n-  }\n-}\n+      <div className=\"mb-32 grid text-center lg:mb-0 lg:w-full lg:max-w-5xl lg:grid-cols-4 lg:text-left\">\n+        <a\n+          href=\"https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app\"\n+          className=\"group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30\"\n+          target=\"_blank\"\n+          rel=\"noopener noreferrer\">\n+          <h2 className=\"mb-3 text-2xl font-semibold\">\n+            Docs{\" \"}\n+            <span className=\"inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none\">\n+              -&gt;\n+            </span>\n+          </h2>\n+          <p className=\"m-0 max-w-[30ch] text-sm opacity-50\">\n+            Find in-depth information about Next.js features and API.\n+          </p>\n+        </a>\n \n-export default function Login() {\n-  const router = useRouter();\n+        <a\n+          href=\"https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app\"\n+          className=\"group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30\"\n+          target=\"_blank\"\n+          rel=\"noopener noreferrer\">\n+          <h2 className=\"mb-3 text-2xl font-semibold\">\n+            Learn{\" \"}\n+            <span className=\"inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none\">\n+              -&gt;\n+            </span>\n+          </h2>\n+          <p className=\"m-0 max-w-[30ch] text-sm opacity-50\">\n+            Learn about Next.js in an interactive course with&nbsp;quizzes!\n+          </p>\n+        </a>\n \n-  useEffect(() => {\n-    window.onTelegramAuth = function (user: TelegramUser) {\n-      console.log(\n-        \"Logged in as \" +\n-          user.first_name +\n-          \" \" +\n-          (user.last_name || \"\") +\n-          \" (\" +\n-          user.id +\n-          (user.username ? \", @\" + user.username : \"\") +\n-          \")\"\n-      );\n+        <a\n+          href=\"https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app\"\n+          className=\"group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30\"\n+          target=\"_blank\"\n+          rel=\"noopener noreferrer\">\n+          <h2 className=\"mb-3 text-2xl font-semibold\">\n+            Templates{\" \"}\n+            <span className=\"inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none\">\n+              -&gt;\n+            </span>\n+          </h2>\n+          <p className=\"m-0 max-w-[30ch] text-sm opacity-50\">\n+            Explore starter templates for Next.js.\n+          </p>\n+        </a>\n \n-      fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            router.push(\"/\");\n-          }\n-        })\n-        .catch((error) => console.error(\"Error:\", error));\n-    };\n-  }, [router]);\n-\n-  return (\n-    <div>\n-      <h1>Login with Telegram</h1>\n-      <div\n-        id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}></div>\n-    </div>\n+        <a\n+          href=\"https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app\"\n+          className=\"group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30\"\n+          target=\"_blank\"\n+          rel=\"noopener noreferrer\">\n+          <h2 className=\"mb-3 text-2xl font-semibold\">\n+            Deploy{\" \"}\n+            <span className=\"inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none\">\n+              -&gt;\n+            </span>\n+          </h2>\n+          <p className=\"m-0 max-w-[30ch] text-balance text-sm opacity-50\">\n+            Instantly deploy your Next.js site to a shareable URL with Vercel.\n+          </p>\n+        </a>\n+      </div>\n+    </main>\n   );\n }\n"
                },
                {
                    "date": 1724758611697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,108 +1,168 @@\n-import Image from \"next/image\";\n+\"use client\";\n \n+import { useState, useEffect } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+\n+interface Item {\n+  _id: string;\n+  name: string;\n+  category: string;\n+  type: \"place\" | \"person\" | \"service\";\n+  location?: string;\n+  distance?: number;\n+  googleUrl?: string;\n+  description?: string;\n+  contactInfo?: string;\n+  votes: number;\n+}\n+\n export default function Home() {\n-  return (\n-    <main className=\"flex min-h-screen flex-col items-center justify-between p-24\">\n-      <div className=\"z-10 w-full max-w-5xl items-center justify-between font-mono text-sm lg:flex\">\n-        <p className=\"fixed left-0 top-0 flex w-full justify-center border-b border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:w-auto  lg:rounded-xl lg:border lg:bg-gray-200 lg:p-4 lg:dark:bg-zinc-800/30\">\n-          Get started by editing&nbsp;\n-          <code className=\"font-mono font-bold\">src/app/page.tsx</code>\n-        </p>\n-        <div className=\"fixed bottom-0 left-0 flex h-48 w-full items-end justify-center bg-gradient-to-t from-white via-white dark:from-black dark:via-black lg:static lg:size-auto lg:bg-none\">\n-          <a\n-            className=\"pointer-events-none flex place-items-center gap-2 p-8 lg:pointer-events-auto lg:p-0\"\n-            href=\"https://vercel.com?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app\"\n-            target=\"_blank\"\n-            rel=\"noopener noreferrer\">\n-            By{\" \"}\n-            <Image\n-              src=\"/vercel.svg\"\n-              alt=\"Vercel Logo\"\n-              className=\"dark:invert\"\n-              width={100}\n-              height={24}\n-              priority\n-            />\n-          </a>\n-        </div>\n-      </div>\n+  const [items, setItems] = useState<Item[]>([]);\n+  const [category, setCategory] = useState(\"\");\n+  const [type, setType] = useState<\"place\" | \"person\" | \"service\">(\"place\");\n+  const [location, setLocation] = useState(\"\");\n+  const [newItemName, setNewItemName] = useState(\"\");\n+  const [newItemDescription, setNewItemDescription] = useState(\"\");\n+  const router = useRouter();\n \n-      <div className=\"relative z-[-1] flex place-items-center before:absolute before:h-[300px] before:w-full before:-translate-x-1/2 before:rounded-full before:bg-gradient-radial before:from-white before:to-transparent before:blur-2xl before:content-[''] after:absolute after:-z-20 after:h-[180px] after:w-full after:translate-x-1/3 after:bg-gradient-conic after:from-sky-200 after:via-blue-200 after:blur-2xl after:content-[''] before:dark:bg-gradient-to-br before:dark:from-transparent before:dark:to-blue-700 before:dark:opacity-10 after:dark:from-sky-900 after:dark:via-[#0141ff] after:dark:opacity-40 sm:before:w-[480px] sm:after:w-[240px] before:lg:h-[360px]\">\n-        <Image\n-          className=\"relative dark:drop-shadow-[0_0_0.3rem_#ffffff70] dark:invert\"\n-          src=\"/next.svg\"\n-          alt=\"Next.js Logo\"\n-          width={180}\n-          height={37}\n-          priority\n-        />\n-      </div>\n+  useEffect(() => {\n+    const token = localStorage.getItem(\"token\");\n+    if (!token) {\n+      router.push(\"/login\");\n+    }\n+  }, [router]);\n \n-      <div className=\"mb-32 grid text-center lg:mb-0 lg:w-full lg:max-w-5xl lg:grid-cols-4 lg:text-left\">\n-        <a\n-          href=\"https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app\"\n-          className=\"group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30\"\n-          target=\"_blank\"\n-          rel=\"noopener noreferrer\">\n-          <h2 className=\"mb-3 text-2xl font-semibold\">\n-            Docs{\" \"}\n-            <span className=\"inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none\">\n-              -&gt;\n-            </span>\n-          </h2>\n-          <p className=\"m-0 max-w-[30ch] text-sm opacity-50\">\n-            Find in-depth information about Next.js features and API.\n-          </p>\n-        </a>\n+  const fetchItems = async () => {\n+    const response = await fetch(\n+      `/api/items?category=${category}&type=${type}${\n+        location ? `&location=${location}` : \"\"\n+      }`\n+    );\n+    const data = await response.json();\n+    setItems(data);\n+  };\n \n-        <a\n-          href=\"https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app\"\n-          className=\"group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30\"\n-          target=\"_blank\"\n-          rel=\"noopener noreferrer\">\n-          <h2 className=\"mb-3 text-2xl font-semibold\">\n-            Learn{\" \"}\n-            <span className=\"inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none\">\n-              -&gt;\n-            </span>\n-          </h2>\n-          <p className=\"m-0 max-w-[30ch] text-sm opacity-50\">\n-            Learn about Next.js in an interactive course with&nbsp;quizzes!\n-          </p>\n-        </a>\n+  const handleVote = async (itemId: string) => {\n+    const token = localStorage.getItem(\"token\");\n+    const response = await fetch(\"/api/vote\", {\n+      method: \"POST\",\n+      headers: {\n+        \"Content-Type\": \"application/json\",\n+        Authorization: `Bearer ${token}`,\n+      },\n+      body: JSON.stringify({ itemId, category }),\n+    });\n \n-        <a\n-          href=\"https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app\"\n-          className=\"group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30\"\n-          target=\"_blank\"\n-          rel=\"noopener noreferrer\">\n-          <h2 className=\"mb-3 text-2xl font-semibold\">\n-            Templates{\" \"}\n-            <span className=\"inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none\">\n-              -&gt;\n-            </span>\n-          </h2>\n-          <p className=\"m-0 max-w-[30ch] text-sm opacity-50\">\n-            Explore starter templates for Next.js.\n-          </p>\n-        </a>\n+    if (response.ok) {\n+      fetchItems(); // Refresh items after voting\n+    } else {\n+      const error = await response.json();\n+      alert(error.error);\n+    }\n+  };\n \n-        <a\n-          href=\"https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app\"\n-          className=\"group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30\"\n-          target=\"_blank\"\n-          rel=\"noopener noreferrer\">\n-          <h2 className=\"mb-3 text-2xl font-semibold\">\n-            Deploy{\" \"}\n-            <span className=\"inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none\">\n-              -&gt;\n-            </span>\n-          </h2>\n-          <p className=\"m-0 max-w-[30ch] text-balance text-sm opacity-50\">\n-            Instantly deploy your Next.js site to a shareable URL with Vercel.\n-          </p>\n-        </a>\n+  const addNewItem = async () => {\n+    const token = localStorage.getItem(\"token\");\n+    const response = await fetch(\"/api/items\", {\n+      method: \"POST\",\n+      headers: {\n+        \"Content-Type\": \"application/json\",\n+        Authorization: `Bearer ${token}`,\n+      },\n+      body: JSON.stringify({\n+        name: newItemName,\n+        category,\n+        type,\n+        description: newItemDescription,\n+        addedBy: \"user\", // Replace with actual userId\n+      }),\n+    });\n+\n+    if (response.ok) {\n+      fetchItems(); // Refresh items after adding new item\n+      setNewItemName(\"\");\n+      setNewItemDescription(\"\");\n+    } else {\n+      const error = await response.json();\n+      alert(error.error);\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <h1>Best {category} Voting</h1>\n+      <input\n+        type=\"text\"\n+        placeholder=\"Category\"\n+        value={category}\n+        onChange={(e) => setCategory(e.target.value)}\n+      />\n+      <select\n+        value={type}\n+        onChange={(e) =>\n+          setType(e.target.value as \"place\" | \"person\" | \"service\")\n+        }>\n+        <option value=\"place\">Place</option>\n+        <option value=\"person\">Person</option>\n+        <option value=\"service\">Service</option>\n+      </select>\n+      {type === \"place\" && (\n+        <input\n+          type=\"text\"\n+          placeholder=\"Location\"\n+          value={location}\n+          onChange={(e) => setLocation(e.target.value)}\n+        />\n+      )}\n+      <button onClick={fetchItems}>Search</button>\n+\n+      <div>\n+        <h2>Add New Item</h2>\n+        <input\n+          type=\"text\"\n+          placeholder=\"Name\"\n+          value={newItemName}\n+          onChange={(e) => setNewItemName(e.target.value)}\n+        />\n+        <textarea\n+          placeholder=\"Description\"\n+          value={newItemDescription}\n+          onChange={(e) => setNewItemDescription(e.target.value)}\n+        />\n+        <button onClick={addNewItem}>Add Item</button>\n       </div>\n-    </main>\n+\n+      <ul>\n+        {items.map((item) => (\n+          <li key={item._id}>\n+            <h3>{item.name}</h3>\n+            {item.type === \"place\" && (\n+              <>\n+                <p>Location: {item.location}</p>\n+                {item.distance && (\n+                  <p>Distance: {item.distance.toFixed(2)} km</p>\n+                )}\n+                {item.googleUrl && (\n+                  <a\n+                    href={item.googleUrl}\n+                    target=\"_blank\"\n+                    rel=\"noopener noreferrer\">\n+                    View on Google Maps\n+                  </a>\n+                )}\n+              </>\n+            )}\n+            {(item.type === \"person\" || item.type === \"service\") && (\n+              <>\n+                <p>Description: {item.description}</p>\n+                {item.contactInfo && <p>Contact: {item.contactInfo}</p>}\n+              </>\n+            )}\n+            <p>Votes: {item.votes}</p>\n+            <button onClick={() => handleVote(item._id)}>Vote</button>\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n   );\n }\n"
                },
                {
                    "date": 1724782657641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,168 +1,275 @@\n \"use client\";\n \n import { useState, useEffect } from \"react\";\n-import { useRouter } from \"next/navigation\";\n \n-interface Item {\n-  _id: string;\n-  name: string;\n-  category: string;\n-  type: \"place\" | \"person\" | \"service\";\n-  location?: string;\n-  distance?: number;\n-  googleUrl?: string;\n-  description?: string;\n-  contactInfo?: string;\n-  votes: number;\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  language_code?: string;\n }\n \n+declare global {\n+  interface Window {\n+    Telegram: {\n+      WebApp: {\n+        initDataUnsafe: {\n+          user?: TelegramUser;\n+        };\n+        ready: () => void;\n+      };\n+    };\n+  }\n+}\n+\n export default function Home() {\n-  const [items, setItems] = useState<Item[]>([]);\n+  const [user, setUser] = useState<TelegramUser | null>(null);\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [items, setItems] = useState([]);\n   const [category, setCategory] = useState(\"\");\n-  const [type, setType] = useState<\"place\" | \"person\" | \"service\">(\"place\");\n-  const [location, setLocation] = useState(\"\");\n-  const [newItemName, setNewItemName] = useState(\"\");\n-  const [newItemDescription, setNewItemDescription] = useState(\"\");\n-  const router = useRouter();\n+  const [type, setType] = useState(\"place\");\n \n   useEffect(() => {\n-    const token = localStorage.getItem(\"token\");\n-    if (!token) {\n-      router.push(\"/login\");\n+    if (window.Telegram && window.Telegram.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready();\n+      if (webApp.initDataUnsafe && webApp.initDataUnsafe.user) {\n+        const tUser = webApp.initDataUnsafe.user;\n+        setUser(tUser);\n+      } else {\n+        console.error(\"User data is not available.\");\n+      }\n+    } else {\n+      console.error(\"Telegram WebApp is not initialized.\");\n     }\n-  }, [router]);\n+    setIsLoading(false);\n+  }, []);\n \n   const fetchItems = async () => {\n+    if (!user) return;\n     const response = await fetch(\n-      `/api/items?category=${category}&type=${type}${\n-        location ? `&location=${location}` : \"\"\n-      }`\n+      `/api/items?category=${category}&type=${type}`\n     );\n-    const data = await response.json();\n-    setItems(data);\n+    if (response.ok) {\n+      const data = await response.json();\n+      setItems(data);\n+    }\n   };\n \n   const handleVote = async (itemId: string) => {\n-    const token = localStorage.getItem(\"token\");\n+    if (!user) return;\n     const response = await fetch(\"/api/vote\", {\n       method: \"POST\",\n       headers: {\n         \"Content-Type\": \"application/json\",\n-        Authorization: `Bearer ${token}`,\n       },\n-      body: JSON.stringify({ itemId, category }),\n+      body: JSON.stringify({ itemId, category, userId: user.id }),\n     });\n-\n     if (response.ok) {\n-      fetchItems(); // Refresh items after voting\n-    } else {\n-      const error = await response.json();\n-      alert(error.error);\n+      fetchItems();\n     }\n   };\n \n-  const addNewItem = async () => {\n-    const token = localStorage.getItem(\"token\");\n-    const response = await fetch(\"/api/items\", {\n-      method: \"POST\",\n-      headers: {\n-        \"Content-Type\": \"application/json\",\n-        Authorization: `Bearer ${token}`,\n-      },\n-      body: JSON.stringify({\n-        name: newItemName,\n-        category,\n-        type,\n-        description: newItemDescription,\n-        addedBy: \"user\", // Replace with actual userId\n-      }),\n-    });\n+  if (isLoading) {\n+    return <div>Loading...</div>;\n+  }\n \n-    if (response.ok) {\n-      fetchItems(); // Refresh items after adding new item\n-      setNewItemName(\"\");\n-      setNewItemDescription(\"\");\n-    } else {\n-      const error = await response.json();\n-      alert(error.error);\n-    }\n-  };\n+  if (!user) {\n+    return <div>Please open this app from Telegram.</div>;\n+  }\n \n   return (\n     <div>\n-      <h1>Best {category} Voting</h1>\n+      <h1>Welcome, {user.first_name}!</h1>\n       <input\n         type=\"text\"\n-        placeholder=\"Category\"\n         value={category}\n         onChange={(e) => setCategory(e.target.value)}\n+        placeholder=\"Enter category\"\n       />\n-      <select\n-        value={type}\n-        onChange={(e) =>\n-          setType(e.target.value as \"place\" | \"person\" | \"service\")\n-        }>\n+      <select value={type} onChange={(e) => setType(e.target.value)}>\n         <option value=\"place\">Place</option>\n         <option value=\"person\">Person</option>\n         <option value=\"service\">Service</option>\n       </select>\n-      {type === \"place\" && (\n-        <input\n-          type=\"text\"\n-          placeholder=\"Location\"\n-          value={location}\n-          onChange={(e) => setLocation(e.target.value)}\n-        />\n-      )}\n       <button onClick={fetchItems}>Search</button>\n-\n-      <div>\n-        <h2>Add New Item</h2>\n-        <input\n-          type=\"text\"\n-          placeholder=\"Name\"\n-          value={newItemName}\n-          onChange={(e) => setNewItemName(e.target.value)}\n-        />\n-        <textarea\n-          placeholder=\"Description\"\n-          value={newItemDescription}\n-          onChange={(e) => setNewItemDescription(e.target.value)}\n-        />\n-        <button onClick={addNewItem}>Add Item</button>\n-      </div>\n-\n       <ul>\n-        {items.map((item) => (\n+        {items.map((item: any) => (\n           <li key={item._id}>\n-            <h3>{item.name}</h3>\n-            {item.type === \"place\" && (\n-              <>\n-                <p>Location: {item.location}</p>\n-                {item.distance && (\n-                  <p>Distance: {item.distance.toFixed(2)} km</p>\n-                )}\n-                {item.googleUrl && (\n-                  <a\n-                    href={item.googleUrl}\n-                    target=\"_blank\"\n-                    rel=\"noopener noreferrer\">\n-                    View on Google Maps\n-                  </a>\n-                )}\n-              </>\n-            )}\n-            {(item.type === \"person\" || item.type === \"service\") && (\n-              <>\n-                <p>Description: {item.description}</p>\n-                {item.contactInfo && <p>Contact: {item.contactInfo}</p>}\n-              </>\n-            )}\n-            <p>Votes: {item.votes}</p>\n+            {item.name} - Votes: {item.votes}\n             <button onClick={() => handleVote(item._id)}>Vote</button>\n           </li>\n         ))}\n       </ul>\n     </div>\n   );\n }\n+// \"use client\";\n+\n+// import { useState, useEffect } from \"react\";\n+// import { useRouter } from \"next/navigation\";\n+\n+// interface Item {\n+//   _id: string;\n+//   name: string;\n+//   category: string;\n+//   type: \"place\" | \"person\" | \"service\";\n+//   location?: string;\n+//   distance?: number;\n+//   googleUrl?: string;\n+//   description?: string;\n+//   contactInfo?: string;\n+//   votes: number;\n+// }\n+\n+// export default function Home() {\n+//   const [items, setItems] = useState<Item[]>([]);\n+//   const [category, setCategory] = useState(\"\");\n+//   const [type, setType] = useState<\"place\" | \"person\" | \"service\">(\"place\");\n+//   const [location, setLocation] = useState(\"\");\n+//   const [newItemName, setNewItemName] = useState(\"\");\n+//   const [newItemDescription, setNewItemDescription] = useState(\"\");\n+//   const router = useRouter();\n+\n+//   useEffect(() => {\n+//     const token = localStorage.getItem(\"token\");\n+//     if (!token) {\n+//       router.push(\"/login\");\n+//     }\n+//   }, [router]);\n+\n+//   const fetchItems = async () => {\n+//     const response = await fetch(\n+//       `/api/items?category=${category}&type=${type}${\n+//         location ? `&location=${location}` : \"\"\n+//       }`\n+//     );\n+//     const data = await response.json();\n+//     setItems(data);\n+//   };\n+\n+//   const handleVote = async (itemId: string) => {\n+//     const token = localStorage.getItem(\"token\");\n+//     const response = await fetch(\"/api/vote\", {\n+//       method: \"POST\",\n+//       headers: {\n+//         \"Content-Type\": \"application/json\",\n+//         Authorization: `Bearer ${token}`,\n+//       },\n+//       body: JSON.stringify({ itemId, category }),\n+//     });\n+\n+//     if (response.ok) {\n+//       fetchItems(); // Refresh items after voting\n+//     } else {\n+//       const error = await response.json();\n+//       alert(error.error);\n+//     }\n+//   };\n+\n+//   const addNewItem = async () => {\n+//     const token = localStorage.getItem(\"token\");\n+//     const response = await fetch(\"/api/items\", {\n+//       method: \"POST\",\n+//       headers: {\n+//         \"Content-Type\": \"application/json\",\n+//         Authorization: `Bearer ${token}`,\n+//       },\n+//       body: JSON.stringify({\n+//         name: newItemName,\n+//         category,\n+//         type,\n+//         description: newItemDescription,\n+//         addedBy: \"user\", // Replace with actual userId\n+//       }),\n+//     });\n+\n+//     if (response.ok) {\n+//       fetchItems(); // Refresh items after adding new item\n+//       setNewItemName(\"\");\n+//       setNewItemDescription(\"\");\n+//     } else {\n+//       const error = await response.json();\n+//       alert(error.error);\n+//     }\n+//   };\n+\n+//   return (\n+//     <div>\n+//       <h1>Best {category} Voting</h1>\n+//       <input\n+//         type=\"text\"\n+//         placeholder=\"Category\"\n+//         value={category}\n+//         onChange={(e) => setCategory(e.target.value)}\n+//       />\n+//       <select\n+//         value={type}\n+//         onChange={(e) =>\n+//           setType(e.target.value as \"place\" | \"person\" | \"service\")\n+//         }>\n+//         <option value=\"place\">Place</option>\n+//         <option value=\"person\">Person</option>\n+//         <option value=\"service\">Service</option>\n+//       </select>\n+//       {type === \"place\" && (\n+//         <input\n+//           type=\"text\"\n+//           placeholder=\"Location\"\n+//           value={location}\n+//           onChange={(e) => setLocation(e.target.value)}\n+//         />\n+//       )}\n+//       <button onClick={fetchItems}>Search</button>\n+\n+//       <div>\n+//         <h2>Add New Item</h2>\n+//         <input\n+//           type=\"text\"\n+//           placeholder=\"Name\"\n+//           value={newItemName}\n+//           onChange={(e) => setNewItemName(e.target.value)}\n+//         />\n+//         <textarea\n+//           placeholder=\"Description\"\n+//           value={newItemDescription}\n+//           onChange={(e) => setNewItemDescription(e.target.value)}\n+//         />\n+//         <button onClick={addNewItem}>Add Item</button>\n+//       </div>\n+\n+//       <ul>\n+//         {items.map((item) => (\n+//           <li key={item._id}>\n+//             <h3>{item.name}</h3>\n+//             {item.type === \"place\" && (\n+//               <>\n+//                 <p>Location: {item.location}</p>\n+//                 {item.distance && (\n+//                   <p>Distance: {item.distance.toFixed(2)} km</p>\n+//                 )}\n+//                 {item.googleUrl && (\n+//                   <a\n+//                     href={item.googleUrl}\n+//                     target=\"_blank\"\n+//                     rel=\"noopener noreferrer\">\n+//                     View on Google Maps\n+//                   </a>\n+//                 )}\n+//               </>\n+//             )}\n+//             {(item.type === \"person\" || item.type === \"service\") && (\n+//               <>\n+//                 <p>Description: {item.description}</p>\n+//                 {item.contactInfo && <p>Contact: {item.contactInfo}</p>}\n+//               </>\n+//             )}\n+//             <p>Votes: {item.votes}</p>\n+//             <button onClick={() => handleVote(item._id)}>Vote</button>\n+//           </li>\n+//         ))}\n+//       </ul>\n+//     </div>\n+//   );\n+// }\n"
                },
                {
                    "date": 1724783268518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,265 +11,360 @@\n }\n \n declare global {\n   interface Window {\n-    Telegram: {\n-      WebApp: {\n+    Telegram?: {\n+      WebApp?: {\n         initDataUnsafe: {\n           user?: TelegramUser;\n         };\n         ready: () => void;\n+        initData: string;\n+        initDataUnsafe: any;\n       };\n     };\n   }\n }\n \n export default function Home() {\n   const [user, setUser] = useState<TelegramUser | null>(null);\n   const [isLoading, setIsLoading] = useState(true);\n-  const [items, setItems] = useState([]);\n-  const [category, setCategory] = useState(\"\");\n-  const [type, setType] = useState(\"place\");\n+  const [debugInfo, setDebugInfo] = useState<string>(\"\");\n \n   useEffect(() => {\n-    if (window.Telegram && window.Telegram.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready();\n-      if (webApp.initDataUnsafe && webApp.initDataUnsafe.user) {\n-        const tUser = webApp.initDataUnsafe.user;\n-        setUser(tUser);\n+    let info = \"\";\n+\n+    if (typeof window !== \"undefined\") {\n+      info += \"Window object is available.\\n\";\n+\n+      if (window.Telegram) {\n+        info += \"Telegram object is available.\\n\";\n+\n+        if (window.Telegram.WebApp) {\n+          info += \"WebApp object is available.\\n\";\n+          info += `initData: ${window.Telegram.WebApp.initData}\\n`;\n+          info += `initDataUnsafe: ${JSON.stringify(\n+            window.Telegram.WebApp.initDataUnsafe,\n+            null,\n+            2\n+          )}\\n`;\n+\n+          window.Telegram.WebApp.ready();\n+\n+          if (\n+            window.Telegram.WebApp.initDataUnsafe &&\n+            window.Telegram.WebApp.initDataUnsafe.user\n+          ) {\n+            const tUser = window.Telegram.WebApp.initDataUnsafe.user;\n+            setUser(tUser);\n+            info += `User data: ${JSON.stringify(tUser, null, 2)}\\n`;\n+          } else {\n+            info += \"User data is not available in initDataUnsafe.\\n\";\n+          }\n+        } else {\n+          info += \"WebApp object is not available.\\n\";\n+        }\n       } else {\n-        console.error(\"User data is not available.\");\n+        info += \"Telegram object is not available.\\n\";\n       }\n     } else {\n-      console.error(\"Telegram WebApp is not initialized.\");\n+      info += \"Window object is not available (server-side rendering).\\n\";\n     }\n+\n+    setDebugInfo(info);\n     setIsLoading(false);\n   }, []);\n \n-  const fetchItems = async () => {\n-    if (!user) return;\n-    const response = await fetch(\n-      `/api/items?category=${category}&type=${type}`\n-    );\n-    if (response.ok) {\n-      const data = await response.json();\n-      setItems(data);\n-    }\n-  };\n-\n-  const handleVote = async (itemId: string) => {\n-    if (!user) return;\n-    const response = await fetch(\"/api/vote\", {\n-      method: \"POST\",\n-      headers: {\n-        \"Content-Type\": \"application/json\",\n-      },\n-      body: JSON.stringify({ itemId, category, userId: user.id }),\n-    });\n-    if (response.ok) {\n-      fetchItems();\n-    }\n-  };\n-\n   if (isLoading) {\n     return <div>Loading...</div>;\n   }\n \n-  if (!user) {\n-    return <div>Please open this app from Telegram.</div>;\n-  }\n-\n   return (\n     <div>\n-      <h1>Welcome, {user.first_name}!</h1>\n-      <input\n-        type=\"text\"\n-        value={category}\n-        onChange={(e) => setCategory(e.target.value)}\n-        placeholder=\"Enter category\"\n-      />\n-      <select value={type} onChange={(e) => setType(e.target.value)}>\n-        <option value=\"place\">Place</option>\n-        <option value=\"person\">Person</option>\n-        <option value=\"service\">Service</option>\n-      </select>\n-      <button onClick={fetchItems}>Search</button>\n-      <ul>\n-        {items.map((item: any) => (\n-          <li key={item._id}>\n-            {item.name} - Votes: {item.votes}\n-            <button onClick={() => handleVote(item._id)}>Vote</button>\n-          </li>\n-        ))}\n-      </ul>\n+      <h1>Telegram WebApp Debug</h1>\n+      {user ? (\n+        <div>\n+          <h2>Welcome, {user.first_name}!</h2>\n+          <pre>{JSON.stringify(user, null, 2)}</pre>\n+        </div>\n+      ) : (\n+        <div>No user data available</div>\n+      )}\n+      <h3>Debug Information:</h3>\n+      <pre>{debugInfo}</pre>\n     </div>\n   );\n-}\n-// \"use client\";\n+} // \"use client\";\n \n // import { useState, useEffect } from \"react\";\n-// import { useRouter } from \"next/navigation\";\n \n-// interface Item {\n-//   _id: string;\n-//   name: string;\n-//   category: string;\n-//   type: \"place\" | \"person\" | \"service\";\n-//   location?: string;\n-//   distance?: number;\n-//   googleUrl?: string;\n-//   description?: string;\n-//   contactInfo?: string;\n-//   votes: number;\n+// interface TelegramUser {\n+//   id: number;\n+//   first_name: string;\n+//   last_name?: string;\n+//   username?: string;\n+//   language_code?: string;\n // }\n \n+// declare global {\n+//   interface Window {\n+//     Telegram: {\n+//       WebApp: {\n+//         initDataUnsafe: {\n+//           user?: TelegramUser;\n+//         };\n+//         ready: () => void;\n+//       };\n+//     };\n+//   }\n+// }\n+\n // export default function Home() {\n-//   const [items, setItems] = useState<Item[]>([]);\n+//   const [user, setUser] = useState<TelegramUser | null>(null);\n+//   const [isLoading, setIsLoading] = useState(true);\n+//   const [items, setItems] = useState([]);\n //   const [category, setCategory] = useState(\"\");\n-//   const [type, setType] = useState<\"place\" | \"person\" | \"service\">(\"place\");\n-//   const [location, setLocation] = useState(\"\");\n-//   const [newItemName, setNewItemName] = useState(\"\");\n-//   const [newItemDescription, setNewItemDescription] = useState(\"\");\n-//   const router = useRouter();\n+//   const [type, setType] = useState(\"place\");\n \n //   useEffect(() => {\n-//     const token = localStorage.getItem(\"token\");\n-//     if (!token) {\n-//       router.push(\"/login\");\n+//     if (window.Telegram && window.Telegram.WebApp) {\n+//       const webApp = window.Telegram.WebApp;\n+//       webApp.ready();\n+//       if (webApp.initDataUnsafe && webApp.initDataUnsafe.user) {\n+//         const tUser = webApp.initDataUnsafe.user;\n+//         setUser(tUser);\n+//       } else {\n+//         console.error(\"User data is not available.\");\n+//       }\n+//     } else {\n+//       console.error(\"Telegram WebApp is not initialized.\");\n //     }\n-//   }, [router]);\n+//     setIsLoading(false);\n+//   }, []);\n \n //   const fetchItems = async () => {\n+//     if (!user) return;\n //     const response = await fetch(\n-//       `/api/items?category=${category}&type=${type}${\n-//         location ? `&location=${location}` : \"\"\n-//       }`\n+//       `/api/items?category=${category}&type=${type}`\n //     );\n-//     const data = await response.json();\n-//     setItems(data);\n+//     if (response.ok) {\n+//       const data = await response.json();\n+//       setItems(data);\n+//     }\n //   };\n \n //   const handleVote = async (itemId: string) => {\n-//     const token = localStorage.getItem(\"token\");\n+//     if (!user) return;\n //     const response = await fetch(\"/api/vote\", {\n //       method: \"POST\",\n //       headers: {\n //         \"Content-Type\": \"application/json\",\n-//         Authorization: `Bearer ${token}`,\n //       },\n-//       body: JSON.stringify({ itemId, category }),\n+//       body: JSON.stringify({ itemId, category, userId: user.id }),\n //     });\n-\n //     if (response.ok) {\n-//       fetchItems(); // Refresh items after voting\n-//     } else {\n-//       const error = await response.json();\n-//       alert(error.error);\n+//       fetchItems();\n //     }\n //   };\n \n-//   const addNewItem = async () => {\n-//     const token = localStorage.getItem(\"token\");\n-//     const response = await fetch(\"/api/items\", {\n-//       method: \"POST\",\n-//       headers: {\n-//         \"Content-Type\": \"application/json\",\n-//         Authorization: `Bearer ${token}`,\n-//       },\n-//       body: JSON.stringify({\n-//         name: newItemName,\n-//         category,\n-//         type,\n-//         description: newItemDescription,\n-//         addedBy: \"user\", // Replace with actual userId\n-//       }),\n-//     });\n+//   if (isLoading) {\n+//     return <div>Loading...</div>;\n+//   }\n \n-//     if (response.ok) {\n-//       fetchItems(); // Refresh items after adding new item\n-//       setNewItemName(\"\");\n-//       setNewItemDescription(\"\");\n-//     } else {\n-//       const error = await response.json();\n-//       alert(error.error);\n-//     }\n-//   };\n+//   if (!user) {\n+//     return <div>Please open this app from Telegram.</div>;\n+//   }\n \n //   return (\n //     <div>\n-//       <h1>Best {category} Voting</h1>\n+//       <h1>Welcome, {user.first_name}!</h1>\n //       <input\n //         type=\"text\"\n-//         placeholder=\"Category\"\n //         value={category}\n //         onChange={(e) => setCategory(e.target.value)}\n+//         placeholder=\"Enter category\"\n //       />\n-//       <select\n-//         value={type}\n-//         onChange={(e) =>\n-//           setType(e.target.value as \"place\" | \"person\" | \"service\")\n-//         }>\n+//       <select value={type} onChange={(e) => setType(e.target.value)}>\n //         <option value=\"place\">Place</option>\n //         <option value=\"person\">Person</option>\n //         <option value=\"service\">Service</option>\n //       </select>\n-//       {type === \"place\" && (\n-//         <input\n-//           type=\"text\"\n-//           placeholder=\"Location\"\n-//           value={location}\n-//           onChange={(e) => setLocation(e.target.value)}\n-//         />\n-//       )}\n //       <button onClick={fetchItems}>Search</button>\n-\n-//       <div>\n-//         <h2>Add New Item</h2>\n-//         <input\n-//           type=\"text\"\n-//           placeholder=\"Name\"\n-//           value={newItemName}\n-//           onChange={(e) => setNewItemName(e.target.value)}\n-//         />\n-//         <textarea\n-//           placeholder=\"Description\"\n-//           value={newItemDescription}\n-//           onChange={(e) => setNewItemDescription(e.target.value)}\n-//         />\n-//         <button onClick={addNewItem}>Add Item</button>\n-//       </div>\n-\n //       <ul>\n-//         {items.map((item) => (\n+//         {items.map((item: any) => (\n //           <li key={item._id}>\n-//             <h3>{item.name}</h3>\n-//             {item.type === \"place\" && (\n-//               <>\n-//                 <p>Location: {item.location}</p>\n-//                 {item.distance && (\n-//                   <p>Distance: {item.distance.toFixed(2)} km</p>\n-//                 )}\n-//                 {item.googleUrl && (\n-//                   <a\n-//                     href={item.googleUrl}\n-//                     target=\"_blank\"\n-//                     rel=\"noopener noreferrer\">\n-//                     View on Google Maps\n-//                   </a>\n-//                 )}\n-//               </>\n-//             )}\n-//             {(item.type === \"person\" || item.type === \"service\") && (\n-//               <>\n-//                 <p>Description: {item.description}</p>\n-//                 {item.contactInfo && <p>Contact: {item.contactInfo}</p>}\n-//               </>\n-//             )}\n-//             <p>Votes: {item.votes}</p>\n+//             {item.name} - Votes: {item.votes}\n //             <button onClick={() => handleVote(item._id)}>Vote</button>\n //           </li>\n //         ))}\n //       </ul>\n //     </div>\n //   );\n // }\n+// // \"use client\";\n+\n+// // import { useState, useEffect } from \"react\";\n+// // import { useRouter } from \"next/navigation\";\n+\n+// // interface Item {\n+// //   _id: string;\n+// //   name: string;\n+// //   category: string;\n+// //   type: \"place\" | \"person\" | \"service\";\n+// //   location?: string;\n+// //   distance?: number;\n+// //   googleUrl?: string;\n+// //   description?: string;\n+// //   contactInfo?: string;\n+// //   votes: number;\n+// // }\n+\n+// // export default function Home() {\n+// //   const [items, setItems] = useState<Item[]>([]);\n+// //   const [category, setCategory] = useState(\"\");\n+// //   const [type, setType] = useState<\"place\" | \"person\" | \"service\">(\"place\");\n+// //   const [location, setLocation] = useState(\"\");\n+// //   const [newItemName, setNewItemName] = useState(\"\");\n+// //   const [newItemDescription, setNewItemDescription] = useState(\"\");\n+// //   const router = useRouter();\n+\n+// //   useEffect(() => {\n+// //     const token = localStorage.getItem(\"token\");\n+// //     if (!token) {\n+// //       router.push(\"/login\");\n+// //     }\n+// //   }, [router]);\n+\n+// //   const fetchItems = async () => {\n+// //     const response = await fetch(\n+// //       `/api/items?category=${category}&type=${type}${\n+// //         location ? `&location=${location}` : \"\"\n+// //       }`\n+// //     );\n+// //     const data = await response.json();\n+// //     setItems(data);\n+// //   };\n+\n+// //   const handleVote = async (itemId: string) => {\n+// //     const token = localStorage.getItem(\"token\");\n+// //     const response = await fetch(\"/api/vote\", {\n+// //       method: \"POST\",\n+// //       headers: {\n+// //         \"Content-Type\": \"application/json\",\n+// //         Authorization: `Bearer ${token}`,\n+// //       },\n+// //       body: JSON.stringify({ itemId, category }),\n+// //     });\n+\n+// //     if (response.ok) {\n+// //       fetchItems(); // Refresh items after voting\n+// //     } else {\n+// //       const error = await response.json();\n+// //       alert(error.error);\n+// //     }\n+// //   };\n+\n+// //   const addNewItem = async () => {\n+// //     const token = localStorage.getItem(\"token\");\n+// //     const response = await fetch(\"/api/items\", {\n+// //       method: \"POST\",\n+// //       headers: {\n+// //         \"Content-Type\": \"application/json\",\n+// //         Authorization: `Bearer ${token}`,\n+// //       },\n+// //       body: JSON.stringify({\n+// //         name: newItemName,\n+// //         category,\n+// //         type,\n+// //         description: newItemDescription,\n+// //         addedBy: \"user\", // Replace with actual userId\n+// //       }),\n+// //     });\n+\n+// //     if (response.ok) {\n+// //       fetchItems(); // Refresh items after adding new item\n+// //       setNewItemName(\"\");\n+// //       setNewItemDescription(\"\");\n+// //     } else {\n+// //       const error = await response.json();\n+// //       alert(error.error);\n+// //     }\n+// //   };\n+\n+// //   return (\n+// //     <div>\n+// //       <h1>Best {category} Voting</h1>\n+// //       <input\n+// //         type=\"text\"\n+// //         placeholder=\"Category\"\n+// //         value={category}\n+// //         onChange={(e) => setCategory(e.target.value)}\n+// //       />\n+// //       <select\n+// //         value={type}\n+// //         onChange={(e) =>\n+// //           setType(e.target.value as \"place\" | \"person\" | \"service\")\n+// //         }>\n+// //         <option value=\"place\">Place</option>\n+// //         <option value=\"person\">Person</option>\n+// //         <option value=\"service\">Service</option>\n+// //       </select>\n+// //       {type === \"place\" && (\n+// //         <input\n+// //           type=\"text\"\n+// //           placeholder=\"Location\"\n+// //           value={location}\n+// //           onChange={(e) => setLocation(e.target.value)}\n+// //         />\n+// //       )}\n+// //       <button onClick={fetchItems}>Search</button>\n+\n+// //       <div>\n+// //         <h2>Add New Item</h2>\n+// //         <input\n+// //           type=\"text\"\n+// //           placeholder=\"Name\"\n+// //           value={newItemName}\n+// //           onChange={(e) => setNewItemName(e.target.value)}\n+// //         />\n+// //         <textarea\n+// //           placeholder=\"Description\"\n+// //           value={newItemDescription}\n+// //           onChange={(e) => setNewItemDescription(e.target.value)}\n+// //         />\n+// //         <button onClick={addNewItem}>Add Item</button>\n+// //       </div>\n+\n+// //       <ul>\n+// //         {items.map((item) => (\n+// //           <li key={item._id}>\n+// //             <h3>{item.name}</h3>\n+// //             {item.type === \"place\" && (\n+// //               <>\n+// //                 <p>Location: {item.location}</p>\n+// //                 {item.distance && (\n+// //                   <p>Distance: {item.distance.toFixed(2)} km</p>\n+// //                 )}\n+// //                 {item.googleUrl && (\n+// //                   <a\n+// //                     href={item.googleUrl}\n+// //                     target=\"_blank\"\n+// //                     rel=\"noopener noreferrer\">\n+// //                     View on Google Maps\n+// //                   </a>\n+// //                 )}\n+// //               </>\n+// //             )}\n+// //             {(item.type === \"person\" || item.type === \"service\") && (\n+// //               <>\n+// //                 <p>Description: {item.description}</p>\n+// //                 {item.contactInfo && <p>Contact: {item.contactInfo}</p>}\n+// //               </>\n+// //             )}\n+// //             <p>Votes: {item.votes}</p>\n+// //             <button onClick={() => handleVote(item._id)}>Vote</button>\n+// //           </li>\n+// //         ))}\n+// //       </ul>\n+// //     </div>\n+// //   );\n+// // }\n"
                },
                {
                    "date": 1724783306963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n declare global {\n   interface Window {\n     Telegram?: {\n       WebApp?: {\n-        initDataUnsafe: {\n+        initDataUnsafe?: {\n           user?: TelegramUser;\n         };\n         ready: () => void;\n         initData: string;\n"
                },
                {
                    "date": 1724783618653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,360 +11,265 @@\n }\n \n declare global {\n   interface Window {\n-    Telegram?: {\n-      WebApp?: {\n-        initDataUnsafe?: {\n+    Telegram: {\n+      WebApp: {\n+        initDataUnsafe: {\n           user?: TelegramUser;\n         };\n         ready: () => void;\n-        initData: string;\n-        initDataUnsafe: any;\n       };\n     };\n   }\n }\n \n export default function Home() {\n   const [user, setUser] = useState<TelegramUser | null>(null);\n   const [isLoading, setIsLoading] = useState(true);\n-  const [debugInfo, setDebugInfo] = useState<string>(\"\");\n+  const [items, setItems] = useState([]);\n+  const [category, setCategory] = useState(\"\");\n+  const [type, setType] = useState(\"place\");\n \n   useEffect(() => {\n-    let info = \"\";\n-\n-    if (typeof window !== \"undefined\") {\n-      info += \"Window object is available.\\n\";\n-\n-      if (window.Telegram) {\n-        info += \"Telegram object is available.\\n\";\n-\n-        if (window.Telegram.WebApp) {\n-          info += \"WebApp object is available.\\n\";\n-          info += `initData: ${window.Telegram.WebApp.initData}\\n`;\n-          info += `initDataUnsafe: ${JSON.stringify(\n-            window.Telegram.WebApp.initDataUnsafe,\n-            null,\n-            2\n-          )}\\n`;\n-\n-          window.Telegram.WebApp.ready();\n-\n-          if (\n-            window.Telegram.WebApp.initDataUnsafe &&\n-            window.Telegram.WebApp.initDataUnsafe.user\n-          ) {\n-            const tUser = window.Telegram.WebApp.initDataUnsafe.user;\n-            setUser(tUser);\n-            info += `User data: ${JSON.stringify(tUser, null, 2)}\\n`;\n-          } else {\n-            info += \"User data is not available in initDataUnsafe.\\n\";\n-          }\n-        } else {\n-          info += \"WebApp object is not available.\\n\";\n-        }\n+    if (window.Telegram && window.Telegram.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready();\n+      if (webApp.initDataUnsafe && webApp.initDataUnsafe.user) {\n+        const tUser = webApp.initDataUnsafe.user;\n+        setUser(tUser);\n       } else {\n-        info += \"Telegram object is not available.\\n\";\n+        console.error(\"User data is not available.\");\n       }\n     } else {\n-      info += \"Window object is not available (server-side rendering).\\n\";\n+      console.error(\"Telegram WebApp is not initialized.\");\n     }\n-\n-    setDebugInfo(info);\n     setIsLoading(false);\n   }, []);\n \n+  const fetchItems = async () => {\n+    if (!user) return;\n+    const response = await fetch(\n+      `/api/items?category=${category}&type=${type}`\n+    );\n+    if (response.ok) {\n+      const data = await response.json();\n+      setItems(data);\n+    }\n+  };\n+\n+  const handleVote = async (itemId: string) => {\n+    if (!user) return;\n+    const response = await fetch(\"/api/vote\", {\n+      method: \"POST\",\n+      headers: {\n+        \"Content-Type\": \"application/json\",\n+      },\n+      body: JSON.stringify({ itemId, category, userId: user.id }),\n+    });\n+    if (response.ok) {\n+      fetchItems();\n+    }\n+  };\n+\n   if (isLoading) {\n     return <div>Loading...</div>;\n   }\n \n+  if (!user) {\n+    return <div>Please open this app from Telegram.</div>;\n+  }\n+\n   return (\n     <div>\n-      <h1>Telegram WebApp Debug</h1>\n-      {user ? (\n-        <div>\n-          <h2>Welcome, {user.first_name}!</h2>\n-          <pre>{JSON.stringify(user, null, 2)}</pre>\n-        </div>\n-      ) : (\n-        <div>No user data available</div>\n-      )}\n-      <h3>Debug Information:</h3>\n-      <pre>{debugInfo}</pre>\n+      <h1>Welcome, {user.first_name}!</h1>\n+      <input\n+        type=\"text\"\n+        value={category}\n+        onChange={(e) => setCategory(e.target.value)}\n+        placeholder=\"Enter category\"\n+      />\n+      <select value={type} onChange={(e) => setType(e.target.value)}>\n+        <option value=\"place\">Place</option>\n+        <option value=\"person\">Person</option>\n+        <option value=\"service\">Service</option>\n+      </select>\n+      <button onClick={fetchItems}>Search</button>\n+      <ul>\n+        {items.map((item: any) => (\n+          <li key={item._id}>\n+            {item.name} - Votes: {item.votes}\n+            <button onClick={() => handleVote(item._id)}>Vote</button>\n+          </li>\n+        ))}\n+      </ul>\n     </div>\n   );\n-} // \"use client\";\n+}\n+// \"use client\";\n \n // import { useState, useEffect } from \"react\";\n+// import { useRouter } from \"next/navigation\";\n \n-// interface TelegramUser {\n-//   id: number;\n-//   first_name: string;\n-//   last_name?: string;\n-//   username?: string;\n-//   language_code?: string;\n+// interface Item {\n+//   _id: string;\n+//   name: string;\n+//   category: string;\n+//   type: \"place\" | \"person\" | \"service\";\n+//   location?: string;\n+//   distance?: number;\n+//   googleUrl?: string;\n+//   description?: string;\n+//   contactInfo?: string;\n+//   votes: number;\n // }\n \n-// declare global {\n-//   interface Window {\n-//     Telegram: {\n-//       WebApp: {\n-//         initDataUnsafe: {\n-//           user?: TelegramUser;\n-//         };\n-//         ready: () => void;\n-//       };\n-//     };\n-//   }\n-// }\n-\n // export default function Home() {\n-//   const [user, setUser] = useState<TelegramUser | null>(null);\n-//   const [isLoading, setIsLoading] = useState(true);\n-//   const [items, setItems] = useState([]);\n+//   const [items, setItems] = useState<Item[]>([]);\n //   const [category, setCategory] = useState(\"\");\n-//   const [type, setType] = useState(\"place\");\n+//   const [type, setType] = useState<\"place\" | \"person\" | \"service\">(\"place\");\n+//   const [location, setLocation] = useState(\"\");\n+//   const [newItemName, setNewItemName] = useState(\"\");\n+//   const [newItemDescription, setNewItemDescription] = useState(\"\");\n+//   const router = useRouter();\n \n //   useEffect(() => {\n-//     if (window.Telegram && window.Telegram.WebApp) {\n-//       const webApp = window.Telegram.WebApp;\n-//       webApp.ready();\n-//       if (webApp.initDataUnsafe && webApp.initDataUnsafe.user) {\n-//         const tUser = webApp.initDataUnsafe.user;\n-//         setUser(tUser);\n-//       } else {\n-//         console.error(\"User data is not available.\");\n-//       }\n-//     } else {\n-//       console.error(\"Telegram WebApp is not initialized.\");\n+//     const token = localStorage.getItem(\"token\");\n+//     if (!token) {\n+//       router.push(\"/login\");\n //     }\n-//     setIsLoading(false);\n-//   }, []);\n+//   }, [router]);\n \n //   const fetchItems = async () => {\n-//     if (!user) return;\n //     const response = await fetch(\n-//       `/api/items?category=${category}&type=${type}`\n+//       `/api/items?category=${category}&type=${type}${\n+//         location ? `&location=${location}` : \"\"\n+//       }`\n //     );\n-//     if (response.ok) {\n-//       const data = await response.json();\n-//       setItems(data);\n-//     }\n+//     const data = await response.json();\n+//     setItems(data);\n //   };\n \n //   const handleVote = async (itemId: string) => {\n-//     if (!user) return;\n+//     const token = localStorage.getItem(\"token\");\n //     const response = await fetch(\"/api/vote\", {\n //       method: \"POST\",\n //       headers: {\n //         \"Content-Type\": \"application/json\",\n+//         Authorization: `Bearer ${token}`,\n //       },\n-//       body: JSON.stringify({ itemId, category, userId: user.id }),\n+//       body: JSON.stringify({ itemId, category }),\n //     });\n+\n //     if (response.ok) {\n-//       fetchItems();\n+//       fetchItems(); // Refresh items after voting\n+//     } else {\n+//       const error = await response.json();\n+//       alert(error.error);\n //     }\n //   };\n \n-//   if (isLoading) {\n-//     return <div>Loading...</div>;\n-//   }\n+//   const addNewItem = async () => {\n+//     const token = localStorage.getItem(\"token\");\n+//     const response = await fetch(\"/api/items\", {\n+//       method: \"POST\",\n+//       headers: {\n+//         \"Content-Type\": \"application/json\",\n+//         Authorization: `Bearer ${token}`,\n+//       },\n+//       body: JSON.stringify({\n+//         name: newItemName,\n+//         category,\n+//         type,\n+//         description: newItemDescription,\n+//         addedBy: \"user\", // Replace with actual userId\n+//       }),\n+//     });\n \n-//   if (!user) {\n-//     return <div>Please open this app from Telegram.</div>;\n-//   }\n+//     if (response.ok) {\n+//       fetchItems(); // Refresh items after adding new item\n+//       setNewItemName(\"\");\n+//       setNewItemDescription(\"\");\n+//     } else {\n+//       const error = await response.json();\n+//       alert(error.error);\n+//     }\n+//   };\n \n //   return (\n //     <div>\n-//       <h1>Welcome, {user.first_name}!</h1>\n+//       <h1>Best {category} Voting</h1>\n //       <input\n //         type=\"text\"\n+//         placeholder=\"Category\"\n //         value={category}\n //         onChange={(e) => setCategory(e.target.value)}\n-//         placeholder=\"Enter category\"\n //       />\n-//       <select value={type} onChange={(e) => setType(e.target.value)}>\n+//       <select\n+//         value={type}\n+//         onChange={(e) =>\n+//           setType(e.target.value as \"place\" | \"person\" | \"service\")\n+//         }>\n //         <option value=\"place\">Place</option>\n //         <option value=\"person\">Person</option>\n //         <option value=\"service\">Service</option>\n //       </select>\n+//       {type === \"place\" && (\n+//         <input\n+//           type=\"text\"\n+//           placeholder=\"Location\"\n+//           value={location}\n+//           onChange={(e) => setLocation(e.target.value)}\n+//         />\n+//       )}\n //       <button onClick={fetchItems}>Search</button>\n+\n+//       <div>\n+//         <h2>Add New Item</h2>\n+//         <input\n+//           type=\"text\"\n+//           placeholder=\"Name\"\n+//           value={newItemName}\n+//           onChange={(e) => setNewItemName(e.target.value)}\n+//         />\n+//         <textarea\n+//           placeholder=\"Description\"\n+//           value={newItemDescription}\n+//           onChange={(e) => setNewItemDescription(e.target.value)}\n+//         />\n+//         <button onClick={addNewItem}>Add Item</button>\n+//       </div>\n+\n //       <ul>\n-//         {items.map((item: any) => (\n+//         {items.map((item) => (\n //           <li key={item._id}>\n-//             {item.name} - Votes: {item.votes}\n+//             <h3>{item.name}</h3>\n+//             {item.type === \"place\" && (\n+//               <>\n+//                 <p>Location: {item.location}</p>\n+//                 {item.distance && (\n+//                   <p>Distance: {item.distance.toFixed(2)} km</p>\n+//                 )}\n+//                 {item.googleUrl && (\n+//                   <a\n+//                     href={item.googleUrl}\n+//                     target=\"_blank\"\n+//                     rel=\"noopener noreferrer\">\n+//                     View on Google Maps\n+//                   </a>\n+//                 )}\n+//               </>\n+//             )}\n+//             {(item.type === \"person\" || item.type === \"service\") && (\n+//               <>\n+//                 <p>Description: {item.description}</p>\n+//                 {item.contactInfo && <p>Contact: {item.contactInfo}</p>}\n+//               </>\n+//             )}\n+//             <p>Votes: {item.votes}</p>\n //             <button onClick={() => handleVote(item._id)}>Vote</button>\n //           </li>\n //         ))}\n //       </ul>\n //     </div>\n //   );\n // }\n-// // \"use client\";\n-\n-// // import { useState, useEffect } from \"react\";\n-// // import { useRouter } from \"next/navigation\";\n-\n-// // interface Item {\n-// //   _id: string;\n-// //   name: string;\n-// //   category: string;\n-// //   type: \"place\" | \"person\" | \"service\";\n-// //   location?: string;\n-// //   distance?: number;\n-// //   googleUrl?: string;\n-// //   description?: string;\n-// //   contactInfo?: string;\n-// //   votes: number;\n-// // }\n-\n-// // export default function Home() {\n-// //   const [items, setItems] = useState<Item[]>([]);\n-// //   const [category, setCategory] = useState(\"\");\n-// //   const [type, setType] = useState<\"place\" | \"person\" | \"service\">(\"place\");\n-// //   const [location, setLocation] = useState(\"\");\n-// //   const [newItemName, setNewItemName] = useState(\"\");\n-// //   const [newItemDescription, setNewItemDescription] = useState(\"\");\n-// //   const router = useRouter();\n-\n-// //   useEffect(() => {\n-// //     const token = localStorage.getItem(\"token\");\n-// //     if (!token) {\n-// //       router.push(\"/login\");\n-// //     }\n-// //   }, [router]);\n-\n-// //   const fetchItems = async () => {\n-// //     const response = await fetch(\n-// //       `/api/items?category=${category}&type=${type}${\n-// //         location ? `&location=${location}` : \"\"\n-// //       }`\n-// //     );\n-// //     const data = await response.json();\n-// //     setItems(data);\n-// //   };\n-\n-// //   const handleVote = async (itemId: string) => {\n-// //     const token = localStorage.getItem(\"token\");\n-// //     const response = await fetch(\"/api/vote\", {\n-// //       method: \"POST\",\n-// //       headers: {\n-// //         \"Content-Type\": \"application/json\",\n-// //         Authorization: `Bearer ${token}`,\n-// //       },\n-// //       body: JSON.stringify({ itemId, category }),\n-// //     });\n-\n-// //     if (response.ok) {\n-// //       fetchItems(); // Refresh items after voting\n-// //     } else {\n-// //       const error = await response.json();\n-// //       alert(error.error);\n-// //     }\n-// //   };\n-\n-// //   const addNewItem = async () => {\n-// //     const token = localStorage.getItem(\"token\");\n-// //     const response = await fetch(\"/api/items\", {\n-// //       method: \"POST\",\n-// //       headers: {\n-// //         \"Content-Type\": \"application/json\",\n-// //         Authorization: `Bearer ${token}`,\n-// //       },\n-// //       body: JSON.stringify({\n-// //         name: newItemName,\n-// //         category,\n-// //         type,\n-// //         description: newItemDescription,\n-// //         addedBy: \"user\", // Replace with actual userId\n-// //       }),\n-// //     });\n-\n-// //     if (response.ok) {\n-// //       fetchItems(); // Refresh items after adding new item\n-// //       setNewItemName(\"\");\n-// //       setNewItemDescription(\"\");\n-// //     } else {\n-// //       const error = await response.json();\n-// //       alert(error.error);\n-// //     }\n-// //   };\n-\n-// //   return (\n-// //     <div>\n-// //       <h1>Best {category} Voting</h1>\n-// //       <input\n-// //         type=\"text\"\n-// //         placeholder=\"Category\"\n-// //         value={category}\n-// //         onChange={(e) => setCategory(e.target.value)}\n-// //       />\n-// //       <select\n-// //         value={type}\n-// //         onChange={(e) =>\n-// //           setType(e.target.value as \"place\" | \"person\" | \"service\")\n-// //         }>\n-// //         <option value=\"place\">Place</option>\n-// //         <option value=\"person\">Person</option>\n-// //         <option value=\"service\">Service</option>\n-// //       </select>\n-// //       {type === \"place\" && (\n-// //         <input\n-// //           type=\"text\"\n-// //           placeholder=\"Location\"\n-// //           value={location}\n-// //           onChange={(e) => setLocation(e.target.value)}\n-// //         />\n-// //       )}\n-// //       <button onClick={fetchItems}>Search</button>\n-\n-// //       <div>\n-// //         <h2>Add New Item</h2>\n-// //         <input\n-// //           type=\"text\"\n-// //           placeholder=\"Name\"\n-// //           value={newItemName}\n-// //           onChange={(e) => setNewItemName(e.target.value)}\n-// //         />\n-// //         <textarea\n-// //           placeholder=\"Description\"\n-// //           value={newItemDescription}\n-// //           onChange={(e) => setNewItemDescription(e.target.value)}\n-// //         />\n-// //         <button onClick={addNewItem}>Add Item</button>\n-// //       </div>\n-\n-// //       <ul>\n-// //         {items.map((item) => (\n-// //           <li key={item._id}>\n-// //             <h3>{item.name}</h3>\n-// //             {item.type === \"place\" && (\n-// //               <>\n-// //                 <p>Location: {item.location}</p>\n-// //                 {item.distance && (\n-// //                   <p>Distance: {item.distance.toFixed(2)} km</p>\n-// //                 )}\n-// //                 {item.googleUrl && (\n-// //                   <a\n-// //                     href={item.googleUrl}\n-// //                     target=\"_blank\"\n-// //                     rel=\"noopener noreferrer\">\n-// //                     View on Google Maps\n-// //                   </a>\n-// //                 )}\n-// //               </>\n-// //             )}\n-// //             {(item.type === \"person\" || item.type === \"service\") && (\n-// //               <>\n-// //                 <p>Description: {item.description}</p>\n-// //                 {item.contactInfo && <p>Contact: {item.contactInfo}</p>}\n-// //               </>\n-// //             )}\n-// //             <p>Votes: {item.votes}</p>\n-// //             <button onClick={() => handleVote(item._id)}>Vote</button>\n-// //           </li>\n-// //         ))}\n-// //       </ul>\n-// //     </div>\n-// //   );\n-// // }\n"
                },
                {
                    "date": 1724843335361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,275 +1,88 @@\n \"use client\";\n \n-import { useState, useEffect } from \"react\";\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import Script from \"next/script\";\n \n interface TelegramUser {\n   id: number;\n   first_name: string;\n   last_name?: string;\n   username?: string;\n-  language_code?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n }\n \n declare global {\n   interface Window {\n-    Telegram: {\n-      WebApp: {\n-        initDataUnsafe: {\n-          user?: TelegramUser;\n-        };\n-        ready: () => void;\n-      };\n+    TelegramLoginWidget: {\n+      dataOnauth: (user: TelegramUser) => void;\n     };\n   }\n }\n \n-export default function Home() {\n+export default function Login() {\n+  const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [items, setItems] = useState([]);\n-  const [category, setCategory] = useState(\"\");\n-  const [type, setType] = useState(\"place\");\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n-    if (window.Telegram && window.Telegram.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready();\n-      if (webApp.initDataUnsafe && webApp.initDataUnsafe.user) {\n-        const tUser = webApp.initDataUnsafe.user;\n-        setUser(tUser);\n-      } else {\n-        console.error(\"User data is not available.\");\n-      }\n-    } else {\n-      console.error(\"Telegram WebApp is not initialized.\");\n-    }\n-    setIsLoading(false);\n-  }, []);\n-\n-  const fetchItems = async () => {\n-    if (!user) return;\n-    const response = await fetch(\n-      `/api/items?category=${category}&type=${type}`\n-    );\n-    if (response.ok) {\n-      const data = await response.json();\n-      setItems(data);\n-    }\n-  };\n-\n-  const handleVote = async (itemId: string) => {\n-    if (!user) return;\n-    const response = await fetch(\"/api/vote\", {\n-      method: \"POST\",\n-      headers: {\n-        \"Content-Type\": \"application/json\",\n+    window.TelegramLoginWidget = {\n+      dataOnauth: (user) => {\n+        console.log(\"Logged in as \", user);\n+        setUser(user);\n+        setIsLoading(true);\n+        setError(null);\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(user),\n+        })\n+          .then((response) => response.json())\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n       },\n-      body: JSON.stringify({ itemId, category, userId: user.id }),\n-    });\n-    if (response.ok) {\n-      fetchItems();\n-    }\n-  };\n+    };\n+  }, [router]);\n \n-  if (isLoading) {\n-    return <div>Loading...</div>;\n-  }\n-\n-  if (!user) {\n-    return <div>Please open this app from Telegram.</div>;\n-  }\n-\n   return (\n-    <div>\n-      <h1>Welcome, {user.first_name}!</h1>\n-      <input\n-        type=\"text\"\n-        value={category}\n-        onChange={(e) => setCategory(e.target.value)}\n-        placeholder=\"Enter category\"\n-      />\n-      <select value={type} onChange={(e) => setType(e.target.value)}>\n-        <option value=\"place\">Place</option>\n-        <option value=\"person\">Person</option>\n-        <option value=\"service\">Service</option>\n-      </select>\n-      <button onClick={fetchItems}>Search</button>\n-      <ul>\n-        {items.map((item: any) => (\n-          <li key={item._id}>\n-            {item.name} - Votes: {item.votes}\n-            <button onClick={() => handleVote(item._id)}>Vote</button>\n-          </li>\n-        ))}\n-      </ul>\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div> // Replace with your preferred spinner component\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : user ? (\n+        <div>Authenticated as: {user.first_name}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            strategy=\"afterInteractive\"\n+          />\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n+            data-request-access=\"write\"></div>\n+        </>\n+      )}\n     </div>\n   );\n }\n-// \"use client\";\n-\n-// import { useState, useEffect } from \"react\";\n-// import { useRouter } from \"next/navigation\";\n-\n-// interface Item {\n-//   _id: string;\n-//   name: string;\n-//   category: string;\n-//   type: \"place\" | \"person\" | \"service\";\n-//   location?: string;\n-//   distance?: number;\n-//   googleUrl?: string;\n-//   description?: string;\n-//   contactInfo?: string;\n-//   votes: number;\n-// }\n-\n-// export default function Home() {\n-//   const [items, setItems] = useState<Item[]>([]);\n-//   const [category, setCategory] = useState(\"\");\n-//   const [type, setType] = useState<\"place\" | \"person\" | \"service\">(\"place\");\n-//   const [location, setLocation] = useState(\"\");\n-//   const [newItemName, setNewItemName] = useState(\"\");\n-//   const [newItemDescription, setNewItemDescription] = useState(\"\");\n-//   const router = useRouter();\n-\n-//   useEffect(() => {\n-//     const token = localStorage.getItem(\"token\");\n-//     if (!token) {\n-//       router.push(\"/login\");\n-//     }\n-//   }, [router]);\n-\n-//   const fetchItems = async () => {\n-//     const response = await fetch(\n-//       `/api/items?category=${category}&type=${type}${\n-//         location ? `&location=${location}` : \"\"\n-//       }`\n-//     );\n-//     const data = await response.json();\n-//     setItems(data);\n-//   };\n-\n-//   const handleVote = async (itemId: string) => {\n-//     const token = localStorage.getItem(\"token\");\n-//     const response = await fetch(\"/api/vote\", {\n-//       method: \"POST\",\n-//       headers: {\n-//         \"Content-Type\": \"application/json\",\n-//         Authorization: `Bearer ${token}`,\n-//       },\n-//       body: JSON.stringify({ itemId, category }),\n-//     });\n-\n-//     if (response.ok) {\n-//       fetchItems(); // Refresh items after voting\n-//     } else {\n-//       const error = await response.json();\n-//       alert(error.error);\n-//     }\n-//   };\n-\n-//   const addNewItem = async () => {\n-//     const token = localStorage.getItem(\"token\");\n-//     const response = await fetch(\"/api/items\", {\n-//       method: \"POST\",\n-//       headers: {\n-//         \"Content-Type\": \"application/json\",\n-//         Authorization: `Bearer ${token}`,\n-//       },\n-//       body: JSON.stringify({\n-//         name: newItemName,\n-//         category,\n-//         type,\n-//         description: newItemDescription,\n-//         addedBy: \"user\", // Replace with actual userId\n-//       }),\n-//     });\n-\n-//     if (response.ok) {\n-//       fetchItems(); // Refresh items after adding new item\n-//       setNewItemName(\"\");\n-//       setNewItemDescription(\"\");\n-//     } else {\n-//       const error = await response.json();\n-//       alert(error.error);\n-//     }\n-//   };\n-\n-//   return (\n-//     <div>\n-//       <h1>Best {category} Voting</h1>\n-//       <input\n-//         type=\"text\"\n-//         placeholder=\"Category\"\n-//         value={category}\n-//         onChange={(e) => setCategory(e.target.value)}\n-//       />\n-//       <select\n-//         value={type}\n-//         onChange={(e) =>\n-//           setType(e.target.value as \"place\" | \"person\" | \"service\")\n-//         }>\n-//         <option value=\"place\">Place</option>\n-//         <option value=\"person\">Person</option>\n-//         <option value=\"service\">Service</option>\n-//       </select>\n-//       {type === \"place\" && (\n-//         <input\n-//           type=\"text\"\n-//           placeholder=\"Location\"\n-//           value={location}\n-//           onChange={(e) => setLocation(e.target.value)}\n-//         />\n-//       )}\n-//       <button onClick={fetchItems}>Search</button>\n-\n-//       <div>\n-//         <h2>Add New Item</h2>\n-//         <input\n-//           type=\"text\"\n-//           placeholder=\"Name\"\n-//           value={newItemName}\n-//           onChange={(e) => setNewItemName(e.target.value)}\n-//         />\n-//         <textarea\n-//           placeholder=\"Description\"\n-//           value={newItemDescription}\n-//           onChange={(e) => setNewItemDescription(e.target.value)}\n-//         />\n-//         <button onClick={addNewItem}>Add Item</button>\n-//       </div>\n-\n-//       <ul>\n-//         {items.map((item) => (\n-//           <li key={item._id}>\n-//             <h3>{item.name}</h3>\n-//             {item.type === \"place\" && (\n-//               <>\n-//                 <p>Location: {item.location}</p>\n-//                 {item.distance && (\n-//                   <p>Distance: {item.distance.toFixed(2)} km</p>\n-//                 )}\n-//                 {item.googleUrl && (\n-//                   <a\n-//                     href={item.googleUrl}\n-//                     target=\"_blank\"\n-//                     rel=\"noopener noreferrer\">\n-//                     View on Google Maps\n-//                   </a>\n-//                 )}\n-//               </>\n-//             )}\n-//             {(item.type === \"person\" || item.type === \"service\") && (\n-//               <>\n-//                 <p>Description: {item.description}</p>\n-//                 {item.contactInfo && <p>Contact: {item.contactInfo}</p>}\n-//               </>\n-//             )}\n-//             <p>Votes: {item.votes}</p>\n-//             <button onClick={() => handleVote(item._id)}>Vote</button>\n-//           </li>\n-//         ))}\n-//       </ul>\n-//     </div>\n-//   );\n-// }\n"
                },
                {
                    "date": 1724844882440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,88 +1,79 @@\n \"use client\";\n \n-import { useEffect, useState } from \"react\";\n+import { useState, useEffect } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import Script from \"next/script\";\n \n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n-declare global {\n-  interface Window {\n-    TelegramLoginWidget: {\n-      dataOnauth: (user: TelegramUser) => void;\n-    };\n-  }\n-}\n-\n-export default function Login() {\n+export default function Home() {\n+  const [items, setItems] = useState([]);\n+  const [category, setCategory] = useState(\"\");\n+  const [type, setType] = useState(\"place\");\n   const router = useRouter();\n-  const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n-    window.TelegramLoginWidget = {\n-      dataOnauth: (user) => {\n-        console.log(\"Logged in as \", user);\n-        setUser(user);\n-        setIsLoading(true);\n-        setError(null);\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(user),\n-        })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      },\n-    };\n+    const token = localStorage.getItem(\"token\");\n+    if (!token) {\n+      router.push(\"/login\");\n+    } else {\n+      fetchItems();\n+    }\n   }, [router]);\n \n+  const fetchItems = async () => {\n+    const token = localStorage.getItem(\"token\");\n+    const response = await fetch(\n+      `/api/items?category=${category}&type=${type}`,\n+      {\n+        headers: {\n+          Authorization: `Bearer ${token}`,\n+        },\n+      }\n+    );\n+    if (response.ok) {\n+      const data = await response.json();\n+      setItems(data);\n+    } else if (response.status === 401) {\n+      router.push(\"/login\");\n+    }\n+  };\n+\n+  const handleVote = async (itemId: string) => {\n+    const token = localStorage.getItem(\"token\");\n+    const response = await fetch(\"/api/vote\", {\n+      method: \"POST\",\n+      headers: {\n+        \"Content-Type\": \"application/json\",\n+        Authorization: `Bearer ${token}`,\n+      },\n+      body: JSON.stringify({ itemId, category }),\n+    });\n+    if (response.ok) {\n+      fetchItems();\n+    }\n+  };\n+\n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div> // Replace with your preferred spinner component\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : user ? (\n-        <div>Authenticated as: {user.first_name}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-widget.js?22\"\n-            strategy=\"afterInteractive\"\n-          />\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n-            data-request-access=\"write\"></div>\n-        </>\n-      )}\n+      <h1 className=\"text-4xl mb-4\">Voting App</h1>\n+      <input\n+        type=\"text\"\n+        value={category}\n+        onChange={(e) => setCategory(e.target.value)}\n+        placeholder=\"Enter category\"\n+      />\n+      <select value={type} onChange={(e) => setType(e.target.value)}>\n+        <option value=\"place\">Place</option>\n+        <option value=\"person\">Person</option>\n+        <option value=\"service\">Service</option>\n+      </select>\n+      <button onClick={fetchItems}>Search</button>\n+      <ul>\n+        {items.map((item: any) => (\n+          <li key={item._id}>\n+            {item.name} - Votes: {item.votes}\n+            <button onClick={() => handleVote(item._id)}>Vote</button>\n+          </li>\n+        ))}\n+      </ul>\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1724845500316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,79 +1,74 @@\n \"use client\";\n \n-import { useState, useEffect } from \"react\";\n+import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n+import Script from \"next/script\";\n \n-export default function Home() {\n-  const [items, setItems] = useState([]);\n-  const [category, setCategory] = useState(\"\");\n-  const [type, setType] = useState(\"place\");\n+export default function Login() {\n   const router = useRouter();\n+  const [user, setUser] = useState(null);\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState(null);\n+  const [debugInfo, setDebugInfo] = useState(\"\");\n \n   useEffect(() => {\n-    const token = localStorage.getItem(\"token\");\n-    if (!token) {\n-      router.push(\"/login\");\n-    } else {\n-      fetchItems();\n-    }\n-  }, [router]);\n+    setDebugInfo(`Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`);\n \n-  const fetchItems = async () => {\n-    const token = localStorage.getItem(\"token\");\n-    const response = await fetch(\n-      `/api/items?category=${category}&type=${type}`,\n-      {\n-        headers: {\n-          Authorization: `Bearer ${token}`,\n-        },\n-      }\n-    );\n-    if (response.ok) {\n-      const data = await response.json();\n-      setItems(data);\n-    } else if (response.status === 401) {\n-      router.push(\"/login\");\n-    }\n-  };\n-\n-  const handleVote = async (itemId: string) => {\n-    const token = localStorage.getItem(\"token\");\n-    const response = await fetch(\"/api/vote\", {\n-      method: \"POST\",\n-      headers: {\n-        \"Content-Type\": \"application/json\",\n-        Authorization: `Bearer ${token}`,\n+    window.TelegramLoginWidget = {\n+      dataOnauth: (user) => {\n+        console.log(\"Logged in as \", user);\n+        setUser(user);\n+        setIsLoading(true);\n+        setError(null);\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(user),\n+        })\n+          .then((response) => response.json())\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n       },\n-      body: JSON.stringify({ itemId, category }),\n-    });\n-    if (response.ok) {\n-      fetchItems();\n-    }\n-  };\n+    };\n+  }, [router]);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Voting App</h1>\n-      <input\n-        type=\"text\"\n-        value={category}\n-        onChange={(e) => setCategory(e.target.value)}\n-        placeholder=\"Enter category\"\n-      />\n-      <select value={type} onChange={(e) => setType(e.target.value)}>\n-        <option value=\"place\">Place</option>\n-        <option value=\"person\">Person</option>\n-        <option value=\"service\">Service</option>\n-      </select>\n-      <button onClick={fetchItems}>Search</button>\n-      <ul>\n-        {items.map((item: any) => (\n-          <li key={item._id}>\n-            {item.name} - Votes: {item.votes}\n-            <button onClick={() => handleVote(item._id)}>Vote</button>\n-          </li>\n-        ))}\n-      </ul>\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div>\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : user ? (\n+        <div>Authenticated as: {user.first_name}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            strategy=\"afterInteractive\"\n+          />\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n+            data-request-access=\"write\"></div>\n+          <div>Debug Info: {debugInfo}</div>\n+        </>\n+      )}\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1724845616301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   useEffect(() => {\n     setDebugInfo(`Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`);\n \n     window.TelegramLoginWidget = {\n-      dataOnauth: (user) => {\n+      dataOnauth: (user: TelegramUser) => {\n         console.log(\"Logged in as \", user);\n         setUser(user);\n         setIsLoading(true);\n         setError(null);\n"
                },
                {
                    "date": 1724845629322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n+import { TelegramUser } from \"telegram-login-button\";\n \n export default function Login() {\n   const router = useRouter();\n   const [user, setUser] = useState(null);\n"
                },
                {
                    "date": 1724845639760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n-import { TelegramUser } from \"telegram-login-button\";\n \n export default function Login() {\n   const router = useRouter();\n   const [user, setUser] = useState(null);\n@@ -17,9 +16,9 @@\n \n     window.TelegramLoginWidget = {\n       dataOnauth: (user: TelegramUser) => {\n         console.log(\"Logged in as \", user);\n-        setUser(user);\n+        setUser(user:TelegramUser);\n         setIsLoading(true);\n         setError(null);\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n"
                },
                {
                    "date": 1724845654267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,11 @@\n   useEffect(() => {\n     setDebugInfo(`Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`);\n \n     window.TelegramLoginWidget = {\n-      dataOnauth: (user: TelegramUser) => {\n+      dataOnauth: (user<TelegramUser>) => {\n         console.log(\"Logged in as \", user);\n-        setUser(user:TelegramUser);\n+        setUser(user);\n         setIsLoading(true);\n         setError(null);\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n"
                },
                {
                    "date": 1724845743911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import Script from \"next/script\";\n+\n+export default function Login() {\n+  const router = useRouter();\n+  const [user, setUser] = useState(null);\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState(null);\n+  const [debugInfo, setDebugInfo] = useState(\"\");\n+\n+  useEffect(() => {\n+    setDebugInfo(`Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`);\n+\n+    window.TelegramLoginWidget = {\n+      dataOnauth: (user) => {\n+        console.log(\"Logged in as \", user);\n+        setUser(user);\n+        setIsLoading(true);\n+        setError(null);\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(user),\n+        })\n+          .then((response) => response.json())\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      },\n+    };\n+  }, [router]);\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div>\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : user ? (\n+        <div>Authenticated as: {user.first_name}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            strategy=\"afterInteractive\"\n+          />\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n+            data-request-access=\"write\"></div>\n+          <div>Debug Info: {debugInfo}</div>\n+        </>\n+      )}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1724846018283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import Script from \"next/script\";\n \n export default function Login() {\n   const router = useRouter();\n-  const [user, setUser] = useState(null);\n+  const [user, setUser] = useState<TelegramUser | null>(null);\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState(null);\n   const [debugInfo, setDebugInfo] = useState(\"\");\n \n@@ -71,78 +71,4 @@\n       )}\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import Script from \"next/script\";\n-\n-export default function Login() {\n-  const router = useRouter();\n-  const [user, setUser] = useState(null);\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState(null);\n-  const [debugInfo, setDebugInfo] = useState(\"\");\n-\n-  useEffect(() => {\n-    setDebugInfo(`Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`);\n-\n-    window.TelegramLoginWidget = {\n-      dataOnauth: (user<TelegramUser>) => {\n-        console.log(\"Logged in as \", user);\n-        setUser(user);\n-        setIsLoading(true);\n-        setError(null);\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(user),\n-        })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      },\n-    };\n-  }, [router]);\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div>\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : user ? (\n-        <div>Authenticated as: {user.first_name}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-widget.js?22\"\n-            strategy=\"afterInteractive\"\n-          />\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n-            data-request-access=\"write\"></div>\n-          <div>Debug Info: {debugInfo}</div>\n-        </>\n-      )}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1724846169401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n export default function Login() {\n   const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n   const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState(null);\n+  const [error, setError] = useState<string | null>(null);\n   const [debugInfo, setDebugInfo] = useState(\"\");\n \n   useEffect(() => {\n     setDebugInfo(`Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`);\n"
                },
                {
                    "date": 1724847413428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,74 +1,53 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import Script from \"next/script\";\n+import { verifyTokenAndGetUser } from \"@/app/auth/auth\";\n+import Login from \"./login/page\";\n \n-export default function Login() {\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+export default function Home() {\n   const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-  const [debugInfo, setDebugInfo] = useState(\"\");\n+  const [isLoading, setIsLoading] = useState(true);\n \n   useEffect(() => {\n-    setDebugInfo(`Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`);\n-\n-    window.TelegramLoginWidget = {\n-      dataOnauth: (user) => {\n-        console.log(\"Logged in as \", user);\n-        setUser(user);\n-        setIsLoading(true);\n-        setError(null);\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(user),\n+    const token = localStorage.getItem(\"token\");\n+    if (token) {\n+      verifyTokenAndGetUser(token)\n+        .then((userData) => {\n+          setUser(userData);\n+          setIsLoading(false);\n         })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      },\n-    };\n-  }, [router]);\n+        .catch(() => {\n+          setIsLoading(false);\n+        });\n+    } else {\n+      setIsLoading(false);\n+    }\n+  }, []);\n \n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>; // Replace with your preferred spinner component\n+  }\n+\n+  if (!user) {\n+    return <Login onLogin={setUser} />;\n+  }\n+\n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div>\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : user ? (\n-        <div>Authenticated as: {user.first_name}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-widget.js?22\"\n-            strategy=\"afterInteractive\"\n-          />\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n-            data-request-access=\"write\"></div>\n-          <div>Debug Info: {debugInfo}</div>\n-        </>\n-      )}\n+      <h1 className=\"text-4xl mb-4\">Welcome, {user.first_name}!</h1>\n+      {/* Your app content goes here */}\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1724847425256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,11 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser } from \"@/app/auth/auth\";\n+// import { verifyTokenAndGetUser } from \"@/app/auth/auth\";\n import Login from \"./login/page\";\n+import { verifyTokenAndGetUser } from \"./api/auth/auth\";\n \n interface TelegramUser {\n   id: number;\n   first_name: string;\n"
                },
                {
                    "date": 1724848198307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,11 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n // import { verifyTokenAndGetUser } from \"@/app/auth/auth\";\n+// import Login from \"./login/page\";\n+import { verifyTokenAndGetUser } from \"./api/auth/auth\";\n import Login from \"./login/page\";\n-import { verifyTokenAndGetUser } from \"./api/auth/auth\";\n \n interface TelegramUser {\n   id: number;\n   first_name: string;\n"
                },
                {
                    "date": 1724848349143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n+import { useRouter } from \"next/router\";\n // import { verifyTokenAndGetUser } from \"@/app/auth/auth\";\n // import Login from \"./login/page\";\n import { verifyTokenAndGetUser } from \"./api/auth/auth\";\n import Login from \"./login/page\";\n"
                },
                {
                    "date": 1724848370205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,9 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/router\";\n-// import { verifyTokenAndGetUser } from \"@/app/auth/auth\";\n-// import Login from \"./login/page\";\n-import { verifyTokenAndGetUser } from \"./api/auth/auth\";\n+import { useRouter } from \"next/navigation\";\n+import { verifyTokenAndGetUser } from \"@/app/auth/auth\";\n import Login from \"./login/page\";\n \n interface TelegramUser {\n   id: number;\n"
                },
                {
                    "date": 1724848382308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,74 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser } from \"@/app/auth/auth\";\n-import Login from \"./login/page\";\n+import Script from \"next/script\";\n \n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n-export default function Home() {\n+export default function Login() {\n   const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoading, setIsLoading] = useState(true);\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+  const [debugInfo, setDebugInfo] = useState(\"\");\n \n   useEffect(() => {\n-    const token = localStorage.getItem(\"token\");\n-    if (token) {\n-      verifyTokenAndGetUser(token)\n-        .then((userData) => {\n-          setUser(userData);\n-          setIsLoading(false);\n+    setDebugInfo(`Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`);\n+\n+    window.TelegramLoginWidget = {\n+      dataOnauth: (user) => {\n+        console.log(\"Logged in as \", user);\n+        setUser(user);\n+        setIsLoading(true);\n+        setError(null);\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(user),\n         })\n-        .catch(() => {\n-          setIsLoading(false);\n-        });\n-    } else {\n-      setIsLoading(false);\n-    }\n-  }, []);\n+          .then((response) => response.json())\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      },\n+    };\n+  }, [router]);\n \n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>; // Replace with your preferred spinner component\n-  }\n-\n-  if (!user) {\n-    return <Login onLogin={setUser} />;\n-  }\n-\n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Welcome, {user.first_name}!</h1>\n-      {/* Your app content goes here */}\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div>\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : user ? (\n+        <div>Authenticated as: {user.first_name}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            strategy=\"afterInteractive\"\n+          />\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n+            data-request-access=\"write\"></div>\n+          <div>Debug Info: {debugInfo}</div>\n+        </>\n+      )}\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1724848694051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n+import { useRouter } from \"next/router\";\n import Script from \"next/script\";\n \n export default function Login() {\n   const router = useRouter();\n@@ -63,9 +63,9 @@\n             strategy=\"afterInteractive\"\n           />\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n+            data-onauth=\"TelegramLoginWidget.dataOnauth\"\n             data-request-access=\"write\"></div>\n           <div>Debug Info: {debugInfo}</div>\n         </>\n       )}\n"
                },
                {
                    "date": 1724906591738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/router\";\n+import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n \n export default function Login() {\n   const router = useRouter();\n"
                },
                {
                    "date": 1724926408856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+\"use client\";\n+\n+import { useState, useEffect } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+\n+interface Item {\n+  _id: string;\n+  name: string;\n+  category: string;\n+  type: \"place\" | \"person\" | \"service\";\n+  location?: string;\n+  distance?: number;\n+  googleUrl?: string;\n+  description?: string;\n+  contactInfo?: string;\n+  votes: number;\n+}\n+\n+export default function Home() {\n+  const [items, setItems] = useState<Item[]>([]);\n+  const [category, setCategory] = useState(\"\");\n+  const [type, setType] = useState<\"place\" | \"person\" | \"service\">(\"place\");\n+  const [location, setLocation] = useState(\"\");\n+  const [newItemName, setNewItemName] = useState(\"\");\n+  const [newItemDescription, setNewItemDescription] = useState(\"\");\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem(\"token\");\n+    if (!token) {\n+      router.push(\"/login\");\n+    }\n+  }, [router]);\n+\n+  const fetchItems = async () => {\n+    const response = await fetch(\n+      `/api/items?category=${category}&type=${type}${\n+        location ? `&location=${location}` : \"\"\n+      }`\n+    );\n+    const data = await response.json();\n+    setItems(data);\n+  };\n+\n+  const handleVote = async (itemId: string) => {\n+    const token = localStorage.getItem(\"token\");\n+    const response = await fetch(\"/api/vote\", {\n+      method: \"POST\",\n+      headers: {\n+        \"Content-Type\": \"application/json\",\n+        Authorization: `Bearer ${token}`,\n+      },\n+      body: JSON.stringify({ itemId, category }),\n+    });\n+\n+    if (response.ok) {\n+      fetchItems(); // Refresh items after voting\n+    } else {\n+      const error = await response.json();\n+      alert(error.error);\n+    }\n+  };\n+\n+  const addNewItem = async () => {\n+    const token = localStorage.getItem(\"token\");\n+    const response = await fetch(\"/api/items\", {\n+      method: \"POST\",\n+      headers: {\n+        \"Content-Type\": \"application/json\",\n+        Authorization: `Bearer ${token}`,\n+      },\n+      body: JSON.stringify({\n+        name: newItemName,\n+        category,\n+        type,\n+        description: newItemDescription,\n+        addedBy: \"user\", // Replace with actual userId\n+      }),\n+    });\n+\n+    if (response.ok) {\n+      fetchItems(); // Refresh items after adding new item\n+      setNewItemName(\"\");\n+      setNewItemDescription(\"\");\n+    } else {\n+      const error = await response.json();\n+      alert(error.error);\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <h1>Best {category} Voting</h1>\n+      <input\n+        type=\"text\"\n+        placeholder=\"Category\"\n+        value={category}\n+        onChange={(e) => setCategory(e.target.value)}\n+      />\n+      <select\n+        value={type}\n+        onChange={(e) =>\n+          setType(e.target.value as \"place\" | \"person\" | \"service\")\n+        }>\n+        <option value=\"place\">Place</option>\n+        <option value=\"person\">Person</option>\n+        <option value=\"service\">Service</option>\n+      </select>\n+      {type === \"place\" && (\n+        <input\n+          type=\"text\"\n+          placeholder=\"Location\"\n+          value={location}\n+          onChange={(e) => setLocation(e.target.value)}\n+        />\n+      )}\n+      <button onClick={fetchItems}>Search</button>\n+\n+      <div>\n+        <h2>Add New Item</h2>\n+        <input\n+          type=\"text\"\n+          placeholder=\"Name\"\n+          value={newItemName}\n+          onChange={(e) => setNewItemName(e.target.value)}\n+        />\n+        <textarea\n+          placeholder=\"Description\"\n+          value={newItemDescription}\n+          onChange={(e) => setNewItemDescription(e.target.value)}\n+        />\n+        <button onClick={addNewItem}>Add Item</button>\n+      </div>\n+\n+      <ul>\n+        {items.map((item) => (\n+          <li key={item._id}>\n+            <h3>{item.name}</h3>\n+            {item.type === \"place\" && (\n+              <>\n+                <p>Location: {item.location}</p>\n+                {item.distance && (\n+                  <p>Distance: {item.distance.toFixed(2)} km</p>\n+                )}\n+                {item.googleUrl && (\n+                  <a\n+                    href={item.googleUrl}\n+                    target=\"_blank\"\n+                    rel=\"noopener noreferrer\">\n+                    View on Google Maps\n+                  </a>\n+                )}\n+              </>\n+            )}\n+            {(item.type === \"person\" || item.type === \"service\") && (\n+              <>\n+                <p>Description: {item.description}</p>\n+                {item.contactInfo && <p>Contact: {item.contactInfo}</p>}\n+              </>\n+            )}\n+            <p>Votes: {item.votes}</p>\n+            <button onClick={() => handleVote(item._id)}>Vote</button>\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1724926437737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,174 +1,6 @@\n \"use client\";\n \n-import { useState, useEffect } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-\n-interface Item {\n-  _id: string;\n-  name: string;\n-  category: string;\n-  type: \"place\" | \"person\" | \"service\";\n-  location?: string;\n-  distance?: number;\n-  googleUrl?: string;\n-  description?: string;\n-  contactInfo?: string;\n-  votes: number;\n-}\n-\n-export default function Home() {\n-  const [items, setItems] = useState<Item[]>([]);\n-  const [category, setCategory] = useState(\"\");\n-  const [type, setType] = useState<\"place\" | \"person\" | \"service\">(\"place\");\n-  const [location, setLocation] = useState(\"\");\n-  const [newItemName, setNewItemName] = useState(\"\");\n-  const [newItemDescription, setNewItemDescription] = useState(\"\");\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem(\"token\");\n-    if (!token) {\n-      router.push(\"/login\");\n-    }\n-  }, [router]);\n-\n-  const fetchItems = async () => {\n-    const response = await fetch(\n-      `/api/items?category=${category}&type=${type}${\n-        location ? `&location=${location}` : \"\"\n-      }`\n-    );\n-    const data = await response.json();\n-    setItems(data);\n-  };\n-\n-  const handleVote = async (itemId: string) => {\n-    const token = localStorage.getItem(\"token\");\n-    const response = await fetch(\"/api/vote\", {\n-      method: \"POST\",\n-      headers: {\n-        \"Content-Type\": \"application/json\",\n-        Authorization: `Bearer ${token}`,\n-      },\n-      body: JSON.stringify({ itemId, category }),\n-    });\n-\n-    if (response.ok) {\n-      fetchItems(); // Refresh items after voting\n-    } else {\n-      const error = await response.json();\n-      alert(error.error);\n-    }\n-  };\n-\n-  const addNewItem = async () => {\n-    const token = localStorage.getItem(\"token\");\n-    const response = await fetch(\"/api/items\", {\n-      method: \"POST\",\n-      headers: {\n-        \"Content-Type\": \"application/json\",\n-        Authorization: `Bearer ${token}`,\n-      },\n-      body: JSON.stringify({\n-        name: newItemName,\n-        category,\n-        type,\n-        description: newItemDescription,\n-        addedBy: \"user\", // Replace with actual userId\n-      }),\n-    });\n-\n-    if (response.ok) {\n-      fetchItems(); // Refresh items after adding new item\n-      setNewItemName(\"\");\n-      setNewItemDescription(\"\");\n-    } else {\n-      const error = await response.json();\n-      alert(error.error);\n-    }\n-  };\n-\n-  return (\n-    <div>\n-      <h1>Best {category} Voting</h1>\n-      <input\n-        type=\"text\"\n-        placeholder=\"Category\"\n-        value={category}\n-        onChange={(e) => setCategory(e.target.value)}\n-      />\n-      <select\n-        value={type}\n-        onChange={(e) =>\n-          setType(e.target.value as \"place\" | \"person\" | \"service\")\n-        }>\n-        <option value=\"place\">Place</option>\n-        <option value=\"person\">Person</option>\n-        <option value=\"service\">Service</option>\n-      </select>\n-      {type === \"place\" && (\n-        <input\n-          type=\"text\"\n-          placeholder=\"Location\"\n-          value={location}\n-          onChange={(e) => setLocation(e.target.value)}\n-        />\n-      )}\n-      <button onClick={fetchItems}>Search</button>\n-\n-      <div>\n-        <h2>Add New Item</h2>\n-        <input\n-          type=\"text\"\n-          placeholder=\"Name\"\n-          value={newItemName}\n-          onChange={(e) => setNewItemName(e.target.value)}\n-        />\n-        <textarea\n-          placeholder=\"Description\"\n-          value={newItemDescription}\n-          onChange={(e) => setNewItemDescription(e.target.value)}\n-        />\n-        <button onClick={addNewItem}>Add Item</button>\n-      </div>\n-\n-      <ul>\n-        {items.map((item) => (\n-          <li key={item._id}>\n-            <h3>{item.name}</h3>\n-            {item.type === \"place\" && (\n-              <>\n-                <p>Location: {item.location}</p>\n-                {item.distance && (\n-                  <p>Distance: {item.distance.toFixed(2)} km</p>\n-                )}\n-                {item.googleUrl && (\n-                  <a\n-                    href={item.googleUrl}\n-                    target=\"_blank\"\n-                    rel=\"noopener noreferrer\">\n-                    View on Google Maps\n-                  </a>\n-                )}\n-              </>\n-            )}\n-            {(item.type === \"person\" || item.type === \"service\") && (\n-              <>\n-                <p>Description: {item.description}</p>\n-                {item.contactInfo && <p>Contact: {item.contactInfo}</p>}\n-              </>\n-            )}\n-            <p>Votes: {item.votes}</p>\n-            <button onClick={() => handleVote(item._id)}>Vote</button>\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-}\n-\"use client\";\n-\n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n \n"
                },
                {
                    "date": 1724926768303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,74 +1,53 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import Script from \"next/script\";\n+import { verifyTokenAndGetUser } from \"@/app/auth/auth\";\n+import Login from \"./login/page\";\n \n-export default function Login() {\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+export default function Home() {\n   const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-  const [debugInfo, setDebugInfo] = useState(\"\");\n+  const [isLoading, setIsLoading] = useState(true);\n \n   useEffect(() => {\n-    setDebugInfo(`Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`);\n-\n-    window.TelegramLoginWidget = {\n-      dataOnauth: (user) => {\n-        console.log(\"Logged in as \", user);\n-        setUser(user);\n-        setIsLoading(true);\n-        setError(null);\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(user),\n+    const token = localStorage.getItem(\"token\");\n+    if (token) {\n+      verifyTokenAndGetUser(token)\n+        .then((userData) => {\n+          setUser(userData);\n+          setIsLoading(false);\n         })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      },\n-    };\n-  }, [router]);\n+        .catch(() => {\n+          setIsLoading(false);\n+        });\n+    } else {\n+      setIsLoading(false);\n+    }\n+  }, []);\n \n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n+\n+  if (!user) {\n+    return <Login onLogin={(user) => setUser(user)} />;\n+  }\n+\n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div>\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : user ? (\n-        <div>Authenticated as: {user.first_name}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-widget.js?22\"\n-            strategy=\"afterInteractive\"\n-          />\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth\"\n-            data-request-access=\"write\"></div>\n-          <div>Debug Info: {debugInfo}</div>\n-        </>\n-      )}\n+      <h1 className=\"text-4xl mb-4\">Welcome, {user.first_name}!</h1>\n+      {/* Your app content goes here */}\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1724926789900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   useEffect(() => {\n     const token = localStorage.getItem(\"token\");\n     if (token) {\n       verifyTokenAndGetUser(token)\n-        .then((userData) => {\n+        .then((userData: TelegramUser) => {\n           setUser(userData);\n           setIsLoading(false);\n         })\n         .catch(() => {\n"
                },
                {
                    "date": 1724926798734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,11 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser } from \"@/app/auth/auth\";\n+// import { verifyTokenAndGetUser } from \"@/app/auth/auth\";\n import Login from \"./login/page\";\n+import { verifyTokenAndGetUser } from \"./api/auth/auth\";\n \n interface TelegramUser {\n   id: number;\n   first_name: string;\n"
                },
                {
                    "date": 1724927535498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n \n   if (!user) {\n     return <Login onLogin={(user) => setUser(user)} />;\n   }\n+  console.log(user);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Welcome, {user.first_name}!</h1>\n"
                },
                {
                    "date": 1724927625025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,10 @@\n   const [isLoading, setIsLoading] = useState(true);\n \n   useEffect(() => {\n     const token = localStorage.getItem(\"token\");\n+    console.log(token);\n+\n     if (token) {\n       verifyTokenAndGetUser(token)\n         .then((userData: TelegramUser) => {\n           setUser(userData);\n"
                },
                {
                    "date": 1724927809475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n \n   if (!user) {\n     return <Login onLogin={(user) => setUser(user)} />;\n   }\n-  console.log(user);\n+  console.log(user + \"user\");\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Welcome, {user.first_name}!</h1>\n"
                },
                {
                    "date": 1724928249471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,16 +38,16 @@\n       setIsLoading(false);\n     }\n   }, []);\n \n+  console.log(user + \"user\");\n   if (isLoading) {\n     return <div className=\"spinner\">Loading...</div>;\n   }\n \n   if (!user) {\n     return <Login onLogin={(user) => setUser(user)} />;\n   }\n-  console.log(user + \"user\");\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Welcome, {user.first_name}!</h1>\n"
                },
                {
                    "date": 1724928260978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,9 @@\n     }\n   }, []);\n \n   console.log(user + \"user\");\n+\n   if (isLoading) {\n     return <div className=\"spinner\">Loading...</div>;\n   }\n \n"
                },
                {
                    "date": 1724928305890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,12 +41,15 @@\n \n   console.log(user + \"user\");\n \n   if (isLoading) {\n+    console.log(\"isLoading\");\n     return <div className=\"spinner\">Loading...</div>;\n   }\n \n   if (!user) {\n+    console.log(\"!user\");\n+\n     return <Login onLogin={(user) => setUser(user)} />;\n   }\n \n   return (\n"
                },
                {
                    "date": 1724928534522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,10 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-// import { verifyTokenAndGetUser } from \"@/app/auth/auth\";\n import Login from \"./login/page\";\n-import { verifyTokenAndGetUser } from \"./api/auth/auth\";\n+import { verifyTokenAndGetUser } from \"@/lib/auth\"; // Adjust this import path as needed\n \n interface TelegramUser {\n   id: number;\n   first_name: string;\n@@ -22,34 +21,35 @@\n   const [isLoading, setIsLoading] = useState(true);\n \n   useEffect(() => {\n     const token = localStorage.getItem(\"token\");\n-    console.log(token);\n+    console.log(\"Token:\", token);\n \n     if (token) {\n       verifyTokenAndGetUser(token)\n         .then((userData: TelegramUser) => {\n+          console.log(\"User data:\", userData);\n           setUser(userData);\n-          setIsLoading(false);\n         })\n-        .catch(() => {\n+        .catch((error) => {\n+          console.error(\"Token verification error:\", error);\n+        })\n+        .finally(() => {\n           setIsLoading(false);\n         });\n     } else {\n       setIsLoading(false);\n     }\n   }, []);\n \n-  console.log(user + \"user\");\n+  console.log(\"User:\", user);\n+  console.log(\"isLoading:\", isLoading);\n \n   if (isLoading) {\n-    console.log(\"isLoading\");\n     return <div className=\"spinner\">Loading...</div>;\n   }\n \n   if (!user) {\n-    console.log(\"!user\");\n-\n     return <Login onLogin={(user) => setUser(user)} />;\n   }\n \n   return (\n"
                },
                {
                    "date": 1724928552086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n         .then((userData: TelegramUser) => {\n           console.log(\"User data:\", userData);\n           setUser(userData);\n         })\n-        .catch((error) => {\n+        .catch((error: any) => {\n           console.error(\"Token verification error:\", error);\n         })\n         .finally(() => {\n           setIsLoading(false);\n"
                },
                {
                    "date": 1724928560273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import Login from \"./login/page\";\n+// import { verifyTokenAndGetUser } from \"@/lib/auth\"; // Adjust this import path as needed\n+\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+export default function Home() {\n+  const router = useRouter();\n+  const [user, setUser] = useState<TelegramUser | null>(null);\n+  const [isLoading, setIsLoading] = useState(true);\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem(\"token\");\n+    console.log(\"Token:\", token);\n+\n+    if (token) {\n+      verifyTokenAndGetUser(token)\n+        .then((userData: TelegramUser) => {\n+          console.log(\"User data:\", userData);\n+          setUser(userData);\n+        })\n+        .catch((error: any) => {\n+          console.error(\"Token verification error:\", error);\n+        })\n+        .finally(() => {\n+          setIsLoading(false);\n+        });\n+    } else {\n+      setIsLoading(false);\n+    }\n+  }, []);\n+\n+  console.log(\"User:\", user);\n+  console.log(\"isLoading:\", isLoading);\n+\n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n+\n+  if (!user) {\n+    return <Login onLogin={(user) => setUser(user)} />;\n+  }\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Welcome, {user.first_name}!</h1>\n+      {/* Your app content goes here */}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1724928567033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Login from \"./login/page\";\n+import { verifyTokenAndGetUser } from \"./lib/auth\";\n // import { verifyTokenAndGetUser } from \"@/lib/auth\"; // Adjust this import path as needed\n \n interface TelegramUser {\n   id: number;\n@@ -58,65 +59,4 @@\n       {/* Your app content goes here */}\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import Login from \"./login/page\";\n-import { verifyTokenAndGetUser } from \"@/lib/auth\"; // Adjust this import path as needed\n-\n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n-export default function Home() {\n-  const router = useRouter();\n-  const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoading, setIsLoading] = useState(true);\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem(\"token\");\n-    console.log(\"Token:\", token);\n-\n-    if (token) {\n-      verifyTokenAndGetUser(token)\n-        .then((userData: TelegramUser) => {\n-          console.log(\"User data:\", userData);\n-          setUser(userData);\n-        })\n-        .catch((error: any) => {\n-          console.error(\"Token verification error:\", error);\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    } else {\n-      setIsLoading(false);\n-    }\n-  }, []);\n-\n-  console.log(\"User:\", user);\n-  console.log(\"isLoading:\", isLoading);\n-\n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n-\n-  if (!user) {\n-    return <Login onLogin={(user) => setUser(user)} />;\n-  }\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Welcome, {user.first_name}!</h1>\n-      {/* Your app content goes here */}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1724931215145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import { verifyTokenAndGetUser, TelegramUser } from \"@/lib/auth\";\n+import Login from \"./login/page\";\n+\n+export default function Home() {\n+  const router = useRouter();\n+  const [user, setUser] = useState<TelegramUser | null>(null);\n+  const [isLoading, setIsLoading] = useState(true);\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem(\"token\");\n+    console.log(\"Token:\", token);\n+\n+    if (token) {\n+      verifyTokenAndGetUser(token)\n+        .then((userData: TelegramUser) => {\n+          console.log(\"User data:\", userData);\n+          if (userData) {\n+            setUser(userData);\n+          }\n+          setIsLoading(false);\n+        })\n+        .catch((error) => {\n+          console.error(\"Error verifying token:\", error);\n+          setIsLoading(false);\n+        });\n+    } else {\n+      setIsLoading(false);\n+    }\n+  }, []);\n+\n+  console.log(\"User:\", user);\n+  console.log(\"Is Loading:\", isLoading);\n+\n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n+\n+  if (!user) {\n+    return <Login onLogin={(user) => setUser(user)} />;\n+  }\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Welcome, {user.first_name}!</h1>\n+      {/* Your app content goes here */}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1724931231434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n             setUser(userData);\n           }\n           setIsLoading(false);\n         })\n-        .catch((error) => {\n+        .catch((error: any) => {\n           console.error(\"Error verifying token:\", error);\n           setIsLoading(false);\n         });\n     } else {\n@@ -49,66 +49,4 @@\n       {/* Your app content goes here */}\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import Login from \"./login/page\";\n-import { verifyTokenAndGetUser } from \"./lib/auth\";\n-// import { verifyTokenAndGetUser } from \"@/lib/auth\"; // Adjust this import path as needed\n-\n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n-export default function Home() {\n-  const router = useRouter();\n-  const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoading, setIsLoading] = useState(true);\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem(\"token\");\n-    console.log(\"Token:\", token);\n-\n-    if (token) {\n-      verifyTokenAndGetUser(token)\n-        .then((userData: TelegramUser) => {\n-          console.log(\"User data:\", userData);\n-          setUser(userData);\n-        })\n-        .catch((error: any) => {\n-          console.error(\"Token verification error:\", error);\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    } else {\n-      setIsLoading(false);\n-    }\n-  }, []);\n-\n-  console.log(\"User:\", user);\n-  console.log(\"isLoading:\", isLoading);\n-\n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n-\n-  if (!user) {\n-    return <Login onLogin={(user) => setUser(user)} />;\n-  }\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Welcome, {user.first_name}!</h1>\n-      {/* Your app content goes here */}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1724931286202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser, TelegramUser } from \"@/lib/auth\";\n+import { verifyTokenAndGetUser, TelegramUser } from \"../app/lib/auth\";\n import Login from \"./login/page\";\n \n export default function Home() {\n   const router = useRouter();\n"
                },
                {
                    "date": 1724931300658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     console.log(\"Token:\", token);\n \n     if (token) {\n       verifyTokenAndGetUser(token)\n-        .then((userData: TelegramUser) => {\n+        .then((userData) => {\n           console.log(\"User data:\", userData);\n           if (userData) {\n             setUser(userData);\n           }\n"
                },
                {
                    "date": 1724934702557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,52 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser, TelegramUser } from \"../app/lib/auth\";\n import Login from \"./login/page\";\n+import { verifyTokenAndGetUser } from \"@/lib/auth\";\n \n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n export default function Home() {\n   const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n   const [isLoading, setIsLoading] = useState(true);\n \n   useEffect(() => {\n     const token = localStorage.getItem(\"token\");\n-    console.log(\"Token:\", token);\n-\n     if (token) {\n       verifyTokenAndGetUser(token)\n         .then((userData) => {\n-          console.log(\"User data:\", userData);\n           if (userData) {\n-            setUser(userData);\n+            setUser(userData as TelegramUser);\n           }\n-          setIsLoading(false);\n         })\n-        .catch((error: any) => {\n-          console.error(\"Error verifying token:\", error);\n-          setIsLoading(false);\n-        });\n+        .catch(console.error)\n+        .finally(() => setIsLoading(false));\n     } else {\n       setIsLoading(false);\n     }\n   }, []);\n \n-  console.log(\"User:\", user);\n-  console.log(\"Is Loading:\", isLoading);\n+  const handleLogin = (userData: TelegramUser) => {\n+    setUser(userData);\n+  };\n \n   if (isLoading) {\n     return <div className=\"spinner\">Loading...</div>;\n   }\n \n   if (!user) {\n-    return <Login onLogin={(user) => setUser(user)} />;\n+    return <Login onLogin={handleLogin} />;\n   }\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n"
                },
                {
                    "date": 1724934799486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,10 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Login from \"./login/page\";\n-import { verifyTokenAndGetUser } from \"@/lib/auth\";\n+import { verifyTokenAndGetUser } from \"./lib/auth\";\n+// import { verifyTokenAndGetUser } from \"@/lib/auth\";\n \n interface TelegramUser {\n   id: number;\n   first_name: string;\n"
                },
                {
                    "date": 1724944766269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,42 @@\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/router\";\n+import Login from \"./login/page\";\n+import { verifyTokenAndGetUser } from \"./lib/auth\";\n+\n+export default function Home() {\n+  const router = useRouter();\n+  const [user, setUser] = useState(null);\n+  const [isLoading, setIsLoading] = useState(true);\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem(\"token\");\n+    if (token) {\n+      verifyTokenAndGetUser(token)\n+        .then((userData) => {\n+          setUser(userData);\n+          setIsLoading(false);\n+        })\n+        .catch((error) => {\n+          console.error(error);\n+          setIsLoading(false);\n+        });\n+    } else {\n+      setIsLoading(false);\n+      router.push(\"/login\");\n+    }\n+  }, [router]);\n+\n+  if (isLoading) {\n+    return <div>Loading...</div>;\n+  }\n+\n+  if (!user) {\n+    return <Login onLogin={setUser} />;\n+  }\n+\n+  return (\n+    <div>\n+      Welcome, {user.first_name}!{/* Additional user-specific content */}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1724945128199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,100 +1,18 @@\n import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/router\";\n-import Login from \"./login/page\";\n-import { verifyTokenAndGetUser } from \"./lib/auth\";\n \n-export default function Home() {\n-  const router = useRouter();\n+export default function HomePage() {\n   const [user, setUser] = useState(null);\n-  const [isLoading, setIsLoading] = useState(true);\n \n   useEffect(() => {\n-    const token = localStorage.getItem(\"token\");\n-    if (token) {\n-      verifyTokenAndGetUser(token)\n-        .then((userData) => {\n-          setUser(userData);\n-          setIsLoading(false);\n-        })\n-        .catch((error) => {\n-          console.error(error);\n-          setIsLoading(false);\n-        });\n-    } else {\n-      setIsLoading(false);\n-      router.push(\"/login\");\n+    const userData = localStorage.getItem(\"userData\");\n+    if (userData) {\n+      setUser(JSON.parse(userData));\n     }\n-  }, [router]);\n+  }, []);\n \n-  if (isLoading) {\n-    return <div>Loading...</div>;\n-  }\n-\n-  if (!user) {\n-    return <Login onLogin={setUser} />;\n-  }\n-\n   return (\n     <div>\n-      Welcome, {user.first_name}!{/* Additional user-specific content */}\n+      <h1>Welcome, {user ? user.first_name : \"Guest\"}!</h1>\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import Login from \"./login/page\";\n-import { verifyTokenAndGetUser } from \"./lib/auth\";\n-// import { verifyTokenAndGetUser } from \"@/lib/auth\";\n-\n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n-export default function Home() {\n-  const router = useRouter();\n-  const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoading, setIsLoading] = useState(true);\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem(\"token\");\n-    if (token) {\n-      verifyTokenAndGetUser(token)\n-        .then((userData) => {\n-          if (userData) {\n-            setUser(userData as TelegramUser);\n-          }\n-        })\n-        .catch(console.error)\n-        .finally(() => setIsLoading(false));\n-    } else {\n-      setIsLoading(false);\n-    }\n-  }, []);\n-\n-  const handleLogin = (userData: TelegramUser) => {\n-    setUser(userData);\n-  };\n-\n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n-\n-  if (!user) {\n-    return <Login onLogin={handleLogin} />;\n-  }\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Welcome, {user.first_name}!</h1>\n-      {/* Your app content goes here */}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1725010083197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,52 @@\n+\"use client\";\n+\n import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import { verifyTokenAndGetUser, TelegramUser } from \"../app/lib/auth\";\n+import Login from \"./login/page\";\n \n-export default function HomePage() {\n-  const [user, setUser] = useState(null);\n+export default function Home() {\n+  const router = useRouter();\n+  const [user, setUser] = useState<TelegramUser | null>(null);\n+  const [isLoading, setIsLoading] = useState(true);\n \n   useEffect(() => {\n-    const userData = localStorage.getItem(\"userData\");\n-    if (userData) {\n-      setUser(JSON.parse(userData));\n+    const token = localStorage.getItem(\"token\");\n+    console.log(\"Token:\", token);\n+\n+    if (token) {\n+      verifyTokenAndGetUser(token)\n+        .then((userData) => {\n+          console.log(\"User data:\", userData);\n+          if (userData) {\n+            setUser(userData);\n+          }\n+          setIsLoading(false);\n+        })\n+        .catch((error: any) => {\n+          console.error(\"Error verifying token:\", error);\n+          setIsLoading(false);\n+        });\n+    } else {\n+      setIsLoading(false);\n     }\n   }, []);\n \n+  console.log(\"User:\", user);\n+  console.log(\"Is Loading:\", isLoading);\n+\n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n+\n+  if (!user) {\n+    return <Login onLogin={(user) => setUser(user)} />;\n+  }\n+\n   return (\n-    <div>\n-      <h1>Welcome, {user ? user.first_name : \"Guest\"}!</h1>\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Welcome, {user.first_name}!</h1>\n+      {/* Your app content goes here */}\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1725010101897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     console.log(\"Token:\", token);\n \n     if (token) {\n       verifyTokenAndGetUser(token)\n-        .then((userData) => {\n+        .then((userData: TelegramUser) => {\n           console.log(\"User data:\", userData);\n           if (userData) {\n             setUser(userData);\n           }\n"
                },
                {
                    "date": 1725029636622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     console.log(\"Token:\", token);\n \n     if (token) {\n       verifyTokenAndGetUser(token)\n-        .then((userData: TelegramUser) => {\n+        .then((userData) => {\n           console.log(\"User data:\", userData);\n           if (userData) {\n             setUser(userData);\n           }\n@@ -38,10 +38,14 @@\n   if (isLoading) {\n     return <div className=\"spinner\">Loading...</div>;\n   }\n \n+  const handleLogin = (userData: TelegramUser) => {\n+    setUser(userData);\n+  };\n+\n   if (!user) {\n-    return <Login onLogin={(user) => setUser(user)} />;\n+    return <Login onLogin={handleLogin} />;\n   }\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n"
                },
                {
                    "date": 1725030106041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,20 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser, TelegramUser } from \"../app/lib/auth\";\n+import { verifyTokenAndGetUser } from \"../app/lib/auth\";\n import Login from \"./login/page\";\n \n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n export default function Home() {\n   const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n   const [isLoading, setIsLoading] = useState(true);\n"
                },
                {
                    "date": 1725030119637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,11 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser } from \"../app/lib/auth\";\n+import { verifyTokenAndGetUser, TelegramUser } from \"../app/lib/auth\";\n import Login from \"./login/page\";\n \n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n export default function Home() {\n   const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n   const [isLoading, setIsLoading] = useState(true);\n"
                },
                {
                    "date": 1725038050470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { verifyTokenAndGetUser, TelegramUser } from \"../app/lib/auth\";\n import Login from \"./login/page\";\n \n export default function Home() {\n-  const router = useRouter();\n+  // const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n   const [isLoading, setIsLoading] = useState(true);\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1725048311004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,56 +1,31 @@\n \"use client\";\n \n-import { useEffect, useState } from \"react\";\n+import { useEffect } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser, TelegramUser } from \"../app/lib/auth\";\n-import Login from \"./login/page\";\n+import useTelegramInitData from \"../hooks/useTelegramInitData\";\n \n export default function Home() {\n-  // const router = useRouter();\n-  const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoading, setIsLoading] = useState(true);\n+  const router = useRouter();\n+  const initData = useTelegramInitData();\n \n   useEffect(() => {\n-    const token = localStorage.getItem(\"token\");\n-    console.log(\"Token:\", token);\n-\n-    if (token) {\n-      verifyTokenAndGetUser(token)\n-        .then((userData) => {\n-          console.log(\"User data:\", userData);\n-          if (userData) {\n-            setUser(userData);\n-          }\n-          setIsLoading(false);\n-        })\n-        .catch((error: any) => {\n-          console.error(\"Error verifying token:\", error);\n-          setIsLoading(false);\n-        });\n-    } else {\n-      setIsLoading(false);\n+    if (initData?.user) {\n+      // User is authenticated, you can use initData.user here\n+      console.log(\"User data:\", initData.user);\n+    } else if (initData !== null) {\n+      // Redirect to login if no user data\n+      router.push(\"/login\");\n     }\n-  }, []);\n+  }, [initData, router]);\n \n-  console.log(\"User:\", user);\n-  console.log(\"Is Loading:\", isLoading);\n-\n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n+  if (!initData || !initData.user) {\n+    return <div>Loading...</div>;\n   }\n \n-  const handleLogin = (userData: TelegramUser) => {\n-    setUser(userData);\n-  };\n-\n-  if (!user) {\n-    return <Login onLogin={handleLogin} />;\n-  }\n-\n   return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Welcome, {user.first_name}!</h1>\n-      {/* Your app content goes here */}\n+    <div>\n+      <h1>Welcome, {initData.user.first_name}!</h1>\n+      {/* Rest of your app */}\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1725052906645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,24 +8,31 @@\n   const router = useRouter();\n   const initData = useTelegramInitData();\n \n   useEffect(() => {\n+    if (typeof window !== \"undefined\" && window.Telegram?.WebApp) {\n+      window.Telegram.WebApp.ready();\n+    }\n+  }, []);\n+\n+  useEffect(() => {\n     if (initData?.user) {\n-      // User is authenticated, you can use initData.user here\n       console.log(\"User data:\", initData.user);\n+      // You can perform actions with the user data here\n     } else if (initData !== null) {\n-      // Redirect to login if no user data\n-      router.push(\"/login\");\n+      // No user data, you might want to handle this case\n+      console.log(\"No user data available\");\n     }\n-  }, [initData, router]);\n+  }, [initData]);\n \n-  if (!initData || !initData.user) {\n+  if (!initData) {\n     return <div>Loading...</div>;\n   }\n \n   return (\n     <div>\n-      <h1>Welcome, {initData.user.first_name}!</h1>\n-      {/* Rest of your app */}\n+      <h1>Welcome to the Voting App</h1>\n+      {initData.user && <p>Hello, {initData.user.first_name}!</p>}\n+      {/* Rest of your app content */}\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1725053540951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\";\n \n import { useEffect } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import useTelegramInitData from \"../hooks/useTelegramInitData\";\n+import { useTelegramInitData } from \"../hooks/useTelegramInitData\";\n \n export default function Home() {\n   const router = useRouter();\n   const initData = useTelegramInitData();\n"
                },
                {
                    "date": 1725098018310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,38 +1,96 @@\n \"use client\";\n \n-import { useEffect } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import { useTelegramInitData } from \"../hooks/useTelegramInitData\";\n+import { useState, useEffect } from \"react\";\n \n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  language_code?: string;\n+}\n+\n+declare global {\n+  interface Window {\n+    Telegram?: {\n+      WebApp?: {\n+        initDataUnsafe: {\n+          user?: TelegramUser;\n+        };\n+        ready: () => void;\n+        initData: string;\n+        initDataUnsafe: any;\n+      };\n+    };\n+  }\n+}\n+\n export default function Home() {\n-  const router = useRouter();\n-  const initData = useTelegramInitData();\n+  const [user, setUser] = useState<TelegramUser | null>(null);\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [debugInfo, setDebugInfo] = useState<string>(\"\");\n \n   useEffect(() => {\n-    if (typeof window !== \"undefined\" && window.Telegram?.WebApp) {\n-      window.Telegram.WebApp.ready();\n+    let info = \"\";\n+\n+    if (typeof window !== \"undefined\") {\n+      info += \"Window object is available.\\n\";\n+\n+      if (window.Telegram) {\n+        info += \"Telegram object is available.\\n\";\n+\n+        if (window.Telegram.WebApp) {\n+          info += \"WebApp object is available.\\n\";\n+          info += `initData: ${window.Telegram.WebApp.initData}\\n`;\n+          info += `initDataUnsafe: ${JSON.stringify(\n+            window.Telegram.WebApp.initDataUnsafe,\n+            null,\n+            2\n+          )}\\n`;\n+\n+          window.Telegram.WebApp.ready();\n+\n+          if (\n+            window.Telegram.WebApp.initDataUnsafe &&\n+            window.Telegram.WebApp.initDataUnsafe.user\n+          ) {\n+            const tUser = window.Telegram.WebApp.initDataUnsafe.user;\n+            setUser(tUser);\n+            info += `User data: ${JSON.stringify(tUser, null, 2)}\\n`;\n+          } else {\n+            info += \"User data is not available in initDataUnsafe.\\n\";\n+          }\n+        } else {\n+          info += \"WebApp object is not available.\\n\";\n+        }\n+      } else {\n+        info += \"Telegram object is not available.\\n\";\n+      }\n+    } else {\n+      info += \"Window object is not available (server-side rendering).\\n\";\n     }\n+\n+    setDebugInfo(info);\n+    setIsLoading(false);\n   }, []);\n \n-  useEffect(() => {\n-    if (initData?.user) {\n-      console.log(\"User data:\", initData.user);\n-      // You can perform actions with the user data here\n-    } else if (initData !== null) {\n-      // No user data, you might want to handle this case\n-      console.log(\"No user data available\");\n-    }\n-  }, [initData]);\n-\n-  if (!initData) {\n+  if (isLoading) {\n     return <div>Loading...</div>;\n   }\n \n   return (\n     <div>\n-      <h1>Welcome to the Voting App</h1>\n-      {initData.user && <p>Hello, {initData.user.first_name}!</p>}\n-      {/* Rest of your app content */}\n+      <h1>Telegram WebApp Debug</h1>\n+      {user ? (\n+        <div>\n+          <h2>Welcome, {user.first_name}!</h2>\n+          <pre>{JSON.stringify(user, null, 2)}</pre>\n+        </div>\n+      ) : (\n+        <div>No user data available</div>\n+      )}\n+      <h3>Debug Information:</h3>\n+      <pre>{debugInfo}</pre>\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1725098538968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,96 +1,38 @@\n \"use client\";\n \n-import { useState, useEffect } from \"react\";\n+import { useEffect } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import { useTelegramInitData } from \"../hooks/useTelegramInitData\";\n \n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  language_code?: string;\n-}\n-\n-declare global {\n-  interface Window {\n-    Telegram?: {\n-      WebApp?: {\n-        initDataUnsafe: {\n-          user?: TelegramUser;\n-        };\n-        ready: () => void;\n-        initData: string;\n-        initDataUnsafe: any;\n-      };\n-    };\n-  }\n-}\n-\n export default function Home() {\n-  const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [debugInfo, setDebugInfo] = useState<string>(\"\");\n+  const router = useRouter();\n+  const initData = useTelegramInitData();\n \n   useEffect(() => {\n-    let info = \"\";\n+    if (typeof window !== \"undefined\" && window.Telegram?.WebApp) {\n+      window.Telegram.WebApp.ready();\n+    }\n+  }, []);\n \n-    if (typeof window !== \"undefined\") {\n-      info += \"Window object is available.\\n\";\n-\n-      if (window.Telegram) {\n-        info += \"Telegram object is available.\\n\";\n-\n-        if (window.Telegram.WebApp) {\n-          info += \"WebApp object is available.\\n\";\n-          info += `initData: ${window.Telegram.WebApp.initData}\\n`;\n-          info += `initDataUnsafe: ${JSON.stringify(\n-            window.Telegram.WebApp.initDataUnsafe,\n-            null,\n-            2\n-          )}\\n`;\n-\n-          window.Telegram.WebApp.ready();\n-\n-          if (\n-            window.Telegram.WebApp.initDataUnsafe &&\n-            window.Telegram.WebApp.initDataUnsafe.user\n-          ) {\n-            const tUser = window.Telegram.WebApp.initDataUnsafe.user;\n-            setUser(tUser);\n-            info += `User data: ${JSON.stringify(tUser, null, 2)}\\n`;\n-          } else {\n-            info += \"User data is not available in initDataUnsafe.\\n\";\n-          }\n-        } else {\n-          info += \"WebApp object is not available.\\n\";\n-        }\n-      } else {\n-        info += \"Telegram object is not available.\\n\";\n-      }\n-    } else {\n-      info += \"Window object is not available (server-side rendering).\\n\";\n+  useEffect(() => {\n+    if (initData?.user) {\n+      console.log(\"User data:\", initData.user);\n+      // You can perform actions with the user data here\n+    } else if (initData !== null) {\n+      // No user data, you might want to handle this case\n+      console.log(\"No user data available\");\n     }\n+  }, [initData]);\n \n-    setDebugInfo(info);\n-    setIsLoading(false);\n-  }, []);\n-\n-  if (isLoading) {\n+  if (!initData) {\n     return <div>Loading...</div>;\n   }\n \n   return (\n     <div>\n-      <h1>Telegram WebApp Debug</h1>\n-      {user ? (\n-        <div>\n-          <h2>Welcome, {user.first_name}!</h2>\n-          <pre>{JSON.stringify(user, null, 2)}</pre>\n-        </div>\n-      ) : (\n-        <div>No user data available</div>\n-      )}\n-      <h3>Debug Information:</h3>\n-      <pre>{debugInfo}</pre>\n+      <h1>Welcome to the Voting App</h1>\n+      {initData.user && <p>Hello, {initData.user.first_name}!</p>}\n+      {/* Rest of your app content */}\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1725099500535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,38 +1,56 @@\n \"use client\";\n \n-import { useEffect } from \"react\";\n+import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { useTelegramInitData } from \"../hooks/useTelegramInitData\";\n+import { verifyTokenAndGetUser, TelegramUser } from \"../lib/auth\";\n+import Login from \"./login/page\";\n \n export default function Home() {\n   const router = useRouter();\n-  const initData = useTelegramInitData();\n+  const [user, setUser] = useState<TelegramUser | null>(null);\n+  const [isLoading, setIsLoading] = useState(true);\n \n   useEffect(() => {\n-    if (typeof window !== \"undefined\" && window.Telegram?.WebApp) {\n-      window.Telegram.WebApp.ready();\n+    const token = localStorage.getItem(\"token\");\n+    console.log(\"Token:\", token);\n+\n+    if (token) {\n+      verifyTokenAndGetUser(token)\n+        .then((userData) => {\n+          console.log(\"User data:\", userData);\n+          if (userData) {\n+            setUser(userData);\n+          }\n+          setIsLoading(false);\n+        })\n+        .catch((error: any) => {\n+          console.error(\"Error verifying token:\", error);\n+          setIsLoading(false);\n+        });\n+    } else {\n+      setIsLoading(false);\n     }\n   }, []);\n \n-  useEffect(() => {\n-    if (initData?.user) {\n-      console.log(\"User data:\", initData.user);\n-      // You can perform actions with the user data here\n-    } else if (initData !== null) {\n-      // No user data, you might want to handle this case\n-      console.log(\"No user data available\");\n-    }\n-  }, [initData]);\n+  console.log(\"User:\", user);\n+  console.log(\"Is Loading:\", isLoading);\n \n-  if (!initData) {\n-    return <div>Loading...</div>;\n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n   }\n \n+  const handleLogin = (userData: TelegramUser) => {\n+    setUser(userData);\n+  };\n+\n+  if (!user) {\n+    return <Login onLogin={handleLogin} />;\n+  }\n+\n   return (\n-    <div>\n-      <h1>Welcome to the Voting App</h1>\n-      {initData.user && <p>Hello, {initData.user.first_name}!</p>}\n-      {/* Rest of your app content */}\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Welcome, {user.first_name}!</h1>\n+      {/* Your app content goes here */}\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1725099513935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     console.log(\"Token:\", token);\n \n     if (token) {\n       verifyTokenAndGetUser(token)\n-        .then((userData) => {\n+        .then((userData: TelegramUser) => {\n           console.log(\"User data:\", userData);\n           if (userData) {\n             setUser(userData);\n           }\n"
                },
                {
                    "date": 1725099528041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser, TelegramUser } from \"../lib/auth\";\n+import { verifyTokenAndGetUser, TelegramUser } from \"./lib/auth\";\n import Login from \"./login/page\";\n \n export default function Home() {\n   const router = useRouter();\n"
                },
                {
                    "date": 1725100991222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,56 +1,47 @@\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser, TelegramUser } from \"./lib/auth\";\n-import Login from \"./login/page\";\n-\n export default function Home() {\n-  const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n   const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n     const token = localStorage.getItem(\"token\");\n-    console.log(\"Token:\", token);\n-\n     if (token) {\n       verifyTokenAndGetUser(token)\n-        .then((userData: TelegramUser) => {\n-          console.log(\"User data:\", userData);\n+        .then((userData) => {\n           if (userData) {\n             setUser(userData);\n+          } else {\n+            setError(\"Failed to get user data\");\n           }\n-          setIsLoading(false);\n         })\n-        .catch((error: any) => {\n+        .catch((error) => {\n           console.error(\"Error verifying token:\", error);\n+          setError(\"Error verifying token\");\n+        })\n+        .finally(() => {\n           setIsLoading(false);\n         });\n     } else {\n       setIsLoading(false);\n     }\n   }, []);\n \n-  console.log(\"User:\", user);\n-  console.log(\"Is Loading:\", isLoading);\n-\n   if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n+    return <div>Loading...</div>;\n   }\n \n-  const handleLogin = (userData: TelegramUser) => {\n-    setUser(userData);\n-  };\n+  if (error) {\n+    return <div>Error: {error}</div>;\n+  }\n \n   if (!user) {\n-    return <Login onLogin={handleLogin} />;\n+    return <Login onLogin={(user) => setUser(user)} />;\n   }\n \n   return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Welcome, {user.first_name}!</h1>\n-      {/* Your app content goes here */}\n+    <div>\n+      <h1>Welcome, {user.first_name}!</h1>\n+      {/* Your app content */}\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1725101015462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,11 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import { verifyTokenAndGetUser, TelegramUser } from \"./lib/auth\";\n+import Login from \"./login/page\";\n+\n export default function Home() {\n   const [user, setUser] = useState<TelegramUser | null>(null);\n   const [isLoading, setIsLoading] = useState(true);\n   const [error, setError] = useState<string | null>(null);\n"
                },
                {
                    "date": 1725101395688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser, TelegramUser } from \"./lib/auth\";\n+import { verifyTokenAndGetUser, TelegramUser } from \"@/lib/auth\";\n import Login from \"./login/page\";\n \n export default function Home() {\n+  const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n   const [isLoading, setIsLoading] = useState(true);\n   const [error, setError] = useState<string | null>(null);\n \n@@ -32,8 +33,13 @@\n       setIsLoading(false);\n     }\n   }, []);\n \n+  const handleLogin = (userData: TelegramUser) => {\n+    setUser(userData);\n+    setIsLoading(false);\n+  };\n+\n   if (isLoading) {\n     return <div>Loading...</div>;\n   }\n \n@@ -41,9 +47,9 @@\n     return <div>Error: {error}</div>;\n   }\n \n   if (!user) {\n-    return <Login onLogin={(user) => setUser(user)} />;\n+    return <Login onLogin={handleLogin} />;\n   }\n \n   return (\n     <div>\n"
                },
                {
                    "date": 1725101402349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser, TelegramUser } from \"@/lib/auth\";\n+import { verifyTokenAndGetUser, TelegramUser } from \"@/app/lib/auth\";\n import Login from \"./login/page\";\n \n export default function Home() {\n   const router = useRouter();\n"
                },
                {
                    "date": 1725101791157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,10 @@\n       setIsLoading(false);\n     }\n   }, []);\n \n-  const handleLogin = (userData: TelegramUser) => {\n-    setUser(userData);\n+  const handleLogin = (user: TelegramUser) => {\n+    setUser(user);\n     setIsLoading(false);\n   };\n \n   if (isLoading) {\n"
                },
                {
                    "date": 1725102129502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser, TelegramUser } from \"@/app/lib/auth\";\n+import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n+import { TelegramUser } from \"@/app/types\";\n import Login from \"./login/page\";\n \n export default function Home() {\n   const router = useRouter();\n"
                },
                {
                    "date": 1725102302951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n-import { TelegramUser } from \"@/app/types\";\n+import { TelegramUser } from \"@/types\";\n import Login from \"./login/page\";\n \n export default function Home() {\n   const router = useRouter();\n"
                },
                {
                    "date": 1725103361813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,12 @@\n     }\n   }, []);\n \n   const handleLogin = (user: TelegramUser) => {\n+    console.log(\"User logged in:\", user);\n+\n     setUser(user);\n-    setIsLoading(false);\n+    // setIsLoading(false);\n   };\n \n   if (isLoading) {\n     return <div>Loading...</div>;\n"
                },
                {
                    "date": 1725103541836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     return <div>Error: {error}</div>;\n   }\n \n   if (!user) {\n-    return <Login onLogin={handleLogin} />;\n+    return <Login onLogin={() => handleLogin(user)} />;\n   }\n \n   return (\n     <div>\n"
                },
                {
                    "date": 1725103549890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n       setIsLoading(false);\n     }\n   }, []);\n \n-  const handleLogin = (user: TelegramUser) => {\n+  const handleLogin = (user) => {\n     console.log(\"User logged in:\", user);\n \n     setUser(user);\n     // setIsLoading(false);\n"
                },
                {
                    "date": 1725103558078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n       setIsLoading(false);\n     }\n   }, []);\n \n-  const handleLogin = (user) => {\n+  const handleLogin = (user: TelegramUser) => {\n     console.log(\"User logged in:\", user);\n \n     setUser(user);\n     // setIsLoading(false);\n@@ -50,9 +50,9 @@\n     return <div>Error: {error}</div>;\n   }\n \n   if (!user) {\n-    return <Login onLogin={() => handleLogin(user)} />;\n+    return <Login onLogin={() => handleLogin(user: TelegramUser)} />;\n   }\n \n   return (\n     <div>\n"
                },
                {
                    "date": 1725103618535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     return <div>Error: {error}</div>;\n   }\n \n   if (!user) {\n-    return <Login onLogin={() => handleLogin(user: TelegramUser)} />;\n+    return <Login onLogin={(user: TelegramUser) => handleLogin(user)} />;\n   }\n \n   return (\n     <div>\n"
                },
                {
                    "date": 1725103766850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n import { TelegramUser } from \"@/types\";\n-import Login from \"./login/page\";\n+import Login from \"@/app/login/page\";\n \n export default function Home() {\n   const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n"
                },
                {
                    "date": 1725103789188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   const handleLogin = (user: TelegramUser) => {\n     console.log(\"User logged in:\", user);\n \n     setUser(user);\n-    // setIsLoading(false);\n+    setIsLoading(false);\n   };\n \n   if (isLoading) {\n     return <div>Loading...</div>;\n"
                },
                {
                    "date": 1725104004179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     return <div>Error: {error}</div>;\n   }\n \n   if (!user) {\n-    return <Login onLogin={(user: TelegramUser) => handleLogin(user)} />;\n+    return <Login onLogin={handleLogin} />;\n   }\n \n   return (\n     <div>\n"
                },
                {
                    "date": 1725104175169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,12 +34,12 @@\n       setIsLoading(false);\n     }\n   }, []);\n \n-  const handleLogin = (user: TelegramUser) => {\n+  const handleLogin = async (user: TelegramUser) => {\n     console.log(\"User logged in:\", user);\n \n-    setUser(user);\n+    await setUser(user);\n     setIsLoading(false);\n   };\n \n   if (isLoading) {\n"
                },
                {
                    "date": 1725104670159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\n \n-import { useEffect, useState } from \"react\";\n+import { useCallback, useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n import { TelegramUser } from \"@/types\";\n import Login from \"@/app/login/page\";\n@@ -34,15 +34,13 @@\n       setIsLoading(false);\n     }\n   }, []);\n \n-  const handleLogin = async (user: TelegramUser) => {\n-    console.log(\"User logged in:\", user);\n+  const handleLogin = useCallback((userData: TelegramUser) => {\n+    console.log(\"handleLogin called with:\", userData);\n+    setUser(userData);\n+  }, []);\n \n-    await setUser(user);\n-    setIsLoading(false);\n-  };\n-\n   if (isLoading) {\n     return <div>Loading...</div>;\n   }\n \n"
                },
                {
                    "date": 1725105053401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\n \n-import { useCallback, useEffect, useState } from \"react\";\n+import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n import { TelegramUser } from \"@/types\";\n import Login from \"@/app/login/page\";\n@@ -34,13 +34,15 @@\n       setIsLoading(false);\n     }\n   }, []);\n \n-  const handleLogin = useCallback((userData: TelegramUser) => {\n-    console.log(\"handleLogin called with:\", userData);\n-    setUser(userData);\n-  }, []);\n+  const handleLogin = async (user: TelegramUser) => {\n+    console.log(\"User logged in:\", user);\n \n+    setUser(user);\n+    setIsLoading(false);\n+  };\n+\n   if (isLoading) {\n     return <div>Loading...</div>;\n   }\n \n"
                },
                {
                    "date": 1725105131794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,15 +34,13 @@\n       setIsLoading(false);\n     }\n   }, []);\n \n-  const handleLogin = async (user: TelegramUser) => {\n-    console.log(\"User logged in:\", user);\n+  const handleLogin = useCallback((userData: TelegramUser) => {\n+    console.log(\"handleLogin called with:\", userData);\n+    setUser(userData);\n+  }, []);\n \n-    setUser(user);\n-    setIsLoading(false);\n-  };\n-\n   if (isLoading) {\n     return <div>Loading...</div>;\n   }\n \n"
                },
                {
                    "date": 1725105137700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\n \n-import { useEffect, useState } from \"react\";\n+import { useCallback, useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n import { TelegramUser } from \"@/types\";\n import Login from \"@/app/login/page\";\n"
                },
                {
                    "date": 1725105206730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     return <div>Error: {error}</div>;\n   }\n \n   if (!user) {\n-    return <Login onLogin={handleLogin} />;\n+    return <Login onLogin={async (user) => await handleLogin(user)} />;\n   }\n \n   return (\n     <div>\n"
                },
                {
                    "date": 1725105245373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     return <div>Error: {error}</div>;\n   }\n \n   if (!user) {\n-    return <Login onLogin={async (user) => await handleLogin(user)} />;\n+    return <Login onLogin={handleLogin} />;\n   }\n \n   return (\n     <div>\n"
                },
                {
                    "date": 1725105513510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { useCallback, useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n import { TelegramUser } from \"@/types\";\n-import Login from \"@/app/login/page\";\n+import Login from \"./login/page\";\n \n export default function Home() {\n   const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n"
                },
                {
                    "date": 1725105984316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,9 @@\n \n   if (!user) {\n     return <Login onLogin={handleLogin} />;\n   }\n+  console.log(\"User STATE:\", user);\n \n   return (\n     <div>\n       <h1>Welcome, {user.first_name}!</h1>\n"
                },
                {
                    "date": 1725106292996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+\"use client\";\n+\n+import { useCallback, useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n+import { TelegramUser } from \"@/types\";\n+import Login from \"./login/page\";\n+\n+export default function Home() {\n+  const router = useRouter();\n+  const [user, setUser] = useState<TelegramUser | null>(null);\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem(\"token\");\n+    if (token) {\n+      verifyTokenAndGetUser(token)\n+        .then((userData) => {\n+          if (userData) {\n+            setUser(userData);\n+          } else {\n+            setError(\"Failed to get user data\");\n+          }\n+        })\n+        .catch((error) => {\n+          console.error(\"Error verifying token:\", error);\n+          setError(\"Error verifying token\");\n+        })\n+        .finally(() => {\n+          setIsLoading(false);\n+        });\n+    } else {\n+      setIsLoading(false);\n+    }\n+  }, []);\n+\n+  const handleLogin = useCallback((userData: TelegramUser) => {\n+    console.log(\"handleLogin called with:\", userData);\n+    setUser(userData);\n+  }, []);\n+\n+  if (isLoading) {\n+    return <div>Loading...</div>;\n+  }\n+\n+  if (error) {\n+    return <div>Error: {error}</div>;\n+  }\n+\n+  if (!user) {\n+    return <Login onLogin={handleLogin} />;\n+  }\n+  console.log(\"User STATE:\", user);\n+\n+  return (\n+    <div>\n+      <h1>Welcome, {user.first_name}!</h1>\n+      {/* Your app content */}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1725106299032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,72 +2,10 @@\n \n import { useCallback, useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n-import { TelegramUser } from \"@/types\";\n import Login from \"./login/page\";\n-\n-export default function Home() {\n-  const router = useRouter();\n-  const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem(\"token\");\n-    if (token) {\n-      verifyTokenAndGetUser(token)\n-        .then((userData) => {\n-          if (userData) {\n-            setUser(userData);\n-          } else {\n-            setError(\"Failed to get user data\");\n-          }\n-        })\n-        .catch((error) => {\n-          console.error(\"Error verifying token:\", error);\n-          setError(\"Error verifying token\");\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    } else {\n-      setIsLoading(false);\n-    }\n-  }, []);\n-\n-  const handleLogin = useCallback((userData: TelegramUser) => {\n-    console.log(\"handleLogin called with:\", userData);\n-    setUser(userData);\n-  }, []);\n-\n-  if (isLoading) {\n-    return <div>Loading...</div>;\n-  }\n-\n-  if (error) {\n-    return <div>Error: {error}</div>;\n-  }\n-\n-  if (!user) {\n-    return <Login onLogin={handleLogin} />;\n-  }\n-  console.log(\"User STATE:\", user);\n-\n-  return (\n-    <div>\n-      <h1>Welcome, {user.first_name}!</h1>\n-      {/* Your app content */}\n-    </div>\n-  );\n-}\n-\"use client\";\n-\n-import { useCallback, useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n import { TelegramUser } from \"@/types\";\n-import Login from \"./login/page\";\n \n export default function Home() {\n   const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n"
                },
                {
                    "date": 1725106313615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n \"use client\";\n \n+import Login from \"./login/page\";\n import { useCallback, useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n-import Login from \"./login/page\";\n import { TelegramUser } from \"@/types\";\n \n export default function Home() {\n   const router = useRouter();\n"
                },
                {
                    "date": 1725106510885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n \"use client\";\n \n-import Login from \"./login/page\";\n-import { useCallback, useEffect, useState } from \"react\";\n+import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n import { TelegramUser } from \"@/types\";\n+import Login from \"@/app/login/page\";\n \n export default function Home() {\n   const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n@@ -34,13 +34,15 @@\n       setIsLoading(false);\n     }\n   }, []);\n \n-  const handleLogin = useCallback((userData: TelegramUser) => {\n-    console.log(\"handleLogin called with:\", userData);\n-    setUser(userData);\n-  }, []);\n+  const handleLogin = async (user: TelegramUser) => {\n+    console.log(\"User logged in:\", user);\n \n+    setUser(user);\n+    setIsLoading(false);\n+  };\n+\n   if (isLoading) {\n     return <div>Loading...</div>;\n   }\n \n@@ -50,9 +52,8 @@\n \n   if (!user) {\n     return <Login onLogin={handleLogin} />;\n   }\n-  console.log(\"User STATE:\", user);\n \n   return (\n     <div>\n       <h1>Welcome, {user.first_name}!</h1>\n"
                },
                {
                    "date": 1725106556738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     }\n   }, []);\n \n   const handleLogin = async (user: TelegramUser) => {\n-    console.log(\"User logged in:\", user);\n+    console.log(\"handleLogin User logged in:\", user);\n \n     setUser(user);\n     setIsLoading(false);\n   };\n@@ -52,8 +52,9 @@\n \n   if (!user) {\n     return <Login onLogin={handleLogin} />;\n   }\n+  console.log(\"User STATE HOME:\", user);\n \n   return (\n     <div>\n       <h1>Welcome, {user.first_name}!</h1>\n"
                },
                {
                    "date": 1725106811648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,10 @@\n     return <div>Error: {error}</div>;\n   }\n \n   if (!user) {\n+    console.log(\"Rendering Login component with onLogin prop\");\n+\n     return <Login onLogin={handleLogin} />;\n   }\n   console.log(\"User STATE HOME:\", user);\n \n"
                },
                {
                    "date": 1725106953225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,10 @@\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n     const token = localStorage.getItem(\"token\");\n+    console.log(\"Token:\", token);\n+\n     if (token) {\n       verifyTokenAndGetUser(token)\n         .then((userData) => {\n           if (userData) {\n"
                },
                {
                    "date": 1725106958492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,68 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+// import { useRouter } from \"next/navigation\";\n+import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n+import { TelegramUser } from \"@/types\";\n+import Login from \"@/app/login/page\";\n+\n+export default function Home() {\n+  // const router = useRouter();\n+  const [user, setUser] = useState<TelegramUser | null>(null);\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem(\"token\");\n+    console.log(\"Token:\", token);\n+\n+    if (token) {\n+      verifyTokenAndGetUser(token)\n+        .then((userData) => {\n+          if (userData) {\n+            setUser(userData);\n+          } else {\n+            setError(\"Failed to get user data\");\n+          }\n+        })\n+        .catch((error) => {\n+          console.error(\"Error verifying token:\", error);\n+          setError(\"Error verifying token\");\n+        })\n+        .finally(() => {\n+          setIsLoading(false);\n+        });\n+    } else {\n+      setIsLoading(false);\n+    }\n+  }, []);\n+\n+  const handleLogin = async (user: TelegramUser) => {\n+    console.log(\"handleLogin User logged in:\", user);\n+\n+    setUser(user);\n+    setIsLoading(false);\n+  };\n+\n+  if (isLoading) {\n+    return <div>Loading...</div>;\n+  }\n+\n+  if (error) {\n+    return <div>Error: {error}</div>;\n+  }\n+\n+  if (!user) {\n+    console.log(\"Rendering Login component with onLogin prop\");\n+\n+    return <Login onLogin={handleLogin} />;\n+  }\n+  console.log(\"User STATE HOME:\", user);\n+\n+  return (\n+    <div>\n+      <h1>Welcome, {user.first_name}!</h1>\n+      {/* Your app content */}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1725107197886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n \"use client\";\n \n+import Login from \"@/app/login/page\";\n import { useEffect, useState } from \"react\";\n // import { useRouter } from \"next/navigation\";\n import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n import { TelegramUser } from \"@/types\";\n-import Login from \"@/app/login/page\";\n \n export default function Home() {\n   // const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n@@ -37,12 +37,12 @@\n     }\n   }, []);\n \n   const handleLogin = async (user: TelegramUser) => {\n-    console.log(\"handleLogin User logged in:\", user);\n+    // console.log(\"handleLogin User logged in:\", user);\n \n     setUser(user);\n-    setIsLoading(false);\n+    // setIsLoading(false);\n   };\n \n   if (isLoading) {\n     return <div>Loading...</div>;\n@@ -65,72 +65,4 @@\n       {/* Your app content */}\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n-import { TelegramUser } from \"@/types\";\n-import Login from \"@/app/login/page\";\n-\n-export default function Home() {\n-  const router = useRouter();\n-  const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem(\"token\");\n-    console.log(\"Token:\", token);\n-\n-    if (token) {\n-      verifyTokenAndGetUser(token)\n-        .then((userData) => {\n-          if (userData) {\n-            setUser(userData);\n-          } else {\n-            setError(\"Failed to get user data\");\n-          }\n-        })\n-        .catch((error) => {\n-          console.error(\"Error verifying token:\", error);\n-          setError(\"Error verifying token\");\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    } else {\n-      setIsLoading(false);\n-    }\n-  }, []);\n-\n-  const handleLogin = async (user: TelegramUser) => {\n-    console.log(\"handleLogin User logged in:\", user);\n-\n-    setUser(user);\n-    setIsLoading(false);\n-  };\n-\n-  if (isLoading) {\n-    return <div>Loading...</div>;\n-  }\n-\n-  if (error) {\n-    return <div>Error: {error}</div>;\n-  }\n-\n-  if (!user) {\n-    console.log(\"Rendering Login component with onLogin prop\");\n-\n-    return <Login onLogin={handleLogin} />;\n-  }\n-  console.log(\"User STATE HOME:\", user);\n-\n-  return (\n-    <div>\n-      <h1>Welcome, {user.first_name}!</h1>\n-      {/* Your app content */}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1725107421584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     }\n   }, []);\n \n   const handleLogin = async (user: TelegramUser) => {\n-    // console.log(\"handleLogin User logged in:\", user);\n+    console.log(\"handleLogin User logged in:\", user);\n \n     setUser(user);\n     // setIsLoading(false);\n   };\n"
                },
                {
                    "date": 1725107538462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n     console.log(\"handleLogin User logged in:\", user);\n \n     setUser(user);\n     // setIsLoading(false);\n+    return user;\n   };\n \n   if (isLoading) {\n     return <div>Loading...</div>;\n"
                },
                {
                    "date": 1725108193639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,16 +36,10 @@\n       setIsLoading(false);\n     }\n   }, []);\n \n-  const handleLogin = async (user: TelegramUser) => {\n-    console.log(\"handleLogin User logged in:\", user);\n+  const handleLogin = (user: TelegramUser) => setUser(user);\n \n-    setUser(user);\n-    // setIsLoading(false);\n-    return user;\n-  };\n-\n   if (isLoading) {\n     return <div>Loading...</div>;\n   }\n \n"
                },
                {
                    "date": 1725108265253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n   console.log(\"User STATE HOME:\", user);\n \n   return (\n     <div>\n-      <h1>Welcome, {user.first_name}!</h1>\n+      <h1>Welcome, {user?.first_name}!</h1>\n       {/* Your app content */}\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1725141198355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,63 +1,98 @@\n \"use client\";\n \n-import Login from \"@/app/login/page\";\n-import { useEffect, useState } from \"react\";\n-// import { useRouter } from \"next/navigation\";\n-import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n+import { useState, useCallback } from \"react\";\n import { TelegramUser } from \"@/types\";\n+import Login from \"./login/page\";\n \n export default function Home() {\n-  // const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\n \n-  useEffect(() => {\n-    const token = localStorage.getItem(\"token\");\n-    console.log(\"Token:\", token);\n-\n-    if (token) {\n-      verifyTokenAndGetUser(token)\n-        .then((userData) => {\n-          if (userData) {\n-            setUser(userData);\n-          } else {\n-            setError(\"Failed to get user data\");\n-          }\n-        })\n-        .catch((error) => {\n-          console.error(\"Error verifying token:\", error);\n-          setError(\"Error verifying token\");\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    } else {\n-      setIsLoading(false);\n-    }\n+  const handleLogin = useCallback((userData: TelegramUser) => {\n+    console.log(\"handleLogin called with:\", userData);\n+    setUser(userData);\n+    setIsLoggedIn(true);\n   }, []);\n \n-  const handleLogin = (user: TelegramUser) => setUser(user);\n+  console.log(\n+    \"Rendering Home component, user:\",\n+    user,\n+    \"isLoggedIn:\",\n+    isLoggedIn\n+  );\n \n-  if (isLoading) {\n-    return <div>Loading...</div>;\n-  }\n-\n-  if (error) {\n-    return <div>Error: {error}</div>;\n-  }\n-\n-  if (!user) {\n-    console.log(\"Rendering Login component with onLogin prop\");\n-\n+  if (!isLoggedIn) {\n+    console.log(\"Rendering Login component\");\n     return <Login onLogin={handleLogin} />;\n   }\n-  console.log(\"User STATE HOME:\", user);\n \n   return (\n     <div>\n-      <h1>Welcome, {user?.first_name}!</h1>\n-      {/* Your app content */}\n+      <h1>Welcome, {user?.first_name || \"User\"}!</h1>\n+      {/* Add your app content here */}\n     </div>\n   );\n }\n+// \"use client\";\n+\n+// import Login from \"@/app/login/page\";\n+// import { useEffect, useState } from \"react\";\n+// // import { useRouter } from \"next/navigation\";\n+// import { verifyTokenAndGetUser } from \"@/app/lib/auth\";\n+// import { TelegramUser } from \"@/types\";\n+\n+// export default function Home() {\n+//   // const router = useRouter();\n+//   const [user, setUser] = useState<TelegramUser | null>(null);\n+//   const [isLoading, setIsLoading] = useState(true);\n+//   const [error, setError] = useState<string | null>(null);\n+\n+//   useEffect(() => {\n+//     const token = localStorage.getItem(\"token\");\n+//     console.log(\"Token:\", token);\n+\n+//     if (token) {\n+//       verifyTokenAndGetUser(token)\n+//         .then((userData) => {\n+//           if (userData) {\n+//             setUser(userData);\n+//           } else {\n+//             setError(\"Failed to get user data\");\n+//           }\n+//         })\n+//         .catch((error) => {\n+//           console.error(\"Error verifying token:\", error);\n+//           setError(\"Error verifying token\");\n+//         })\n+//         .finally(() => {\n+//           setIsLoading(false);\n+//         });\n+//     } else {\n+//       setIsLoading(false);\n+//     }\n+//   }, []);\n+\n+//   const handleLogin = (user: TelegramUser) => setUser(user);\n+\n+//   if (isLoading) {\n+//     return <div>Loading...</div>;\n+//   }\n+\n+//   if (error) {\n+//     return <div>Error: {error}</div>;\n+//   }\n+\n+//   if (!user) {\n+//     console.log(\"Rendering Login component with onLogin prop\");\n+\n+//     return <Login onLogin={handleLogin} />;\n+//   }\n+//   console.log(\"User STATE HOME:\", user);\n+\n+//   return (\n+//     <div>\n+//       <h1>Welcome, {user?.first_name}!</h1>\n+//       {/* Your app content */}\n+//     </div>\n+//   );\n+// }\n"
                },
                {
                    "date": 1725141589946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,39 @@\n-\"use client\";\n+// \"use client\";\n \n-import { useState, useCallback } from \"react\";\n-import { TelegramUser } from \"@/types\";\n-import Login from \"./login/page\";\n+// import { useState, useCallback } from \"react\";\n+// import { TelegramUser } from \"@/types\";\n+// import Login from \"./login/page\";\n \n-export default function Home() {\n-  const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\n+// export default function Home() {\n+//   const [user, setUser] = useState<TelegramUser | null>(null);\n+//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n \n-  const handleLogin = useCallback((userData: TelegramUser) => {\n-    console.log(\"handleLogin called with:\", userData);\n-    setUser(userData);\n-    setIsLoggedIn(true);\n-  }, []);\n+//   const handleLogin = useCallback((userData: TelegramUser) => {\n+//     console.log(\"handleLogin called with:\", userData);\n+//     setUser(userData);\n+//     setIsLoggedIn(true);\n+//   }, []);\n \n-  console.log(\n-    \"Rendering Home component, user:\",\n-    user,\n-    \"isLoggedIn:\",\n-    isLoggedIn\n-  );\n+//   console.log(\n+//     \"Rendering Home component, user:\",\n+//     user,\n+//     \"isLoggedIn:\",\n+//     isLoggedIn\n+//   );\n \n-  if (!isLoggedIn) {\n-    console.log(\"Rendering Login component\");\n-    return <Login onLogin={handleLogin} />;\n-  }\n+//   if (!isLoggedIn) {\n+//     console.log(\"Rendering Login component\");\n+//     return <Login onLogin={handleLogin} />;\n+//   }\n \n-  return (\n-    <div>\n-      <h1>Welcome, {user?.first_name || \"User\"}!</h1>\n-      {/* Add your app content here */}\n-    </div>\n-  );\n-}\n+//   return (\n+//     <div>\n+//       <h1>Welcome, {user?.first_name || \"User\"}!</h1>\n+//       {/* Add your app content here */}\n+//     </div>\n+//   );\n+// }\n // \"use client\";\n \n // import Login from \"@/app/login/page\";\n // import { useEffect, useState } from \"react\";\n@@ -95,4 +95,24 @@\n //       {/* Your app content */}\n //     </div>\n //   );\n // }\n+\n+\"use client\";\n+\n+import { useAuth } from \"@/context/AuthContext\";\n+import Login from \"./login/page\";\n+\n+export default function Home() {\n+  const { user } = useAuth();\n+\n+  if (!user) {\n+    return <Login />;\n+  }\n+\n+  return (\n+    <div>\n+      <h1>Welcome, {user.first_name}!</h1>\n+      {/* Your app content */}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1725142759607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,24 @@\n+\"use client\";\n+\n+import { useAuth } from \"@/context/AuthContext\";\n+import Login from \"./login/page\";\n+\n+export default function Home() {\n+  const { user } = useAuth();\n+\n+  if (!user) {\n+    return <Login />;\n+  }\n+\n+  return (\n+    <div>\n+      <h1>Welcome, {user.first_name}!</h1>\n+      {/* Your app content */}\n+    </div>\n+  );\n+}\n+\n // \"use client\";\n \n // import { useState, useCallback } from \"react\";\n // import { TelegramUser } from \"@/types\";\n@@ -95,24 +115,4 @@\n //       {/* Your app content */}\n //     </div>\n //   );\n // }\n-\n-\"use client\";\n-\n-import { useAuth } from \"@/context/AuthContext\";\n-import Login from \"./login/page\";\n-\n-export default function Home() {\n-  const { user } = useAuth();\n-\n-  if (!user) {\n-    return <Login />;\n-  }\n-\n-  return (\n-    <div>\n-      <h1>Welcome, {user.first_name}!</h1>\n-      {/* Your app content */}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1725143691518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import Login from \"./login/page\";\n \n export default function Home() {\n   const { user } = useAuth();\n+  console.log(\"User STATE HOME:\", user);\n \n   if (!user) {\n     return <Login />;\n   }\n"
                },
                {
                    "date": 1725175071014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \n export default function Home() {\n   const { user } = useAuth();\n   console.log(\"User STATE HOME:\", user);\n-\n+  localStorage.getItem(\"user\");\n   if (!user) {\n     return <Login />;\n   }\n \n"
                },
                {
                    "date": 1725175773305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,19 @@\n \"use client\";\n \n import { useAuth } from \"@/context/AuthContext\";\n import Login from \"./login/page\";\n+import { useEffect, useState } from \"react\";\n \n export default function Home() {\n   const { user } = useAuth();\n   console.log(\"User STATE HOME:\", user);\n   localStorage.getItem(\"user\");\n+  useEffect(() => {\n+    if (user !== null) {\n+      setLoading(false);\n+    }\n+  }, [user]);\n   if (!user) {\n     return <Login />;\n   }\n \n"
                },
                {
                    "date": 1725175781041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,10 @@\n import { useEffect, useState } from \"react\";\n \n export default function Home() {\n   const { user } = useAuth();\n+  const [loading, setLoading] = useState(true);\n+\n   console.log(\"User STATE HOME:\", user);\n   localStorage.getItem(\"user\");\n   useEffect(() => {\n     if (user !== null) {\n"
                },
                {
                    "date": 1725175793389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,12 @@\n     if (user !== null) {\n       setLoading(false);\n     }\n   }, [user]);\n+\n+  if (loading) {\n+    return <div>Loading...</div>;\n+  }\n   if (!user) {\n     return <Login />;\n   }\n \n"
                },
                {
                    "date": 1725175908459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,21 +5,21 @@\n import { useEffect, useState } from \"react\";\n \n export default function Home() {\n   const { user } = useAuth();\n-  const [loading, setLoading] = useState(true);\n+  // const [loading, setLoading] = useState(true);\n \n   console.log(\"User STATE HOME:\", user);\n   localStorage.getItem(\"user\");\n-  useEffect(() => {\n-    if (user !== null) {\n-      setLoading(false);\n-    }\n-  }, [user]);\n+  // useEffect(() => {\n+  //   if (user !== null) {\n+  //     setLoading(false);\n+  //   }\n+  // }, [user]);\n \n-  if (loading) {\n-    return <div>Loading...</div>;\n-  }\n+  // if (loading) {\n+  //   return <div>Loading...</div>;\n+  // }\n   if (!user) {\n     return <Login />;\n   }\n \n"
                },
                {
                    "date": 1725263808251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,15 +2,16 @@\n \n import { useAuth } from \"@/context/AuthContext\";\n import Login from \"./login/page\";\n import { useEffect, useState } from \"react\";\n+import { localStorage } from \"localStorage\";\n \n export default function Home() {\n   const { user } = useAuth();\n   // const [loading, setLoading] = useState(true);\n \n   console.log(\"User STATE HOME:\", user);\n-  localStorage.getItem(\"user\");\n+  if (window) localStorage.getItem(\"user\");\n   // useEffect(() => {\n   //   if (user !== null) {\n   //     setLoading(false);\n   //   }\n"
                },
                {
                    "date": 1725263819114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n import { useAuth } from \"@/context/AuthContext\";\n import Login from \"./login/page\";\n import { useEffect, useState } from \"react\";\n-import { localStorage } from \"localStorage\";\n+// import { localStorage } from \"localStorage\";\n \n export default function Home() {\n   const { user } = useAuth();\n   // const [loading, setLoading] = useState(true);\n"
                }
            ],
            "date": 1724755797344,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\n\ninterface TelegramUser {\n  id: number;\n  first_name: string;\n  last_name?: string;\n  username?: string;\n  photo_url?: string;\n  auth_date: number;\n  hash: string;\n}\n\ndeclare global {\n  interface Window {\n    onTelegramAuth: (user: TelegramUser) => void;\n  }\n}\n\nexport default function Login() {\n  const router = useRouter();\n\n  useEffect(() => {\n    window.onTelegramAuth = function (user: TelegramUser) {\n      console.log(\n        \"Logged in as \" +\n          user.first_name +\n          \" \" +\n          (user.last_name || \"\") +\n          \" (\" +\n          user.id +\n          (user.username ? \", @\" + user.username : \"\") +\n          \")\"\n      );\n\n      fetch(\"/api/auth/telegram\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(user),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (data.token) {\n            localStorage.setItem(\"token\", data.token);\n            router.push(\"/\");\n          }\n        })\n        .catch((error) => console.error(\"Error:\", error));\n    };\n  }, [router]);\n\n  return (\n    <div>\n      <h1>Login with Telegram</h1>\n      <div\n        id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}></div>\n    </div>\n  );\n}\n"
        }
    ]
}