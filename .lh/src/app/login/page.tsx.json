{
    "sourceFile": "src/app/login/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 243,
            "patches": [
                {
                    "date": 1724755858787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724756675731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n import { useEffect } from \"react\";\n import { useRouter } from \"next/navigation\";\n \n-interface TelegramUser {\n+interface TelegramAuthData {\n   id: number;\n   first_name: string;\n   last_name?: string;\n   username?: string;\n@@ -14,9 +14,9 @@\n }\n \n declare global {\n   interface Window {\n-    onTelegramAuth: (user: TelegramUser) => void;\n+    onTelegramAuth: (user: TelegramAuthData) => void;\n   }\n }\n \n export default function Login() {\n"
                },
                {
                    "date": 1724756697962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n export default function Login() {\n   const router = useRouter();\n \n   useEffect(() => {\n-    window.onTelegramAuth = function (user: TelegramUser) {\n+    window.onTelegramAuth = function (user: TelegramAuthData) {\n       console.log(\n         \"Logged in as \" +\n           user.first_name +\n           \" \" +\n"
                },
                {
                    "date": 1724757460489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n import { useEffect } from \"react\";\n import { useRouter } from \"next/navigation\";\n \n-interface TelegramAuthData {\n+export interface TelegramAuthData {\n   id: number;\n   first_name: string;\n   last_name?: string;\n   username?: string;\n"
                },
                {
                    "date": 1724761588192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,41 +1,19 @@\n \"use client\";\n \n import { useEffect } from \"react\";\n import { useRouter } from \"next/navigation\";\n+import Script from \"next/script\";\n \n-export interface TelegramAuthData {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n-declare global {\n-  interface Window {\n-    onTelegramAuth: (user: TelegramAuthData) => void;\n-  }\n-}\n-\n export default function Login() {\n   const router = useRouter();\n \n   useEffect(() => {\n-    window.onTelegramAuth = function (user: TelegramAuthData) {\n-      console.log(\n-        \"Logged in as \" +\n-          user.first_name +\n-          \" \" +\n-          (user.last_name || \"\") +\n-          \" (\" +\n-          user.id +\n-          (user.username ? \", @\" + user.username : \"\") +\n-          \")\"\n-      );\n+    // Define the global function that Telegram will call\n+    window.onTelegramAuth = function (user: any) {\n+      console.log(\"Logged in as \", user);\n \n+      // Send the user data to your backend for verification\n       fetch(\"/api/auth/telegram\", {\n         method: \"POST\",\n         headers: {\n           \"Content-Type\": \"application/json\",\n@@ -45,19 +23,27 @@\n         .then((response) => response.json())\n         .then((data) => {\n           if (data.token) {\n             localStorage.setItem(\"token\", data.token);\n-            router.push(\"/\");\n+            router.push(\"/\"); // Redirect to home page after successful login\n           }\n         })\n         .catch((error) => console.error(\"Error:\", error));\n     };\n   }, [router]);\n \n   return (\n-    <div>\n-      <h1>Login with Telegram</h1>\n-      <div\n-        id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}></div>\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      <Script\n+        src=\"https://telegram.org/js/telegram-widget.js?22\"\n+        strategy=\"afterInteractive\"\n+        onLoad={() => {\n+          (window as any).TelegramLoginWidget = {\n+            dataOnauth: (user: any) => window.onTelegramAuth(user),\n+          };\n+        }}\n+      />\n+      <div id=\"telegram-login-widget\" className=\"mt-4\"></div>\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1724766161646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,13 +7,11 @@\n export default function Login() {\n   const router = useRouter();\n \n   useEffect(() => {\n-    // Define the global function that Telegram will call\n-    window.onTelegramAuth = function (user: any) {\n+    window.onTelegramAuth = function (user) {\n       console.log(\"Logged in as \", user);\n \n-      // Send the user data to your backend for verification\n       fetch(\"/api/auth/telegram\", {\n         method: \"POST\",\n         headers: {\n           \"Content-Type\": \"application/json\",\n@@ -23,9 +21,9 @@\n         .then((response) => response.json())\n         .then((data) => {\n           if (data.token) {\n             localStorage.setItem(\"token\", data.token);\n-            router.push(\"/\"); // Redirect to home page after successful login\n+            router.push(\"/\");\n           }\n         })\n         .catch((error) => console.error(\"Error:\", error));\n     };\n@@ -36,14 +34,12 @@\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n       <Script\n         src=\"https://telegram.org/js/telegram-widget.js?22\"\n         strategy=\"afterInteractive\"\n-        onLoad={() => {\n-          (window as any).TelegramLoginWidget = {\n-            dataOnauth: (user: any) => window.onTelegramAuth(user),\n-          };\n-        }}\n       />\n-      <div id=\"telegram-login-widget\" className=\"mt-4\"></div>\n+      <div\n+        id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+        data-auth-url={`${process.env.NEXT_PUBLIC_APP_URL}/api/auth/telegram`}\n+        data-request-access=\"write\"></div>\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1724766371113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n export default function Login() {\n   const router = useRouter();\n \n   useEffect(() => {\n-    window.onTelegramAuth = function (user) {\n+    window.onTelegramAuth = function (user: TelegramUser) {\n       console.log(\"Logged in as \", user);\n \n       fetch(\"/api/auth/telegram\", {\n         method: \"POST\",\n"
                },
                {
                    "date": 1724770042915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,12 +31,14 @@\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <Script\n-        src=\"https://telegram.org/js/telegram-widget.js?22\"\n-        strategy=\"afterInteractive\"\n-      />\n+      <script async src=\"https://telegram.org/js/telegram-widget.js?22\" data-telegram-login=\"voting_app_kp_bot\" data-size=\"large\" data-onauth=\"onTelegramAuth(user)\" data-request-access=\"write\"></script>\n+<script type=\"text/javascript\">\n+  function onTelegramAuth(user) {\n+    alert('Logged in as ' + user.first_name + ' ' + user.last_name + ' (' + user.id + (user.username ? ', @' + user.username : '') + ')');\n+  }\n+</script>\n       <div\n         id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n         data-auth-url={`${process.env.NEXT_PUBLIC_APP_URL}/api/auth/telegram`}\n         data-request-access=\"write\"></div>\n"
                },
                {
                    "date": 1724770064293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,14 +31,20 @@\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <script async src=\"https://telegram.org/js/telegram-widget.js?22\" data-telegram-login=\"voting_app_kp_bot\" data-size=\"large\" data-onauth=\"onTelegramAuth(user)\" data-request-access=\"write\"></script>\n-<script type=\"text/javascript\">\n+      <script\n+        async\n+        src=\"https://telegram.org/js/telegram-widget.js?22\"\n+        data-telegram-login=\"voting_app_kp_bot\"\n+        data-size=\"large\"\n+        data-onauth=\"onTelegramAuth(user)\"\n+        data-request-access=\"write\"></script>\n+      {/* <script type=\"text/javascript\">\n   function onTelegramAuth(user) {\n     alert('Logged in as ' + user.first_name + ' ' + user.last_name + ' (' + user.id + (user.username ? ', @' + user.username : '') + ')');\n   }\n-</script>\n+</script> */}\n       <div\n         id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n         data-auth-url={`${process.env.NEXT_PUBLIC_APP_URL}/api/auth/telegram`}\n         data-request-access=\"write\"></div>\n"
                },
                {
                    "date": 1724770080484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,20 +31,12 @@\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <script\n-        async\n+      <Script\n         src=\"https://telegram.org/js/telegram-widget.js?22\"\n-        data-telegram-login=\"voting_app_kp_bot\"\n-        data-size=\"large\"\n-        data-onauth=\"onTelegramAuth(user)\"\n-        data-request-access=\"write\"></script>\n-      {/* <script type=\"text/javascript\">\n-  function onTelegramAuth(user) {\n-    alert('Logged in as ' + user.first_name + ' ' + user.last_name + ' (' + user.id + (user.username ? ', @' + user.username : '') + ')');\n-  }\n-</script> */}\n+        strategy=\"afterInteractive\"\n+      />\n       <div\n         id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n         data-auth-url={`${process.env.NEXT_PUBLIC_APP_URL}/api/auth/telegram`}\n         data-request-access=\"write\"></div>\n"
                },
                {
                    "date": 1724783126791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,17 @@\n \"use client\";\n \n-import { useEffect } from \"react\";\n+import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n \n export default function Login() {\n   const router = useRouter();\n-\n+  const [user, setUser] = useState<TelegramUser | null>(null);\n   useEffect(() => {\n     window.onTelegramAuth = function (user: TelegramUser) {\n       console.log(\"Logged in as \", user);\n-\n+      setUser(user);\n       fetch(\"/api/auth/telegram\", {\n         method: \"POST\",\n         headers: {\n           \"Content-Type\": \"application/json\",\n@@ -31,8 +31,9 @@\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      <div>{user}</div>\n       <Script\n         src=\"https://telegram.org/js/telegram-widget.js?22\"\n         strategy=\"afterInteractive\"\n       />\n"
                },
                {
                    "date": 1724783142284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n+import { set } from \"mongoose\";\n \n export default function Login() {\n   const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n@@ -31,9 +32,9 @@\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <div>{user}</div>\n+      <div>{JSON.stringify(user)}</div>\n       <Script\n         src=\"https://telegram.org/js/telegram-widget.js?22\"\n         strategy=\"afterInteractive\"\n       />\n"
                },
                {
                    "date": 1724783443846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,46 +2,66 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n-import { set } from \"mongoose\";\n \n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+declare global {\n+  interface Window {\n+    TelegramLoginWidget: {\n+      dataOnauth: (user: TelegramUser) => void;\n+    };\n+  }\n+}\n+\n export default function Login() {\n   const router = useRouter();\n   const [user, setUser] = useState<TelegramUser | null>(null);\n+\n   useEffect(() => {\n-    window.onTelegramAuth = function (user: TelegramUser) {\n-      console.log(\"Logged in as \", user);\n-      setUser(user);\n-      fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            router.push(\"/\");\n-          }\n+    window.TelegramLoginWidget = {\n+      dataOnauth: (user) => {\n+        console.log(\"Logged in as \", user);\n+        setUser(user);\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(user),\n         })\n-        .catch((error) => console.error(\"Error:\", error));\n+          .then((response) => response.json())\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              router.push(\"/\");\n+            }\n+          })\n+          .catch((error) => console.error(\"Error:\", error));\n+      },\n     };\n   }, [router]);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <div>{JSON.stringify(user)}</div>\n+      <div>{user ? JSON.stringify(user) : \"No user data yet\"}</div>\n       <Script\n         src=\"https://telegram.org/js/telegram-widget.js?22\"\n         strategy=\"afterInteractive\"\n       />\n       <div\n         id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-        data-auth-url={`${process.env.NEXT_PUBLIC_APP_URL}/api/auth/telegram`}\n+        data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n         data-request-access=\"write\"></div>\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1724843242085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,9 @@\n-\"use client\";\n+import crypto from \"crypto\";\n \n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import Script from \"next/script\";\n+const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n \n-interface TelegramUser {\n+interface TelegramAuthData {\n   id: number;\n   first_name: string;\n   last_name?: string;\n   username?: string;\n@@ -13,55 +11,17 @@\n   auth_date: number;\n   hash: string;\n }\n \n-declare global {\n-  interface Window {\n-    TelegramLoginWidget: {\n-      dataOnauth: (user: TelegramUser) => void;\n-    };\n-  }\n+export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n+  const { hash, ...data } = authData;\n+  const dataCheckString = Object.keys(data)\n+    .sort()\n+    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n+    .join(\"\\n\");\n+  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n+  const hmac = crypto\n+    .createHmac(\"sha256\", secretKey)\n+    .update(dataCheckString)\n+    .digest(\"hex\");\n+  return hmac === hash;\n }\n-\n-export default function Login() {\n-  const router = useRouter();\n-  const [user, setUser] = useState<TelegramUser | null>(null);\n-\n-  useEffect(() => {\n-    window.TelegramLoginWidget = {\n-      dataOnauth: (user) => {\n-        console.log(\"Logged in as \", user);\n-        setUser(user);\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(user),\n-        })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              router.push(\"/\");\n-            }\n-          })\n-          .catch((error) => console.error(\"Error:\", error));\n-      },\n-    };\n-  }, [router]);\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <div>{user ? JSON.stringify(user) : \"No user data yet\"}</div>\n-      <Script\n-        src=\"https://telegram.org/js/telegram-widget.js?22\"\n-        strategy=\"afterInteractive\"\n-      />\n-      <div\n-        id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-        data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n-        data-request-access=\"write\"></div>\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1724844936341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n-import crypto from \"crypto\";\n+\"use client\";\n \n-const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN as string;\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import Script from \"next/script\";\n \n-interface TelegramAuthData {\n+interface TelegramUser {\n   id: number;\n   first_name: string;\n   last_name?: string;\n   username?: string;\n@@ -11,17 +13,76 @@\n   auth_date: number;\n   hash: string;\n }\n \n-export function verifyTelegramAuth(authData: TelegramAuthData): boolean {\n-  const { hash, ...data } = authData;\n-  const dataCheckString = Object.keys(data)\n-    .sort()\n-    .map((key) => `${key}=${data[key as keyof typeof data]}`)\n-    .join(\"\\n\");\n-  const secretKey = crypto.createHash(\"sha256\").update(BOT_TOKEN).digest();\n-  const hmac = crypto\n-    .createHmac(\"sha256\", secretKey)\n-    .update(dataCheckString)\n-    .digest(\"hex\");\n-  return hmac === hash;\n+declare global {\n+  interface Window {\n+    TelegramLoginWidget: {\n+      dataOnauth: (user: TelegramUser) => void;\n+    };\n+  }\n }\n+\n+export default function Login() {\n+  const router = useRouter();\n+  const [user, setUser] = useState<TelegramUser | null>(null);\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    window.TelegramLoginWidget = {\n+      dataOnauth: (user) => {\n+        console.log(\"Logged in as \", user);\n+        setUser(user);\n+        setIsLoading(true);\n+        setError(null);\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(user),\n+        })\n+          .then((response) => response.json())\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      },\n+    };\n+  }, [router]);\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div> // Replace with your preferred spinner component\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : user ? (\n+        <div>Authenticated as: {user.first_name}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            strategy=\"afterInteractive\"\n+          />\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n+            data-request-access=\"write\"></div>\n+        </>\n+      )}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1724847456774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,27 +13,29 @@\n   auth_date: number;\n   hash: string;\n }\n \n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n declare global {\n   interface Window {\n     TelegramLoginWidget: {\n       dataOnauth: (user: TelegramUser) => void;\n     };\n   }\n }\n \n-export default function Login() {\n+export default function Login({ onLogin }: LoginProps) {\n   const router = useRouter();\n-  const [user, setUser] = useState<TelegramUser | null>(null);\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n     window.TelegramLoginWidget = {\n       dataOnauth: (user) => {\n         console.log(\"Logged in as \", user);\n-        setUser(user);\n         setIsLoading(true);\n         setError(null);\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n@@ -45,8 +47,9 @@\n           .then((response) => response.json())\n           .then((data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n+              onLogin(user);\n               router.push(\"/\");\n             } else {\n               throw new Error(\"No token received\");\n             }\n@@ -59,19 +62,17 @@\n             setIsLoading(false);\n           });\n       },\n     };\n-  }, [router]);\n+  }, [router, onLogin]);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n       {isLoading ? (\n-        <div className=\"spinner\">Loading...</div> // Replace with your preferred spinner component\n+        <div className=\"spinner\">Loading...</div>\n       ) : error ? (\n         <div className=\"error text-red-500\">{error}</div>\n-      ) : user ? (\n-        <div>Authenticated as: {user.first_name}</div>\n       ) : (\n         <>\n           <Script\n             src=\"https://telegram.org/js/telegram-widget.js?22\"\n"
                },
                {
                    "date": 1724847546578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n   }, [router, onLogin]);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram BB</h1>\n       {isLoading ? (\n         <div className=\"spinner\">Loading...</div>\n       ) : error ? (\n         <div className=\"error text-red-500\">{error}</div>\n"
                },
                {
                    "date": 1724847552982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n   }, [router, onLogin]);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram BB</h1>\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n       {isLoading ? (\n         <div className=\"spinner\">Loading...</div>\n       ) : error ? (\n         <div className=\"error text-red-500\">{error}</div>\n"
                },
                {
                    "date": 1724847978256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,29 +13,30 @@\n   auth_date: number;\n   hash: string;\n }\n \n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n declare global {\n   interface Window {\n     TelegramLoginWidget: {\n       dataOnauth: (user: TelegramUser) => void;\n     };\n   }\n }\n \n-export default function Login({ onLogin }: LoginProps) {\n+export default function Login() {\n   const router = useRouter();\n+  const [user, setUser] = useState<TelegramUser | null>(null);\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n+  const [debugInfo, setDebugInfo] = useState(\"\");\n \n   useEffect(() => {\n+    setDebugInfo(`Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`);\n+\n     window.TelegramLoginWidget = {\n       dataOnauth: (user) => {\n         console.log(\"Logged in as \", user);\n+        setUser(user);\n         setIsLoading(true);\n         setError(null);\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n@@ -47,9 +48,8 @@\n           .then((response) => response.json())\n           .then((data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n-              onLogin(user);\n               router.push(\"/\");\n             } else {\n               throw new Error(\"No token received\");\n             }\n@@ -62,17 +62,19 @@\n             setIsLoading(false);\n           });\n       },\n     };\n-  }, [router, onLogin]);\n+  }, [router]);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n       {isLoading ? (\n         <div className=\"spinner\">Loading...</div>\n       ) : error ? (\n         <div className=\"error text-red-500\">{error}</div>\n+      ) : user ? (\n+        <div>Authenticated as: {user.first_name}</div>\n       ) : (\n         <>\n           <Script\n             src=\"https://telegram.org/js/telegram-widget.js?22\"\n@@ -81,8 +83,9 @@\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n             data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n             data-request-access=\"write\"></div>\n+          <div>Debug Info: {debugInfo}</div>\n         </>\n       )}\n     </div>\n   );\n"
                },
                {
                    "date": 1724848471615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import Script from \"next/script\";\n+\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    TelegramLoginWidget: {\n+      dataOnauth: (user: TelegramUser) => void;\n+    };\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    window.TelegramLoginWidget = {\n+      dataOnauth: (user) => {\n+        console.log(\"Logged in as \", user);\n+        setIsLoading(true);\n+        setError(null);\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(user),\n+        })\n+          .then((response) => response.json())\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              onLogin(user);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      },\n+    };\n+  }, [router, onLogin]);\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div>\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            strategy=\"afterInteractive\"\n+          />\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n+            data-request-access=\"write\"></div>\n+        </>\n+      )}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1724848487176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n+import { useRouter } from \"next/router\";\n import Script from \"next/script\";\n \n interface TelegramUser {\n   id: number;\n@@ -79,103 +79,11 @@\n             strategy=\"afterInteractive\"\n           />\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n+            data-onauth=\"TelegramLoginWidget.dataOnauth\"\n             data-request-access=\"write\"></div>\n         </>\n       )}\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import Script from \"next/script\";\n-\n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n-declare global {\n-  interface Window {\n-    TelegramLoginWidget: {\n-      dataOnauth: (user: TelegramUser) => void;\n-    };\n-  }\n-}\n-\n-export default function Login() {\n-  const router = useRouter();\n-  const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-  const [debugInfo, setDebugInfo] = useState(\"\");\n-\n-  useEffect(() => {\n-    setDebugInfo(`Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`);\n-\n-    window.TelegramLoginWidget = {\n-      dataOnauth: (user) => {\n-        console.log(\"Logged in as \", user);\n-        setUser(user);\n-        setIsLoading(true);\n-        setError(null);\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(user),\n-        })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      },\n-    };\n-  }, [router]);\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div>\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : user ? (\n-        <div>Authenticated as: {user.first_name}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-widget.js?22\"\n-            strategy=\"afterInteractive\"\n-          />\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n-            data-request-access=\"write\"></div>\n-          <div>Debug Info: {debugInfo}</div>\n-        </>\n-      )}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1724848544890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/router\";\n+import { useRouter } from \"next/router\"; // Corrected import\n import Script from \"next/script\";\n \n interface TelegramUser {\n   id: number;\n@@ -13,31 +13,33 @@\n   auth_date: number;\n   hash: string;\n }\n \n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n declare global {\n   interface Window {\n     TelegramLoginWidget: {\n       dataOnauth: (user: TelegramUser) => void;\n     };\n   }\n }\n \n-export default function Login({ onLogin }: LoginProps) {\n+export default function Login() {\n   const router = useRouter();\n+  const [user, setUser] = useState<TelegramUser | null>(null);\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n+  const [debugInfo, setDebugInfo] = useState(\"\");\n \n   useEffect(() => {\n+    setDebugInfo(\n+      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n+    );\n+\n     window.TelegramLoginWidget = {\n       dataOnauth: (user) => {\n         console.log(\"Logged in as \", user);\n+        setUser(user);\n         setIsLoading(true);\n-        setError(null);\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n           headers: {\n             \"Content-Type\": \"application/json\",\n@@ -47,9 +49,8 @@\n           .then((response) => response.json())\n           .then((data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n-              onLogin(user);\n               router.push(\"/\");\n             } else {\n               throw new Error(\"No token received\");\n             }\n@@ -62,17 +63,19 @@\n             setIsLoading(false);\n           });\n       },\n     };\n-  }, [router, onLogin]);\n+  }, [router]);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n       {isLoading ? (\n         <div className=\"spinner\">Loading...</div>\n       ) : error ? (\n         <div className=\"error text-red-500\">{error}</div>\n+      ) : user ? (\n+        <div>Authenticated as: {user.first_name}</div>\n       ) : (\n         <>\n           <Script\n             src=\"https://telegram.org/js/telegram-widget.js?22\"\n@@ -81,8 +84,9 @@\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n             data-onauth=\"TelegramLoginWidget.dataOnauth\"\n             data-request-access=\"write\"></div>\n+          <div>Debug Info: {debugInfo}</div>\n         </>\n       )}\n     </div>\n   );\n"
                },
                {
                    "date": 1724848754945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,43 +29,46 @@\n   const [error, setError] = useState<string | null>(null);\n   const [debugInfo, setDebugInfo] = useState(\"\");\n \n   useEffect(() => {\n-    setDebugInfo(\n-      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n-    );\n+    if (typeof window !== \"undefined\") {\n+      // Ensure this runs in client-side\n+      setDebugInfo(\n+        `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n+      );\n \n-    window.TelegramLoginWidget = {\n-      dataOnauth: (user) => {\n-        console.log(\"Logged in as \", user);\n-        setUser(user);\n-        setIsLoading(true);\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(user),\n-        })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n+      window.TelegramLoginWidget = {\n+        dataOnauth: (user) => {\n+          console.log(\"Logged in as \", user);\n+          setUser(user);\n+          setIsLoading(true);\n+          fetch(\"/api/auth/telegram\", {\n+            method: \"POST\",\n+            headers: {\n+              \"Content-Type\": \"application/json\",\n+            },\n+            body: JSON.stringify(user),\n           })\n-          .catch((error) => {\n-            console.error(\"Error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      },\n-    };\n-  }, [router]);\n+            .then((response) => response.json())\n+            .then((data) => {\n+              if (data.token) {\n+                localStorage.setItem(\"token\", data.token);\n+                router.push(\"/\");\n+              } else {\n+                throw new Error(\"No token received\");\n+              }\n+            })\n+            .catch((error) => {\n+              console.error(\"Error:\", error);\n+              setError(\"Failed to authenticate. Please try again.\");\n+            })\n+            .finally(() => {\n+              setIsLoading(false);\n+            });\n+        },\n+      };\n+    }\n+  }, [router]); // Ensure router is in the dependency array\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n"
                },
                {
                    "date": 1724906605140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\"; // Corrected import\n+import Script from \"next/script\";\n+\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+declare global {\n+  interface Window {\n+    TelegramLoginWidget: {\n+      dataOnauth: (user: TelegramUser) => void;\n+    };\n+  }\n+}\n+\n+export default function Login() {\n+  const router = useRouter();\n+  const [user, setUser] = useState<TelegramUser | null>(null);\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+  const [debugInfo, setDebugInfo] = useState(\"\");\n+\n+  useEffect(() => {\n+    if (typeof window !== \"undefined\") {\n+      // Ensure this runs in client-side\n+      setDebugInfo(\n+        `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n+      );\n+\n+      window.TelegramLoginWidget = {\n+        dataOnauth: (user) => {\n+          console.log(\"Logged in as \", user);\n+          setUser(user);\n+          setIsLoading(true);\n+          fetch(\"/api/auth/telegram\", {\n+            method: \"POST\",\n+            headers: {\n+              \"Content-Type\": \"application/json\",\n+            },\n+            body: JSON.stringify(user),\n+          })\n+            .then((response) => response.json())\n+            .then((data) => {\n+              if (data.token) {\n+                localStorage.setItem(\"token\", data.token);\n+                router.push(\"/\");\n+              } else {\n+                throw new Error(\"No token received\");\n+              }\n+            })\n+            .catch((error) => {\n+              console.error(\"Error:\", error);\n+              setError(\"Failed to authenticate. Please try again.\");\n+            })\n+            .finally(() => {\n+              setIsLoading(false);\n+            });\n+        },\n+      };\n+    }\n+  }, [router]); // Ensure router is in the dependency array\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div>\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : user ? (\n+        <div>Authenticated as: {user.first_name}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            strategy=\"afterInteractive\"\n+          />\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"TelegramLoginWidget.dataOnauth\"\n+            data-request-access=\"write\"></div>\n+          <div>Debug Info: {debugInfo}</div>\n+        </>\n+      )}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1724926752773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\"; // Corrected import\n+import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n \n interface TelegramUser {\n   id: number;\n@@ -13,168 +13,70 @@\n   auth_date: number;\n   hash: string;\n }\n \n-declare global {\n-  interface Window {\n-    TelegramLoginWidget: {\n-      dataOnauth: (user: TelegramUser) => void;\n-    };\n-  }\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n }\n \n-export default function Login() {\n-  const router = useRouter();\n-  const [user, setUser] = useState<TelegramUser | null>(null);\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-  const [debugInfo, setDebugInfo] = useState(\"\");\n-\n-  useEffect(() => {\n-    if (typeof window !== \"undefined\") {\n-      // Ensure this runs in client-side\n-      setDebugInfo(\n-        `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n-      );\n-\n-      window.TelegramLoginWidget = {\n-        dataOnauth: (user) => {\n-          console.log(\"Logged in as \", user);\n-          setUser(user);\n-          setIsLoading(true);\n-          fetch(\"/api/auth/telegram\", {\n-            method: \"POST\",\n-            headers: {\n-              \"Content-Type\": \"application/json\",\n-            },\n-            body: JSON.stringify(user),\n-          })\n-            .then((response) => response.json())\n-            .then((data) => {\n-              if (data.token) {\n-                localStorage.setItem(\"token\", data.token);\n-                router.push(\"/\");\n-              } else {\n-                throw new Error(\"No token received\");\n-              }\n-            })\n-            .catch((error) => {\n-              console.error(\"Error:\", error);\n-              setError(\"Failed to authenticate. Please try again.\");\n-            })\n-            .finally(() => {\n-              setIsLoading(false);\n-            });\n-        },\n-      };\n-    }\n-  }, [router]); // Ensure router is in the dependency array\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div>\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : user ? (\n-        <div>Authenticated as: {user.first_name}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-widget.js?22\"\n-            strategy=\"afterInteractive\"\n-          />\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth\"\n-            data-request-access=\"write\"></div>\n-          <div>Debug Info: {debugInfo}</div>\n-        </>\n-      )}\n-    </div>\n-  );\n-}\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/router\"; // Corrected import\n-import Script from \"next/script\";\n-\n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n declare global {\n   interface Window {\n     TelegramLoginWidget: {\n       dataOnauth: (user: TelegramUser) => void;\n     };\n   }\n }\n \n-export default function Login() {\n+export default function Login({ onLogin }: LoginProps) {\n   const router = useRouter();\n-  const [user, setUser] = useState<TelegramUser | null>(null);\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n   const [debugInfo, setDebugInfo] = useState(\"\");\n \n   useEffect(() => {\n-    if (typeof window !== \"undefined\") {\n-      // Ensure this runs in client-side\n-      setDebugInfo(\n-        `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n-      );\n+    setDebugInfo(\n+      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n+    );\n \n-      window.TelegramLoginWidget = {\n-        dataOnauth: (user) => {\n-          console.log(\"Logged in as \", user);\n-          setUser(user);\n-          setIsLoading(true);\n-          fetch(\"/api/auth/telegram\", {\n-            method: \"POST\",\n-            headers: {\n-              \"Content-Type\": \"application/json\",\n-            },\n-            body: JSON.stringify(user),\n+    window.TelegramLoginWidget = {\n+      dataOnauth: (user) => {\n+        console.log(\"Logged in as \", user);\n+        setIsLoading(true);\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(user),\n+        })\n+          .then((response) => response.json())\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              onLogin(user);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n           })\n-            .then((response) => response.json())\n-            .then((data) => {\n-              if (data.token) {\n-                localStorage.setItem(\"token\", data.token);\n-                router.push(\"/\");\n-              } else {\n-                throw new Error(\"No token received\");\n-              }\n-            })\n-            .catch((error) => {\n-              console.error(\"Error:\", error);\n-              setError(\"Failed to authenticate. Please try again.\");\n-            })\n-            .finally(() => {\n-              setIsLoading(false);\n-            });\n-        },\n-      };\n-    }\n-  }, [router]); // Ensure router is in the dependency array\n+          .catch((error) => {\n+            console.error(\"Error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      },\n+    };\n+  }, [router, onLogin]);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n       {isLoading ? (\n         <div className=\"spinner\">Loading...</div>\n       ) : error ? (\n         <div className=\"error text-red-500\">{error}</div>\n-      ) : user ? (\n-        <div>Authenticated as: {user.first_name}</div>\n       ) : (\n         <>\n           <Script\n             src=\"https://telegram.org/js/telegram-widget.js?22\"\n"
                },
                {
                    "date": 1724927358527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,8 +67,9 @@\n           });\n       },\n     };\n   }, [router, onLogin]);\n+  console.log(debugInfo);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n"
                },
                {
                    "date": 1724927468886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n           });\n       },\n     };\n   }, [router, onLogin]);\n-  console.log(debugInfo);\n+  console.log(debugInfo, window.TelegramLoginWidget);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n"
                },
                {
                    "date": 1724927550460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,8 +67,9 @@\n           });\n       },\n     };\n   }, [router, onLogin]);\n+\n   console.log(debugInfo, window.TelegramLoginWidget);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n"
                },
                {
                    "date": 1724927580235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n             strategy=\"afterInteractive\"\n           />\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth\"\n+            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n             data-request-access=\"write\"></div>\n           <div>Debug Info: {debugInfo}</div>\n         </>\n       )}\n"
                },
                {
                    "date": 1724927603874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n       },\n     };\n   }, [router, onLogin]);\n \n-  console.log(debugInfo, window.TelegramLoginWidget);\n+  console.log(debugInfo, window?.TelegramLoginWidget);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n"
                },
                {
                    "date": 1724927674414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,10 @@\n         })\n           .then((response) => response.json())\n           .then((data) => {\n             if (data.token) {\n+              console.log(data.token);\n+\n               localStorage.setItem(\"token\", data.token);\n               onLogin(user);\n               router.push(\"/\");\n             } else {\n"
                },
                {
                    "date": 1724927697525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,10 +49,11 @@\n           body: JSON.stringify(user),\n         })\n           .then((response) => response.json())\n           .then((data) => {\n+            console.log(\"Data:\", data);\n             if (data.token) {\n-              console.log(data.token);\n+              console.log(\"data.token\", data.token);\n \n               localStorage.setItem(\"token\", data.token);\n               onLogin(user);\n               router.push(\"/\");\n"
                },
                {
                    "date": 1724927788028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import Script from \"next/script\";\n+\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    TelegramLoginWidget: {\n+      dataOnauth: (user: TelegramUser) => void;\n+    };\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+  const [debugInfo, setDebugInfo] = useState(\"\");\n+\n+  useEffect(() => {\n+    setDebugInfo(\n+      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n+    );\n+\n+    window.TelegramLoginWidget = {\n+      dataOnauth: (user) => {\n+        console.log(\"Logged in as \", user);\n+        setIsLoading(true);\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(user),\n+        })\n+          .then((response) => response.json())\n+          .then((data) => {\n+            console.log(\"Data:\", data);\n+            if (data.token) {\n+              console.log(\"data.token\", data.token);\n+\n+              localStorage.setItem(\"token\", data.token);\n+              onLogin(user);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      },\n+    };\n+  }, [router, onLogin]);\n+\n+  console.log(debugInfo, window && window.TelegramLoginWidget);\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div>\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            strategy=\"afterInteractive\"\n+          />\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n+            data-request-access=\"write\"></div>\n+          <div>Debug Info: {debugInfo}</div>\n+        </>\n+      )}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1724927879585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n       },\n     };\n   }, [router, onLogin]);\n \n-  console.log(debugInfo, window && window.TelegramLoginWidget);\n+  console.log(debugInfo);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n@@ -96,103 +96,4 @@\n       )}\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import Script from \"next/script\";\n-\n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-declare global {\n-  interface Window {\n-    TelegramLoginWidget: {\n-      dataOnauth: (user: TelegramUser) => void;\n-    };\n-  }\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-  const [debugInfo, setDebugInfo] = useState(\"\");\n-\n-  useEffect(() => {\n-    setDebugInfo(\n-      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n-    );\n-\n-    window.TelegramLoginWidget = {\n-      dataOnauth: (user) => {\n-        console.log(\"Logged in as \", user);\n-        setIsLoading(true);\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(user),\n-        })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            console.log(\"Data:\", data);\n-            if (data.token) {\n-              console.log(\"data.token\", data.token);\n-\n-              localStorage.setItem(\"token\", data.token);\n-              onLogin(user);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      },\n-    };\n-  }, [router, onLogin]);\n-\n-  console.log(debugInfo, window?.TelegramLoginWidget);\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div>\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-widget.js?22\"\n-            strategy=\"afterInteractive\"\n-          />\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n-            data-request-access=\"write\"></div>\n-          <div>Debug Info: {debugInfo}</div>\n-        </>\n-      )}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1724927929477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n             strategy=\"afterInteractive\"\n           />\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n+            data-onauth=\"TelegramLoginWidget.dataOnauth\"\n             data-request-access=\"write\"></div>\n           <div>Debug Info: {debugInfo}</div>\n         </>\n       )}\n"
                },
                {
                    "date": 1724928135100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n             strategy=\"afterInteractive\"\n           />\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth\"\n+            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n             data-request-access=\"write\"></div>\n           <div>Debug Info: {debugInfo}</div>\n         </>\n       )}\n"
                },
                {
                    "date": 1724928147890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n       },\n     };\n   }, [router, onLogin]);\n \n-  console.log(debugInfo);\n+  //   console.log(debugInfo);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n"
                },
                {
                    "date": 1724928387446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n       },\n     };\n   }, [router, onLogin]);\n \n-  //   console.log(debugInfo);\n+  console.log(isLoading);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n"
                },
                {
                    "date": 1724928663392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,11 +70,83 @@\n           });\n       },\n     };\n   }, [router, onLogin]);\n+\"use client\";\n \n-  console.log(isLoading);\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import Script from \"next/script\";\n \n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    TelegramLoginWidget: {\n+      dataOnauth: (user: TelegramUser) => void;\n+    };\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+  const [debugInfo, setDebugInfo] = useState(\"\");\n+\n+  useEffect(() => {\n+    setDebugInfo(\n+      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n+    );\n+\n+    window.TelegramLoginWidget = {\n+      dataOnauth: (user) => {\n+        console.log(\"Logged in as \", user);\n+        setIsLoading(true);\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(user),\n+        })\n+          .then((response) => response.json())\n+          .then((data) => {\n+            console.log(\"Data:\", data);\n+            if (data.token) {\n+              console.log(\"data.token\", data.token);\n+              localStorage.setItem(\"token\", data.token);\n+              onLogin(user);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      },\n+    };\n+  }, [router, onLogin]);\n+\n+  console.log(\"Debug Info:\", debugInfo);\n+\n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n       {isLoading ? (\n@@ -88,10 +160,11 @@\n             strategy=\"afterInteractive\"\n           />\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth(user)\"\n-            data-request-access=\"write\"></div>\n+            data-onauth=\"TelegramLoginWidget.dataOnauth\"\n+            data-request-access=\"write\"\n+          ></div>\n           <div>Debug Info: {debugInfo}</div>\n         </>\n       )}\n     </div>\n"
                },
                {
                    "date": 1724928678933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,8 @@\n           .then((data) => {\n             console.log(\"Data:\", data);\n             if (data.token) {\n               console.log(\"data.token\", data.token);\n-\n               localStorage.setItem(\"token\", data.token);\n               onLogin(user);\n               router.push(\"/\");\n             } else {\n@@ -70,81 +69,9 @@\n           });\n       },\n     };\n   }, [router, onLogin]);\n-\"use client\";\n \n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import Script from \"next/script\";\n-\n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-declare global {\n-  interface Window {\n-    TelegramLoginWidget: {\n-      dataOnauth: (user: TelegramUser) => void;\n-    };\n-  }\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-  const [debugInfo, setDebugInfo] = useState(\"\");\n-\n-  useEffect(() => {\n-    setDebugInfo(\n-      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n-    );\n-\n-    window.TelegramLoginWidget = {\n-      dataOnauth: (user) => {\n-        console.log(\"Logged in as \", user);\n-        setIsLoading(true);\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(user),\n-        })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            console.log(\"Data:\", data);\n-            if (data.token) {\n-              console.log(\"data.token\", data.token);\n-              localStorage.setItem(\"token\", data.token);\n-              onLogin(user);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      },\n-    };\n-  }, [router, onLogin]);\n-\n   console.log(\"Debug Info:\", debugInfo);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n@@ -161,10 +88,9 @@\n           />\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n             data-onauth=\"TelegramLoginWidget.dataOnauth\"\n-            data-request-access=\"write\"\n-          ></div>\n+            data-request-access=\"write\"></div>\n           <div>Debug Info: {debugInfo}</div>\n         </>\n       )}\n     </div>\n"
                },
                {
                    "date": 1724931115111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n       },\n     };\n   }, [router, onLogin]);\n \n-  console.log(\"Debug Info:\", debugInfo);\n+  console.log(\"Debug Info:\", debugInfo, \"Error:\", error, \"Loading:\", isLoading);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n"
                },
                {
                    "date": 1724931327156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,19 +2,10 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n+import { TelegramUser } from \"@/lib/auth\";\n \n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n@@ -49,11 +40,10 @@\n           body: JSON.stringify(user),\n         })\n           .then((response) => response.json())\n           .then((data) => {\n-            console.log(\"Data:\", data);\n+            console.log(\"Auth response:\", data);\n             if (data.token) {\n-              console.log(\"data.token\", data.token);\n               localStorage.setItem(\"token\", data.token);\n               onLogin(user);\n               router.push(\"/\");\n             } else {\n@@ -70,10 +60,8 @@\n       },\n     };\n   }, [router, onLogin]);\n \n-  console.log(\"Debug Info:\", debugInfo, \"Error:\", error, \"Loading:\", isLoading);\n-\n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n       {isLoading ? (\n"
                },
                {
                    "date": 1724931381096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n           });\n       },\n     };\n   }, [router, onLogin]);\n+  console.log(\"Is Loading:\", isLoading + \" \" + error + \"error \" + debugInfo);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n"
                },
                {
                    "date": 1724931439451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n             setIsLoading(false);\n           });\n       },\n     };\n+    console.log(\"TelegramLoginWidget:\", window.TelegramLoginWidget);\n   }, [router, onLogin]);\n   console.log(\"Is Loading:\", isLoading + \" \" + error + \"error \" + debugInfo);\n \n   return (\n"
                },
                {
                    "date": 1724931641000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,19 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n-import { TelegramUser } from \"@/lib/auth\";\n \n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n@@ -27,43 +36,51 @@\n     setDebugInfo(\n       `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n     );\n \n-    window.TelegramLoginWidget = {\n-      dataOnauth: (user) => {\n-        console.log(\"Logged in as \", user);\n-        setIsLoading(true);\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(user),\n+    // Define the global callback function\n+    window.onTelegramAuth = function (user: TelegramUser) {\n+      console.log(\"Logged in as \", user);\n+      setIsLoading(true);\n+      fetch(\"/api/auth/telegram\", {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify(user),\n+      })\n+        .then((response) => response.json())\n+        .then((data) => {\n+          console.log(\"Auth response:\", data);\n+          if (data.token) {\n+            localStorage.setItem(\"token\", data.token);\n+            onLogin(user);\n+            router.push(\"/\");\n+          } else {\n+            throw new Error(\"No token received\");\n+          }\n         })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            console.log(\"Auth response:\", data);\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              onLogin(user);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      },\n+        .catch((error) => {\n+          console.error(\"Error:\", error);\n+          setError(\"Failed to authenticate. Please try again.\");\n+        })\n+        .finally(() => {\n+          setIsLoading(false);\n+        });\n     };\n-    console.log(\"TelegramLoginWidget:\", window.TelegramLoginWidget);\n+\n+    console.log(\"TelegramLoginWidget setup complete\");\n   }, [router, onLogin]);\n-  console.log(\"Is Loading:\", isLoading + \" \" + error + \"error \" + debugInfo);\n \n+  console.log(\n+    \"Is Loading:\",\n+    isLoading,\n+    \"Error:\",\n+    error,\n+    \"Debug Info:\",\n+    debugInfo\n+  );\n+\n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n       {isLoading ? (\n@@ -77,9 +94,9 @@\n             strategy=\"afterInteractive\"\n           />\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth\"\n+            data-onauth=\"onTelegramAuth(user)\"\n             data-request-access=\"write\"></div>\n           <div>Debug Info: {debugInfo}</div>\n         </>\n       )}\n"
                },
                {
                    "date": 1724931751549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,19 +2,10 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n+import { TelegramUser } from \"@/lib/auth\";\n \n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n@@ -36,51 +27,43 @@\n     setDebugInfo(\n       `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n     );\n \n-    // Define the global callback function\n-    window.onTelegramAuth = function (user: TelegramUser) {\n-      console.log(\"Logged in as \", user);\n-      setIsLoading(true);\n-      fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          console.log(\"Auth response:\", data);\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            onLogin(user);\n-            router.push(\"/\");\n-          } else {\n-            throw new Error(\"No token received\");\n-          }\n+    window.TelegramLoginWidget = {\n+      dataOnauth: (user) => {\n+        console.log(\"Logged in as \", user);\n+        setIsLoading(true);\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(user),\n         })\n-        .catch((error) => {\n-          console.error(\"Error:\", error);\n-          setError(\"Failed to authenticate. Please try again.\");\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n+          .then((response) => response.json())\n+          .then((data) => {\n+            console.log(\"Auth response:\", data);\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              onLogin(user);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      },\n     };\n-\n-    console.log(\"TelegramLoginWidget setup complete\");\n+    console.log(\"TelegramLoginWidget:\", window.TelegramLoginWidget);\n   }, [router, onLogin]);\n+  console.log(\"Is Loading:\", isLoading + \" \" + error + \"error \" + debugInfo);\n \n-  console.log(\n-    \"Is Loading:\",\n-    isLoading,\n-    \"Error:\",\n-    error,\n-    \"Debug Info:\",\n-    debugInfo\n-  );\n-\n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n       {isLoading ? (\n@@ -94,9 +77,9 @@\n             strategy=\"afterInteractive\"\n           />\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"onTelegramAuth(user)\"\n+            data-onauth=\"TelegramLoginWidget.dataOnauth\"\n             data-request-access=\"write\"></div>\n           <div>Debug Info: {debugInfo}</div>\n         </>\n       )}\n"
                },
                {
                    "date": 1724931785995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import Script from \"next/script\";\n+import { TelegramUser } from \"../lib/auth\";\n+// import { TelegramUser } from \"@/lib/auth\";\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    TelegramLoginWidget: {\n+      dataOnauth: (user: TelegramUser) => void;\n+    };\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+  const [debugInfo, setDebugInfo] = useState(\"\");\n+\n+  useEffect(() => {\n+    setDebugInfo(\n+      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n+    );\n+\n+    window.TelegramLoginWidget = {\n+      dataOnauth: (user) => {\n+        console.log(\"Logged in as \", user);\n+        setIsLoading(true);\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(user),\n+        })\n+          .then((response) => response.json())\n+          .then((data) => {\n+            console.log(\"Auth response:\", data);\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              onLogin(user);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      },\n+    };\n+    console.log(\"TelegramLoginWidget:\", window.TelegramLoginWidget);\n+  }, [router, onLogin]);\n+  console.log(\"Is Loading:\", isLoading + \" \" + error + \"error \" + debugInfo);\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div>\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            strategy=\"afterInteractive\"\n+          />\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"TelegramLoginWidget.dataOnauth\"\n+            data-request-access=\"write\"></div>\n+          <div>Debug Info: {debugInfo}</div>\n+        </>\n+      )}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1724931870075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,11 +2,19 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n-import { TelegramUser } from \"../lib/auth\";\n-// import { TelegramUser } from \"@/lib/auth\";\n \n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n@@ -28,131 +36,51 @@\n     setDebugInfo(\n       `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n     );\n \n-    window.TelegramLoginWidget = {\n-      dataOnauth: (user) => {\n-        console.log(\"Logged in as \", user);\n-        setIsLoading(true);\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(user),\n+    // Define the global callback function\n+    window.onTelegramAuth = function (user: TelegramUser) {\n+      console.log(\"Logged in as \", user);\n+      setIsLoading(true);\n+      fetch(\"/api/auth/telegram\", {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify(user),\n+      })\n+        .then((response) => response.json())\n+        .then((data) => {\n+          console.log(\"Auth response:\", data);\n+          if (data.token) {\n+            localStorage.setItem(\"token\", data.token);\n+            onLogin(user);\n+            router.push(\"/\");\n+          } else {\n+            throw new Error(\"No token received\");\n+          }\n         })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            console.log(\"Auth response:\", data);\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              onLogin(user);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      },\n+        .catch((error) => {\n+          console.error(\"Error:\", error);\n+          setError(\"Failed to authenticate. Please try again.\");\n+        })\n+        .finally(() => {\n+          setIsLoading(false);\n+        });\n     };\n-    console.log(\"TelegramLoginWidget:\", window.TelegramLoginWidget);\n+\n+    console.log(\"TelegramLoginWidget setup complete\");\n   }, [router, onLogin]);\n-  console.log(\"Is Loading:\", isLoading + \" \" + error + \"error \" + debugInfo);\n \n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div>\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-widget.js?22\"\n-            strategy=\"afterInteractive\"\n-          />\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth\"\n-            data-request-access=\"write\"></div>\n-          <div>Debug Info: {debugInfo}</div>\n-        </>\n-      )}\n-    </div>\n+  console.log(\n+    \"Is Loading:\",\n+    isLoading,\n+    \"Error:\",\n+    error,\n+    \"Debug Info:\",\n+    debugInfo\n   );\n-}\n-\"use client\";\n \n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import Script from \"next/script\";\n-import { TelegramUser } from \"@/lib/auth\";\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-declare global {\n-  interface Window {\n-    TelegramLoginWidget: {\n-      dataOnauth: (user: TelegramUser) => void;\n-    };\n-  }\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-  const [debugInfo, setDebugInfo] = useState(\"\");\n-\n-  useEffect(() => {\n-    setDebugInfo(\n-      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n-    );\n-\n-    window.TelegramLoginWidget = {\n-      dataOnauth: (user) => {\n-        console.log(\"Logged in as \", user);\n-        setIsLoading(true);\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(user),\n-        })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            console.log(\"Auth response:\", data);\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              onLogin(user);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      },\n-    };\n-    console.log(\"TelegramLoginWidget:\", window.TelegramLoginWidget);\n-  }, [router, onLogin]);\n-  console.log(\"Is Loading:\", isLoading + \" \" + error + \"error \" + debugInfo);\n-\n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n       {isLoading ? (\n@@ -166,9 +94,9 @@\n             strategy=\"afterInteractive\"\n           />\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"TelegramLoginWidget.dataOnauth\"\n+            data-onauth=\"onTelegramAuth(user)\"\n             data-request-access=\"write\"></div>\n           <div>Debug Info: {debugInfo}</div>\n         </>\n       )}\n"
                },
                {
                    "date": 1724932389523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n       `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n     );\n \n     // Define the global callback function\n-    window.onTelegramAuth = function (user: TelegramUser) {\n+    window.onTelegramAuth = function async(user: TelegramUser) {\n       console.log(\"Logged in as \", user);\n       setIsLoading(true);\n       fetch(\"/api/auth/telegram\", {\n         method: \"POST\",\n"
                },
                {
                    "date": 1724932411702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n       `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n     );\n \n     // Define the global callback function\n-    window.onTelegramAuth = function async(user: TelegramUser) {\n+    window.onTelegramAuth = async function (user: TelegramUser) {\n       console.log(\"Logged in as \", user);\n       setIsLoading(true);\n       fetch(\"/api/auth/telegram\", {\n         method: \"POST\",\n"
                },
                {
                    "date": 1724932446174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,9 @@\n         .finally(() => {\n           setIsLoading(false);\n         });\n     };\n+    console.log(window.TelegramLoginWidget);\n \n     console.log(\"TelegramLoginWidget setup complete\");\n   }, [router, onLogin]);\n \n"
                },
                {
                    "date": 1724932577981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,106 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import Script from \"next/script\";\n+\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    TelegramLoginWidget: {\n+      dataOnauth: (user: TelegramUser) => void;\n+    };\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+  const [debugInfo, setDebugInfo] = useState(\"\");\n+\n+  useEffect(() => {\n+    setDebugInfo(\n+      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n+    );\n+\n+    // Define the global callback function\n+    window.onTelegramAuth = async function (user: TelegramUser) {\n+      console.log(\"Logged in as \", user);\n+      setIsLoading(true);\n+      await fetch(\"/api/auth/telegram\", {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify(user),\n+      })\n+        .then((response) => response.json())\n+        .then((data) => {\n+          console.log(\"Auth response:\", data);\n+          if (data.token) {\n+            localStorage.setItem(\"token\", data.token);\n+            onLogin(user);\n+            router.push(\"/\");\n+          } else {\n+            throw new Error(\"No token received\");\n+          }\n+        })\n+        .catch((error) => {\n+          console.error(\"Error:\", error);\n+          setError(\"Failed to authenticate. Please try again.\");\n+        })\n+        .finally(() => {\n+          setIsLoading(false);\n+        });\n+    };\n+    console.log(window.TelegramLoginWidget);\n+\n+    console.log(\"TelegramLoginWidget setup complete\");\n+  }, [router, onLogin]);\n+\n+  console.log(\n+    \"Is Loading:\",\n+    isLoading,\n+    \"Error:\",\n+    error,\n+    \"Debug Info:\",\n+    debugInfo\n+  );\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div>\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            strategy=\"afterInteractive\"\n+          />\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"onTelegramAuth(user)\"\n+            data-request-access=\"write\"></div>\n+          <div>Debug Info: {debugInfo}</div>\n+        </>\n+      )}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1724932624524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,106 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import Script from \"next/script\";\n+\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    TelegramLoginWidget: {\n+      dataOnauth: (user: TelegramUser) => void;\n+    };\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+  const [debugInfo, setDebugInfo] = useState(\"\");\n+\n+  useEffect(() => {\n+    setDebugInfo(\n+      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n+    );\n+\n+    // Define the global callback function\n+    window.onTelegramAuth = function async(user: TelegramUser) {\n+      console.log(\"Logged in as \", user);\n+      setIsLoading(true);\n+      await fetch(\"/api/auth/telegram\", {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify(user),\n+      })\n+        .then((response) => response.json())\n+        .then((data) => {\n+          console.log(\"Auth response:\", data);\n+          if (data.token) {\n+            localStorage.setItem(\"token\", data.token);\n+            onLogin(user);\n+            router.push(\"/\");\n+          } else {\n+            throw new Error(\"No token received\");\n+          }\n+        })\n+        .catch((error) => {\n+          console.error(\"Error:\", error);\n+          setError(\"Failed to authenticate. Please try again.\");\n+        })\n+        .finally(() => {\n+          setIsLoading(false);\n+        });\n+    };\n+    console.log(window.TelegramLoginWidget);\n+\n+    console.log(\"TelegramLoginWidget setup complete\");\n+  }, [router, onLogin]);\n+\n+  console.log(\n+    \"Is Loading:\",\n+    isLoading,\n+    \"Error:\",\n+    error,\n+    \"Debug Info:\",\n+    debugInfo\n+  );\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div>\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            strategy=\"afterInteractive\"\n+          />\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"onTelegramAuth(user)\"\n+            data-request-access=\"write\"></div>\n+          <div>Debug Info: {debugInfo}</div>\n+        </>\n+      )}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1724932641177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,114 +37,8 @@\n       `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n     );\n \n     // Define the global callback function\n-    window.onTelegramAuth = function async(user: TelegramUser) {\n-      console.log(\"Logged in as \", user);\n-      setIsLoading(true);\n-      await fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          console.log(\"Auth response:\", data);\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            onLogin(user);\n-            router.push(\"/\");\n-          } else {\n-            throw new Error(\"No token received\");\n-          }\n-        })\n-        .catch((error) => {\n-          console.error(\"Error:\", error);\n-          setError(\"Failed to authenticate. Please try again.\");\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    };\n-    console.log(window.TelegramLoginWidget);\n-\n-    console.log(\"TelegramLoginWidget setup complete\");\n-  }, [router, onLogin]);\n-\n-  console.log(\n-    \"Is Loading:\",\n-    isLoading,\n-    \"Error:\",\n-    error,\n-    \"Debug Info:\",\n-    debugInfo\n-  );\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div>\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-widget.js?22\"\n-            strategy=\"afterInteractive\"\n-          />\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"onTelegramAuth(user)\"\n-            data-request-access=\"write\"></div>\n-          <div>Debug Info: {debugInfo}</div>\n-        </>\n-      )}\n-    </div>\n-  );\n-}\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import Script from \"next/script\";\n-\n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-declare global {\n-  interface Window {\n-    TelegramLoginWidget: {\n-      dataOnauth: (user: TelegramUser) => void;\n-    };\n-  }\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-  const [debugInfo, setDebugInfo] = useState(\"\");\n-\n-  useEffect(() => {\n-    setDebugInfo(\n-      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n-    );\n-\n-    // Define the global callback function\n     window.onTelegramAuth = async function (user: TelegramUser) {\n       console.log(\"Logged in as \", user);\n       setIsLoading(true);\n       await fetch(\"/api/auth/telegram\", {\n@@ -209,110 +103,4 @@\n       )}\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import Script from \"next/script\";\n-\n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-declare global {\n-  interface Window {\n-    TelegramLoginWidget: {\n-      dataOnauth: (user: TelegramUser) => void;\n-    };\n-  }\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-  const [debugInfo, setDebugInfo] = useState(\"\");\n-\n-  useEffect(() => {\n-    setDebugInfo(\n-      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n-    );\n-\n-    // Define the global callback function\n-    window.onTelegramAuth = async function (user: TelegramUser) {\n-      console.log(\"Logged in as \", user);\n-      setIsLoading(true);\n-      fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          console.log(\"Auth response:\", data);\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            onLogin(user);\n-            router.push(\"/\");\n-          } else {\n-            throw new Error(\"No token received\");\n-          }\n-        })\n-        .catch((error) => {\n-          console.error(\"Error:\", error);\n-          setError(\"Failed to authenticate. Please try again.\");\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    };\n-    console.log(window.TelegramLoginWidget);\n-\n-    console.log(\"TelegramLoginWidget setup complete\");\n-  }, [router, onLogin]);\n-\n-  console.log(\n-    \"Is Loading:\",\n-    isLoading,\n-    \"Error:\",\n-    error,\n-    \"Debug Info:\",\n-    debugInfo\n-  );\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div>\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-widget.js?22\"\n-            strategy=\"afterInteractive\"\n-          />\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"onTelegramAuth(user)\"\n-            data-request-access=\"write\"></div>\n-          <div>Debug Info: {debugInfo}</div>\n-        </>\n-      )}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1724932690039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,28 +2,17 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n+import { TelegramUser } from \"@/lib/auth\";\n \n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n declare global {\n   interface Window {\n-    TelegramLoginWidget: {\n-      dataOnauth: (user: TelegramUser) => void;\n-    };\n+    onTelegramAuth: (user: TelegramUser) => void;\n   }\n }\n \n export default function Login({ onLogin }: LoginProps) {\n@@ -36,13 +25,13 @@\n     setDebugInfo(\n       `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n     );\n \n-    // Define the global callback function\n-    window.onTelegramAuth = async function (user: TelegramUser) {\n+    // Set up the global function\n+    window.onTelegramAuth = (user) => {\n       console.log(\"Logged in as \", user);\n       setIsLoading(true);\n-      await fetch(\"/api/auth/telegram\", {\n+      fetch(\"/api/auth/telegram\", {\n         method: \"POST\",\n         headers: {\n           \"Content-Type\": \"application/json\",\n         },\n@@ -66,11 +55,10 @@\n         .finally(() => {\n           setIsLoading(false);\n         });\n     };\n-    console.log(window.TelegramLoginWidget);\n \n-    console.log(\"TelegramLoginWidget setup complete\");\n+    console.log(\"onTelegramAuth set:\", window.onTelegramAuth);\n   }, [router, onLogin]);\n \n   console.log(\n     \"Is Loading:\",\n@@ -95,9 +83,9 @@\n             strategy=\"afterInteractive\"\n           />\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"onTelegramAuth(user)\"\n+            data-onauth=\"onTelegramAuth\"\n             data-request-access=\"write\"></div>\n           <div>Debug Info: {debugInfo}</div>\n         </>\n       )}\n"
                },
                {
                    "date": 1724932697804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,10 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n-import { TelegramUser } from \"@/lib/auth\";\n+import { TelegramUser } from \"../lib/auth\";\n+// import { TelegramUser } from \"@/lib/auth\";\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n"
                },
                {
                    "date": 1724932733210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,8 @@\n   useEffect(() => {\n     setDebugInfo(\n       `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n     );\n-\n     // Set up the global function\n     window.onTelegramAuth = (user) => {\n       console.log(\"Logged in as \", user);\n       setIsLoading(true);\n"
                },
                {
                    "date": 1724932930954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import Script from \"next/script\";\n+import { TelegramUser } from \"../lib/auth\";\n+// import { TelegramUser } from \"@/lib/auth\";\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    onTelegramAuth: (user: TelegramUser) => void;\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+  const [debugInfo, setDebugInfo] = useState(\"\");\n+\n+  useEffect(() => {\n+    setDebugInfo(\n+      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n+    );\n+    // Set up the global function\n+    const action = (window.onTelegramAuth = (user) => {\n+      console.log(\"Logged in as \", user);\n+      setIsLoading(true);\n+      fetch(\"/api/auth/telegram\", {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify(user),\n+      })\n+        .then((response) => response.json())\n+        .then((data) => {\n+          console.log(\"Auth response:\", data);\n+          if (data.token) {\n+            localStorage.setItem(\"token\", data.token);\n+            onLogin(user);\n+            router.push(\"/\");\n+          } else {\n+            throw new Error(\"No token received\");\n+          }\n+        })\n+        .catch((error) => {\n+          console.error(\"Error:\", error);\n+          setError(\"Failed to authenticate. Please try again.\");\n+        })\n+        .finally(() => {\n+          setIsLoading(false);\n+        });\n+    });\n+    action(user);\n+    console.log(\"onTelegramAuth set:\", window.onTelegramAuth);\n+  }, [router, onLogin]);\n+\n+  console.log(\n+    \"Is Loading:\",\n+    isLoading,\n+    \"Error:\",\n+    error,\n+    \"Debug Info:\",\n+    debugInfo\n+  );\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div>\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            strategy=\"afterInteractive\"\n+          />\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"onTelegramAuth\"\n+            data-request-access=\"write\"></div>\n+          <div>Debug Info: {debugInfo}</div>\n+        </>\n+      )}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1724932961469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,98 +91,4 @@\n       )}\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import Script from \"next/script\";\n-import { TelegramUser } from \"../lib/auth\";\n-// import { TelegramUser } from \"@/lib/auth\";\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-declare global {\n-  interface Window {\n-    onTelegramAuth: (user: TelegramUser) => void;\n-  }\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-  const [debugInfo, setDebugInfo] = useState(\"\");\n-\n-  useEffect(() => {\n-    setDebugInfo(\n-      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n-    );\n-    // Set up the global function\n-    window.onTelegramAuth = (user) => {\n-      console.log(\"Logged in as \", user);\n-      setIsLoading(true);\n-      fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          console.log(\"Auth response:\", data);\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            onLogin(user);\n-            router.push(\"/\");\n-          } else {\n-            throw new Error(\"No token received\");\n-          }\n-        })\n-        .catch((error) => {\n-          console.error(\"Error:\", error);\n-          setError(\"Failed to authenticate. Please try again.\");\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    };\n-\n-    console.log(\"onTelegramAuth set:\", window.onTelegramAuth);\n-  }, [router, onLogin]);\n-\n-  console.log(\n-    \"Is Loading:\",\n-    isLoading,\n-    \"Error:\",\n-    error,\n-    \"Debug Info:\",\n-    debugInfo\n-  );\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div>\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-widget.js?22\"\n-            strategy=\"afterInteractive\"\n-          />\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"onTelegramAuth\"\n-            data-request-access=\"write\"></div>\n-          <div>Debug Info: {debugInfo}</div>\n-        </>\n-      )}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1724933008813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     setDebugInfo(\n       `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n     );\n     // Set up the global function\n-    const action = (window.onTelegramAuth = (user) => {\n+    const action = window.onTelegramAuth = (user) => {\n       console.log(\"Logged in as \", user);\n       setIsLoading(true);\n       fetch(\"/api/auth/telegram\", {\n         method: \"POST\",\n@@ -54,10 +54,10 @@\n         })\n         .finally(() => {\n           setIsLoading(false);\n         });\n-    });\n-    action(user);\n+    };\n+    action(user:TelegramUser);\n     console.log(\"onTelegramAuth set:\", window.onTelegramAuth);\n   }, [router, onLogin]);\n \n   console.log(\n"
                },
                {
                    "date": 1724933040497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     setDebugInfo(\n       `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n     );\n     // Set up the global function\n-    const action = window.onTelegramAuth = (user) => {\n+    const action = (window.onTelegramAuth = (user) => {\n       console.log(\"Logged in as \", user);\n       setIsLoading(true);\n       fetch(\"/api/auth/telegram\", {\n         method: \"POST\",\n@@ -54,10 +54,10 @@\n         })\n         .finally(() => {\n           setIsLoading(false);\n         });\n-    };\n-    action(user:TelegramUser);\n+    });\n+\n     console.log(\"onTelegramAuth set:\", window.onTelegramAuth);\n   }, [router, onLogin]);\n \n   console.log(\n"
                },
                {
                    "date": 1724933242213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +1,78 @@\n \"use client\";\n \n-import { useEffect, useState } from \"react\";\n+import { useEffect, useState, useCallback } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n-import { TelegramUser } from \"../lib/auth\";\n-// import { TelegramUser } from \"@/lib/auth\";\n \n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n-declare global {\n-  interface Window {\n-    onTelegramAuth: (user: TelegramUser) => void;\n-  }\n-}\n-\n export default function Login({ onLogin }: LoginProps) {\n   const router = useRouter();\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n   const [debugInfo, setDebugInfo] = useState(\"\");\n \n+  const handleTelegramAuth = useCallback(\n+    async (user: TelegramUser) => {\n+      console.log(\"Logged in as \", user);\n+      setIsLoading(true);\n+      try {\n+        const response = await fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(user),\n+        });\n+        const data = await response.json();\n+        console.log(\"Auth response:\", data);\n+        if (data.token) {\n+          localStorage.setItem(\"token\", data.token);\n+          onLogin(user);\n+          router.push(\"/\");\n+        } else {\n+          throw new Error(\"No token received\");\n+        }\n+      } catch (error) {\n+        console.error(\"Error:\", error);\n+        setError(\"Failed to authenticate. Please try again.\");\n+      } finally {\n+        setIsLoading(false);\n+      }\n+    },\n+    [onLogin, router]\n+  );\n+\n   useEffect(() => {\n     setDebugInfo(\n       `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n     );\n-    // Set up the global function\n-    const action = (window.onTelegramAuth = (user) => {\n-      console.log(\"Logged in as \", user);\n-      setIsLoading(true);\n-      fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          console.log(\"Auth response:\", data);\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            onLogin(user);\n-            router.push(\"/\");\n-          } else {\n-            throw new Error(\"No token received\");\n-          }\n-        })\n-        .catch((error) => {\n-          console.error(\"Error:\", error);\n-          setError(\"Failed to authenticate. Please try again.\");\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    });\n \n-    console.log(\"onTelegramAuth set:\", window.onTelegramAuth);\n-  }, [router, onLogin]);\n+    // Define the global callback function\n+    window.onTelegramAuth = handleTelegramAuth;\n \n+    console.log(\"TelegramLoginWidget setup complete\");\n+    console.log(\"Is onTelegramAuth defined?\", !!window.onTelegramAuth);\n+\n+    // Cleanup function\n+    return () => {\n+      delete window.onTelegramAuth;\n+    };\n+  }, [handleTelegramAuth]);\n+\n   console.log(\n     \"Is Loading:\",\n     isLoading,\n     \"Error:\",\n@@ -83,12 +95,19 @@\n             strategy=\"afterInteractive\"\n           />\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"onTelegramAuth\"\n+            data-onauth=\"onTelegramAuth(user)\"\n             data-request-access=\"write\"></div>\n           <div>Debug Info: {debugInfo}</div>\n         </>\n       )}\n     </div>\n   );\n }\n+\n+// Add this type declaration at the end of your file\n+declare global {\n+  interface Window {\n+    onTelegramAuth?: (user: TelegramUser) => void;\n+  }\n+}\n"
                },
                {
                    "date": 1724933305961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n     console.log(\"Is onTelegramAuth defined?\", !!window.onTelegramAuth);\n \n     // Cleanup function\n     return () => {\n-      delete window.onTelegramAuth;\n+      window && delete window?.onTelegramAuth;\n     };\n   }, [handleTelegramAuth]);\n \n   console.log(\n"
                },
                {
                    "date": 1724933321340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n     console.log(\"Is onTelegramAuth defined?\", !!window.onTelegramAuth);\n \n     // Cleanup function\n     return () => {\n-      window && delete window?.onTelegramAuth;\n+      delete window.onTelegramAuth;\n     };\n   }, [handleTelegramAuth]);\n \n   console.log(\n@@ -107,7 +107,7 @@\n \n // Add this type declaration at the end of your file\n declare global {\n   interface Window {\n-    onTelegramAuth?: (user: TelegramUser) => void;\n+    onTelegramAuth: (user: TelegramUser) => void;\n   }\n }\n"
                },
                {
                    "date": 1724933383664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,78 +1,66 @@\n \"use client\";\n \n-import { useEffect, useState, useCallback } from \"react\";\n+import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n+import { TelegramUser } from \"../lib/auth\";\n+// import { TelegramUser } from \"@/lib/auth\";\n \n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n+declare global {\n+  interface Window {\n+    onTelegramAuth: (user: TelegramUser) => void;\n+  }\n+}\n+\n export default function Login({ onLogin }: LoginProps) {\n   const router = useRouter();\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n   const [debugInfo, setDebugInfo] = useState(\"\");\n \n-  const handleTelegramAuth = useCallback(\n-    async (user: TelegramUser) => {\n-      console.log(\"Logged in as \", user);\n-      setIsLoading(true);\n-      try {\n-        const response = await fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(user),\n-        });\n-        const data = await response.json();\n-        console.log(\"Auth response:\", data);\n-        if (data.token) {\n-          localStorage.setItem(\"token\", data.token);\n-          onLogin(user);\n-          router.push(\"/\");\n-        } else {\n-          throw new Error(\"No token received\");\n-        }\n-      } catch (error) {\n-        console.error(\"Error:\", error);\n-        setError(\"Failed to authenticate. Please try again.\");\n-      } finally {\n-        setIsLoading(false);\n-      }\n-    },\n-    [onLogin, router]\n-  );\n-\n   useEffect(() => {\n     setDebugInfo(\n       `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n     );\n+    // Set up the global function\n+    const action = (window.onTelegramAuth = (user) => {\n+      console.log(\"Logged in as \", user);\n+      setIsLoading(true);\n+      fetch(\"/api/auth/telegram\", {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify(user),\n+      })\n+        .then((response) => response.json())\n+        .then((data) => {\n+          console.log(\"Auth response:\", data);\n+          if (data.token) {\n+            localStorage.setItem(\"token\", data.token);\n+            onLogin(user);\n+            router.push(\"/\");\n+          } else {\n+            throw new Error(\"No token received\");\n+          }\n+        })\n+        .catch((error) => {\n+          console.error(\"Error:\", error);\n+          setError(\"Failed to authenticate. Please try again.\");\n+        })\n+        .finally(() => {\n+          setIsLoading(false);\n+        });\n+    });\n \n-    // Define the global callback function\n-    window.onTelegramAuth = handleTelegramAuth;\n+    console.log(\"onTelegramAuth set:\", window.onTelegramAuth);\n+  }, [router, onLogin]);\n \n-    console.log(\"TelegramLoginWidget setup complete\");\n-    console.log(\"Is onTelegramAuth defined?\", !!window.onTelegramAuth);\n-\n-    // Cleanup function\n-    return () => {\n-      delete window.onTelegramAuth;\n-    };\n-  }, [handleTelegramAuth]);\n-\n   console.log(\n     \"Is Loading:\",\n     isLoading,\n     \"Error:\",\n@@ -95,19 +83,12 @@\n             strategy=\"afterInteractive\"\n           />\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"onTelegramAuth(user)\"\n+            data-onauth=\"onTelegramAuth\"\n             data-request-access=\"write\"></div>\n           <div>Debug Info: {debugInfo}</div>\n         </>\n       )}\n     </div>\n   );\n }\n-\n-// Add this type declaration at the end of your file\n-declare global {\n-  interface Window {\n-    onTelegramAuth: (user: TelegramUser) => void;\n-  }\n-}\n"
                },
                {
                    "date": 1724933585413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,93 +2,103 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n-import { TelegramUser } from \"../lib/auth\";\n-// import { TelegramUser } from \"@/lib/auth\";\n \n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n declare global {\n   interface Window {\n-    onTelegramAuth: (user: TelegramUser) => void;\n+    Telegram: {\n+      WebApp: {\n+        ready: () => void;\n+        initDataUnsafe: {\n+          user?: TelegramUser;\n+        };\n+      };\n+    };\n   }\n }\n \n export default function Login({ onLogin }: LoginProps) {\n   const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(false);\n+  const [isLoading, setIsLoading] = useState(true);\n   const [error, setError] = useState<string | null>(null);\n-  const [debugInfo, setDebugInfo] = useState(\"\");\n \n   useEffect(() => {\n-    setDebugInfo(\n-      `Bot Name: ${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME || \"Unknown\"}`\n-    );\n-    // Set up the global function\n-    const action = (window.onTelegramAuth = (user) => {\n-      console.log(\"Logged in as \", user);\n-      setIsLoading(true);\n-      fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          console.log(\"Auth response:\", data);\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            onLogin(user);\n-            router.push(\"/\");\n-          } else {\n-            throw new Error(\"No token received\");\n-          }\n-        })\n-        .catch((error) => {\n-          console.error(\"Error:\", error);\n-          setError(\"Failed to authenticate. Please try again.\");\n-        })\n-        .finally(() => {\n+    const initTelegramApp = () => {\n+      if (window.Telegram?.WebApp) {\n+        window.Telegram.WebApp.ready();\n+        const user = window.Telegram.WebApp.initDataUnsafe.user;\n+\n+        if (user) {\n+          console.log(\"Logged in as\", user);\n+          setIsLoading(true);\n+          fetch(\"/api/auth/telegram\", {\n+            method: \"POST\",\n+            headers: {\n+              \"Content-Type\": \"application/json\",\n+            },\n+            body: JSON.stringify(user),\n+          })\n+            .then((response) => response.json())\n+            .then((data) => {\n+              console.log(\"Auth response:\", data);\n+              if (data.token) {\n+                localStorage.setItem(\"token\", data.token);\n+                onLogin(user);\n+                router.push(\"/\");\n+              } else {\n+                throw new Error(\"No token received\");\n+              }\n+            })\n+            .catch((error) => {\n+              console.error(\"Error:\", error);\n+              setError(\"Failed to authenticate. Please try again.\");\n+            })\n+            .finally(() => {\n+              setIsLoading(false);\n+            });\n+        } else {\n+          setError(\n+            \"No user data available. Please open this app from Telegram.\"\n+          );\n           setIsLoading(false);\n-        });\n-    });\n+        }\n+      } else {\n+        setError(\n+          \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+        );\n+        setIsLoading(false);\n+      }\n+    };\n \n-    console.log(\"onTelegramAuth set:\", window.onTelegramAuth);\n+    initTelegramApp();\n   }, [router, onLogin]);\n \n-  console.log(\n-    \"Is Loading:\",\n-    isLoading,\n-    \"Error:\",\n-    error,\n-    \"Debug Info:\",\n-    debugInfo\n-  );\n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n \n+  if (error) {\n+    return <div className=\"error text-red-500\">{error}</div>;\n+  }\n+\n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div>\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-widget.js?22\"\n-            strategy=\"afterInteractive\"\n-          />\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"onTelegramAuth\"\n-            data-request-access=\"write\"></div>\n-          <div>Debug Info: {debugInfo}</div>\n-        </>\n-      )}\n+      <h1 className=\"text-4xl mb-4\">Welcome to Voting App</h1>\n+      <p>Please wait while we authenticate you...</p>\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1724933911304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,88 +17,69 @@\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n-declare global {\n-  interface Window {\n-    Telegram: {\n-      WebApp: {\n-        ready: () => void;\n-        initDataUnsafe: {\n-          user?: TelegramUser;\n-        };\n-      };\n-    };\n-  }\n-}\n-\n export default function Login({ onLogin }: LoginProps) {\n   const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(true);\n+  const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n-    const initTelegramApp = () => {\n-      if (window.Telegram?.WebApp) {\n-        window.Telegram.WebApp.ready();\n-        const user = window.Telegram.WebApp.initDataUnsafe.user;\n-\n-        if (user) {\n-          console.log(\"Logged in as\", user);\n-          setIsLoading(true);\n-          fetch(\"/api/auth/telegram\", {\n-            method: \"POST\",\n-            headers: {\n-              \"Content-Type\": \"application/json\",\n-            },\n-            body: JSON.stringify(user),\n-          })\n-            .then((response) => response.json())\n-            .then((data) => {\n-              console.log(\"Auth response:\", data);\n-              if (data.token) {\n-                localStorage.setItem(\"token\", data.token);\n-                onLogin(user);\n-                router.push(\"/\");\n-              } else {\n-                throw new Error(\"No token received\");\n-              }\n-            })\n-            .catch((error) => {\n-              console.error(\"Error:\", error);\n-              setError(\"Failed to authenticate. Please try again.\");\n-            })\n-            .finally(() => {\n-              setIsLoading(false);\n-            });\n-        } else {\n-          setError(\n-            \"No user data available. Please open this app from Telegram.\"\n-          );\n+    // Define the global callback function\n+    window.onTelegramAuth = (user: TelegramUser) => {\n+      console.log(\"Telegram auth successful\", user);\n+      setIsLoading(true);\n+      fetch(\"/api/auth/telegram\", {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify(user),\n+      })\n+        .then((response) => response.json())\n+        .then((data) => {\n+          if (data.token) {\n+            localStorage.setItem(\"token\", data.token);\n+            onLogin(user);\n+            router.push(\"/\");\n+          } else {\n+            throw new Error(\"No token received\");\n+          }\n+        })\n+        .catch((error) => {\n+          console.error(\"Error:\", error);\n+          setError(\"Failed to authenticate. Please try again.\");\n+        })\n+        .finally(() => {\n           setIsLoading(false);\n-        }\n-      } else {\n-        setError(\n-          \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-        );\n-        setIsLoading(false);\n-      }\n+        });\n     };\n-\n-    initTelegramApp();\n   }, [router, onLogin]);\n \n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n-\n-  if (error) {\n-    return <div className=\"error text-red-500\">{error}</div>;\n-  }\n-\n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Welcome to Voting App</h1>\n-      <p>Please wait while we authenticate you...</p>\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div>\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            strategy=\"afterInteractive\"\n+          />\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"onTelegramAuth(user)\"\n+            data-request-access=\"write\"></div>\n+        </>\n+      )}\n     </div>\n   );\n }\n+\n+declare global {\n+  interface Window {\n+    onTelegramAuth: (user: TelegramUser) => void;\n+  }\n+}\n"
                },
                {
                    "date": 1724934244759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,85 +1,95 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import Script from \"next/script\";\n \n interface TelegramUser {\n   id: number;\n   first_name: string;\n   last_name?: string;\n   username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n+  language_code?: string;\n }\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n+declare global {\n+  interface Window {\n+    Telegram: {\n+      WebApp: {\n+        ready: () => void;\n+        initDataUnsafe: {\n+          user?: TelegramUser;\n+        };\n+      };\n+    };\n+  }\n+}\n+\n export default function Login({ onLogin }: LoginProps) {\n   const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(false);\n+  const [isLoading, setIsLoading] = useState(true);\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n-    // Define the global callback function\n-    window.onTelegramAuth = (user: TelegramUser) => {\n-      console.log(\"Telegram auth successful\", user);\n-      setIsLoading(true);\n-      fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            onLogin(user);\n-            router.push(\"/\");\n-          } else {\n-            throw new Error(\"No token received\");\n-          }\n+    if (typeof window !== \"undefined\" && window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready();\n+\n+      const user = webApp.initDataUnsafe.user;\n+      if (user) {\n+        console.log(\"User data:\", user);\n+        setIsLoading(true);\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(user),\n         })\n-        .catch((error) => {\n-          console.error(\"Error:\", error);\n-          setError(\"Failed to authenticate. Please try again.\");\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    };\n+          .then((response) => response.json())\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              onLogin(user);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      } else {\n+        setError(\"No user data available. Please open this app from Telegram.\");\n+        setIsLoading(false);\n+      }\n+    } else {\n+      setError(\n+        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+      );\n+      setIsLoading(false);\n+    }\n   }, [router, onLogin]);\n \n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n+\n+  if (error) {\n+    return <div className=\"error text-red-500\">{error}</div>;\n+  }\n+\n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div>\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-widget.js?22\"\n-            strategy=\"afterInteractive\"\n-          />\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"onTelegramAuth(user)\"\n-            data-request-access=\"write\"></div>\n-        </>\n-      )}\n+      <p>Authenticating...</p>\n     </div>\n   );\n }\n-\n-declare global {\n-  interface Window {\n-    onTelegramAuth: (user: TelegramUser) => void;\n-  }\n-}\n"
                },
                {
                    "date": 1724934721249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,95 +1,84 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n+import Script from \"next/script\";\n \n interface TelegramUser {\n   id: number;\n   first_name: string;\n   last_name?: string;\n   username?: string;\n-  language_code?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n }\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n-declare global {\n-  interface Window {\n-    Telegram: {\n-      WebApp: {\n-        ready: () => void;\n-        initDataUnsafe: {\n-          user?: TelegramUser;\n-        };\n-      };\n-    };\n-  }\n-}\n-\n export default function Login({ onLogin }: LoginProps) {\n   const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(true);\n+  const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n-    if (typeof window !== \"undefined\" && window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready();\n-\n-      const user = webApp.initDataUnsafe.user;\n-      if (user) {\n-        console.log(\"User data:\", user);\n-        setIsLoading(true);\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(user),\n+    window.onTelegramAuth = (user: TelegramUser) => {\n+      console.log(\"Telegram auth successful\", user);\n+      setIsLoading(true);\n+      fetch(\"/api/auth/telegram\", {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify(user),\n+      })\n+        .then((response) => response.json())\n+        .then((data) => {\n+          if (data.token) {\n+            localStorage.setItem(\"token\", data.token);\n+            onLogin(user);\n+            router.push(\"/\");\n+          } else {\n+            throw new Error(\"No token received\");\n+          }\n         })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              onLogin(user);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      } else {\n-        setError(\"No user data available. Please open this app from Telegram.\");\n-        setIsLoading(false);\n-      }\n-    } else {\n-      setError(\n-        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-      );\n-      setIsLoading(false);\n-    }\n+        .catch((error) => {\n+          console.error(\"Error:\", error);\n+          setError(\"Failed to authenticate. Please try again.\");\n+        })\n+        .finally(() => {\n+          setIsLoading(false);\n+        });\n+    };\n   }, [router, onLogin]);\n \n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n-\n-  if (error) {\n-    return <div className=\"error text-red-500\">{error}</div>;\n-  }\n-\n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <p>Authenticating...</p>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div>\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            strategy=\"afterInteractive\"\n+          />\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"onTelegramAuth(user)\"\n+            data-request-access=\"write\"></div>\n+        </>\n+      )}\n     </div>\n   );\n }\n+\n+declare global {\n+  interface Window {\n+    onTelegramAuth: (user: TelegramUser) => void;\n+  }\n+}\n"
                },
                {
                    "date": 1724934834106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n           setIsLoading(false);\n         });\n     };\n   }, [router, onLogin]);\n+  console.log(\"telegram login isLoading\", isLoading);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n"
                },
                {
                    "date": 1724935060870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n     window.onTelegramAuth = (user: TelegramUser) => {\n+      console.log(\"Telegram auth successful\");\n       console.log(\"Telegram auth successful\", user);\n       setIsLoading(true);\n       fetch(\"/api/auth/telegram\", {\n         method: \"POST\",\n"
                },
                {
                    "date": 1724935105778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,10 @@\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n+    console.log(\"Telegram auth successful\");\n     window.onTelegramAuth = (user: TelegramUser) => {\n-      console.log(\"Telegram auth successful\");\n       console.log(\"Telegram auth successful\", user);\n       setIsLoading(true);\n       fetch(\"/api/auth/telegram\", {\n         method: \"POST\",\n"
                },
                {
                    "date": 1724935599072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import Script from \"next/script\";\n+\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    console.log(\"Telegram auth successful\");\n+    window.onTelegramAuth = (user: TelegramUser) => {\n+      console.log(\"Telegram auth successful\", user);\n+      setIsLoading(true);\n+      fetch(\"/api/auth/telegram\", {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify(user),\n+      })\n+        .then((response) => response.json())\n+        .then((data) => {\n+          if (data.token) {\n+            localStorage.setItem(\"token\", data.token);\n+            onLogin(user);\n+            router.push(\"/\");\n+          } else {\n+            throw new Error(\"No token received\");\n+          }\n+        })\n+        .catch((error) => {\n+          console.error(\"Error:\", error);\n+          setError(\"Failed to authenticate. Please try again.\");\n+        })\n+        .finally(() => {\n+          setIsLoading(false);\n+        });\n+    };\n+  }, [router, onLogin]);\n+  console.log(\"telegram login isLoading\", isLoading);\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div>\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            strategy=\"afterInteractive\"\n+            onLoad={() => {\n+              window.TelegramLoginWidget = {\n+                dataOnauth: (user) => window.onTelegramAuth(user),\n+              };\n+            }}\n+          />\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"onTelegramAuth(user)\"\n+            data-request-access=\"write\"></div>\n+        </>\n+      )}\n+    </div>\n+  );\n+}\n+\n+declare global {\n+  interface Window {\n+    onTelegramAuth: (user: TelegramUser) => void;\n+  }\n+}\n"
                },
                {
                    "date": 1724935626085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,10 @@\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n+window.onTelegramAuth = (user) => console.log(\"Auth Callback Triggered\", user);\n+\n export default function Login({ onLogin }: LoginProps) {\n   const router = useRouter();\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n@@ -88,90 +90,4 @@\n   interface Window {\n     onTelegramAuth: (user: TelegramUser) => void;\n   }\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import Script from \"next/script\";\n-\n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    console.log(\"Telegram auth successful\");\n-    window.onTelegramAuth = (user: TelegramUser) => {\n-      console.log(\"Telegram auth successful\", user);\n-      setIsLoading(true);\n-      fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            onLogin(user);\n-            router.push(\"/\");\n-          } else {\n-            throw new Error(\"No token received\");\n-          }\n-        })\n-        .catch((error) => {\n-          console.error(\"Error:\", error);\n-          setError(\"Failed to authenticate. Please try again.\");\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    };\n-  }, [router, onLogin]);\n-  console.log(\"telegram login isLoading\", isLoading);\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div>\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-widget.js?22\"\n-            strategy=\"afterInteractive\"\n-          />\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"onTelegramAuth(user)\"\n-            data-request-access=\"write\"></div>\n-        </>\n-      )}\n-    </div>\n-  );\n-}\n-\n-declare global {\n-  interface Window {\n-    onTelegramAuth: (user: TelegramUser) => void;\n-  }\n-}\n"
                },
                {
                    "date": 1724935650052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,11 @@\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n-window.onTelegramAuth = (user) => console.log(\"Auth Callback Triggered\", user);\n+window.onTelegramAuth = (user: TelegramUser) => {\n+  console.log(\"Auth Callback Triggered\", user);\n+};\n \n export default function Login({ onLogin }: LoginProps) {\n   const router = useRouter();\n   const [isLoading, setIsLoading] = useState(false);\n"
                },
                {
                    "date": 1724935677556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n+import { useRouter } from \"next/router\";\n import Script from \"next/script\";\n \n interface TelegramUser {\n   id: number;\n@@ -17,8 +17,14 @@\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n+declare global {\n+  interface Window {\n+    onTelegramAuth: (user: TelegramUser) => void;\n+  }\n+}\n+\n window.onTelegramAuth = (user: TelegramUser) => {\n   console.log(\"Auth Callback Triggered\", user);\n };\n \n@@ -27,39 +33,10 @@\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n-    console.log(\"Telegram auth successful\");\n-    window.onTelegramAuth = (user: TelegramUser) => {\n-      console.log(\"Telegram auth successful\", user);\n-      setIsLoading(true);\n-      fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            onLogin(user);\n-            router.push(\"/\");\n-          } else {\n-            throw new Error(\"No token received\");\n-          }\n-        })\n-        .catch((error) => {\n-          console.error(\"Error:\", error);\n-          setError(\"Failed to authenticate. Please try again.\");\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    };\n-  }, [router, onLogin]);\n-  console.log(\"telegram login isLoading\", isLoading);\n+    console.log(\"Component mounted\");\n+  }, []);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n@@ -71,25 +48,13 @@\n         <>\n           <Script\n             src=\"https://telegram.org/js/telegram-widget.js?22\"\n             strategy=\"afterInteractive\"\n-            onLoad={() => {\n-              window.TelegramLoginWidget = {\n-                dataOnauth: (user) => window.onTelegramAuth(user),\n-              };\n-            }}\n           />\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"onTelegramAuth(user)\"\n             data-request-access=\"write\"></div>\n         </>\n       )}\n     </div>\n   );\n }\n-\n-declare global {\n-  interface Window {\n-    onTelegramAuth: (user: TelegramUser) => void;\n-  }\n-}\n"
                },
                {
                    "date": 1724935697342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/router\";\n+import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n \n interface TelegramUser {\n   id: number;\n"
                },
                {
                    "date": 1724936101663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,14 +17,8 @@\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n-declare global {\n-  interface Window {\n-    onTelegramAuth: (user: TelegramUser) => void;\n-  }\n-}\n-\n window.onTelegramAuth = (user: TelegramUser) => {\n   console.log(\"Auth Callback Triggered\", user);\n };\n \n@@ -33,10 +27,39 @@\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n-    console.log(\"Component mounted\");\n-  }, []);\n+    console.log(\"Telegram auth successful\");\n+    window.onTelegramAuth = (user: TelegramUser) => {\n+      console.log(\"Telegram auth successful\", user);\n+      setIsLoading(true);\n+      fetch(\"/api/auth/telegram\", {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify(user),\n+      })\n+        .then((response) => response.json())\n+        .then((data) => {\n+          if (data.token) {\n+            localStorage.setItem(\"token\", data.token);\n+            onLogin(user);\n+            router.push(\"/\");\n+          } else {\n+            throw new Error(\"No token received\");\n+          }\n+        })\n+        .catch((error) => {\n+          console.error(\"Error:\", error);\n+          setError(\"Failed to authenticate. Please try again.\");\n+        })\n+        .finally(() => {\n+          setIsLoading(false);\n+        });\n+    };\n+  }, [router, onLogin]);\n+  console.log(\"telegram login isLoading\", isLoading);\n \n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n@@ -46,15 +69,29 @@\n         <div className=\"error text-red-500\">{error}</div>\n       ) : (\n         <>\n           <Script\n-            src=\"https://telegram.org/js/telegram-widget.js?22\"\n+            src=\"https://telegram.org/js/telegram-webapp.js\"\n             strategy=\"afterInteractive\"\n+            onLoad={() => {\n+              window.Telegram.WebApp.ready();\n+              window.Telegram.WebApp.onEvent(\"mainButtonClicked\", () => {\n+                // Handle main button click event\n+              });\n+            }}\n           />\n+\n           <div\n             id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"onTelegramAuth(user)\"\n             data-request-access=\"write\"></div>\n         </>\n       )}\n     </div>\n   );\n }\n+\n+declare global {\n+  interface Window {\n+    onTelegramAuth: (user: TelegramUser) => void;\n+  }\n+}\n"
                },
                {
                    "date": 1724936106911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,10 +72,10 @@\n           <Script\n             src=\"https://telegram.org/js/telegram-webapp.js\"\n             strategy=\"afterInteractive\"\n             onLoad={() => {\n-              window.Telegram.WebApp.ready();\n-              window.Telegram.WebApp.onEvent(\"mainButtonClicked\", () => {\n+              window?.Telegram.WebApp.ready();\n+              window?.Telegram.WebApp.onEvent(\"mainButtonClicked\", () => {\n                 // Handle main button click event\n               });\n             }}\n           />\n"
                },
                {
                    "date": 1724936112627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,10 +72,10 @@\n           <Script\n             src=\"https://telegram.org/js/telegram-webapp.js\"\n             strategy=\"afterInteractive\"\n             onLoad={() => {\n-              window?.Telegram.WebApp.ready();\n-              window?.Telegram.WebApp.onEvent(\"mainButtonClicked\", () => {\n+              window?.Telegram?.WebApp.ready();\n+              window?.Telegram?.WebApp.onEvent(\"mainButtonClicked\", () => {\n                 // Handle main button click event\n               });\n             }}\n           />\n"
                },
                {
                    "date": 1724943920531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,97 +1,29 @@\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n+import Head from \"next/head\";\n+import { useEffect } from \"react\";\n import Script from \"next/script\";\n \n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-window.onTelegramAuth = (user: TelegramUser) => {\n-  console.log(\"Auth Callback Triggered\", user);\n-};\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-\n+export default function RootLayout({ children }) {\n   useEffect(() => {\n-    console.log(\"Telegram auth successful\");\n-    window.onTelegramAuth = (user: TelegramUser) => {\n-      console.log(\"Telegram auth successful\", user);\n-      setIsLoading(true);\n-      fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            onLogin(user);\n-            router.push(\"/\");\n-          } else {\n-            throw new Error(\"No token received\");\n-          }\n-        })\n-        .catch((error) => {\n-          console.error(\"Error:\", error);\n-          setError(\"Failed to authenticate. Please try again.\");\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    };\n-  }, [router, onLogin]);\n-  console.log(\"telegram login isLoading\", isLoading);\n+    if (window && window.Telegram) {\n+      Telegram.WebApp.ready();\n+    }\n+  }, []);\n \n   return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div>\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-webapp.js\"\n-            strategy=\"afterInteractive\"\n-            onLoad={() => {\n-              window?.Telegram?.WebApp.ready();\n-              window?.Telegram?.WebApp.onEvent(\"mainButtonClicked\", () => {\n-                // Handle main button click event\n-              });\n-            }}\n-          />\n-\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"onTelegramAuth(user)\"\n-            data-request-access=\"write\"></div>\n-        </>\n-      )}\n-    </div>\n+    <>\n+      <Head>\n+        <title>Your App Name</title>\n+        <Script\n+          src=\"https://telegram.org/js/telegram-webapp.js\"\n+          strategy=\"afterInteractive\"\n+          onLoad={() => {\n+            if (window.Telegram) {\n+              Telegram.WebApp.ready();\n+            }\n+          }}\n+        />\n+      </Head>\n+      <div>{children}</div>\n+    </>\n   );\n }\n-\n-declare global {\n-  interface Window {\n-    onTelegramAuth: (user: TelegramUser) => void;\n-  }\n-}\n"
                },
                {
                    "date": 1724943927900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,49 @@\n-import Head from \"next/head\";\n-import { useEffect } from \"react\";\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/router\";\n import Script from \"next/script\";\n \n-export default function RootLayout({ children }) {\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+export default function Login({ onLogin }) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+\n   useEffect(() => {\n-    if (window && window.Telegram) {\n-      Telegram.WebApp.ready();\n-    }\n-  }, []);\n-\n-  return (\n-    <>\n-      <Head>\n-        <title>Your App Name</title>\n-        <Script\n-          src=\"https://telegram.org/js/telegram-webapp.js\"\n-          strategy=\"afterInteractive\"\n-          onLoad={() => {\n-            if (window.Telegram) {\n-              Telegram.WebApp.ready();\n-            }\n-          }}\n-        />\n-      </Head>\n-      <div>{children}</div>\n-    </>\n-  );\n-}\n+    window.Telegram.WebApp.onEvent('auth', (user) => {\n+      console.log(\"Telegram auth successful\", user);\n+      setIsLoading(true);\n+      fetch(\"/api/auth/telegram\", {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify(user),\n+      })\n+        .then((response) => response.json())\n+        .then((data) => {\n+          if (data.token) {\n+            localStorage.setItem(\"token\", data.token);\n+            onLogin(user);\n+            router.push(\"/\");\n+          } else {\n+            throw new Error(\"No token received\");\n+          }\n+        })\n+        .catch((error) => {\n+          console.error(\"Error:\", error);\n+          setError(\"Failed to authenticate. Please try again.\");\n+        })\n+        .finally(() => {\n+          setIsLoading(false);\n+        });\n+    });\n+  }, [router, on\n"
                },
                {
                    "date": 1724943955115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n-    window.Telegram.WebApp.onEvent('auth', (user) => {\n+    window.Telegram.WebApp.onEvent('auth', (user:TelegramUser) => {\n       console.log(\"Telegram auth successful\", user);\n       setIsLoading(true);\n       fetch(\"/api/auth/telegram\", {\n         method: \"POST\",\n"
                },
                {
                    "date": 1724943962018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/router\";\n+import Script from \"next/script\";\n+\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+export default function Login({ onLogin }) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    window?.Telegram?.WebApp.onEvent('auth', (user:TelegramUser) => {\n+      console.log(\"Telegram auth successful\", user);\n+      setIsLoading(true);\n+      fetch(\"/api/auth/telegram\", {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify(user),\n+      })\n+        .then((response) => response.json())\n+        .then((data) => {\n+          if (data.token) {\n+            localStorage.setItem(\"token\", data.token);\n+            onLogin(user);\n+            router.push(\"/\");\n+          } else {\n+            throw new Error(\"No token received\");\n+          }\n+        })\n+        .catch((error) => {\n+          console.error(\"Error:\", error);\n+          setError(\"Failed to authenticate. Please try again.\");\n+        })\n+        .finally(() => {\n+          setIsLoading(false);\n+        });\n+    });\n+  }, [router, on\n"
                },
                {
                    "date": 1724944033383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,54 +45,20 @@\n         .finally(() => {\n           setIsLoading(false);\n         });\n     });\n-  }, [router, on\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/router\";\n-import Script from \"next/script\";\n+  },  [router]);\n \n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n+  if (isLoading) {\n+    return <div>Loading...</div>;\n+  }\n \n-export default function Login({ onLogin }) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n+  if (!user) {\n+    return <Login onLogin={setUser} />;\n+  }\n \n-  useEffect(() => {\n-    window.Telegram.WebApp.onEvent('auth', (user:TelegramUser) => {\n-      console.log(\"Telegram auth successful\", user);\n-      setIsLoading(true);\n-      fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            onLogin(user);\n-            router.push(\"/\");\n-          } else {\n-            throw new Error(\"No token received\");\n-          }\n-        })\n-        .catch((error) => {\n-          console.error(\"Error:\", error);\n-          setError(\"Failed to authenticate. Please try again.\");\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    });\n-  }, [router, on\n+  return (\n+    <div>\n+      Welcome, {user.first_name}!\n+      {/* Additional user-specific content */}\n+    </div>\n+  );\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724944300460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,31 @@\n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/router\";\n-import Script from \"next/script\";\n+import Login from \"./login/page\";\n+import { verifyTokenAndGetUser } from \"./lib/auth\";\n \n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n-export default function Login({ onLogin }) {\n+export default function Home() {\n   const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n+  const [user, setUser] = useState(null);\n+  const [isLoading, setIsLoading] = useState(true);\n \n   useEffect(() => {\n-    window?.Telegram?.WebApp.onEvent('auth', (user:TelegramUser) => {\n-      console.log(\"Telegram auth successful\", user);\n-      setIsLoading(true);\n-      fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            onLogin(user);\n-            router.push(\"/\");\n-          } else {\n-            throw new Error(\"No token received\");\n-          }\n+    const token = localStorage.getItem(\"token\");\n+    if (token) {\n+      verifyTokenAndGetUser(token)\n+        .then((userData) => {\n+          setUser(userData);\n+          setIsLoading(false);\n         })\n         .catch((error) => {\n-          console.error(\"Error:\", error);\n-          setError(\"Failed to authenticate. Please try again.\");\n-        })\n-        .finally(() => {\n+          console.error(error);\n           setIsLoading(false);\n         });\n-    });\n-  },  [router]);\n+    } else {\n+      setIsLoading(false);\n+      router.push(\"/login\");\n+    }\n+  }, [router]);\n \n   if (isLoading) {\n     return <div>Loading...</div>;\n   }\n@@ -57,8 +35,8 @@\n   }\n \n   return (\n     <div>\n-      Welcome, {user.first_name}!\n-      {/* Additional user-specific content */}\n+      Welcome, {user.first_name}!{/* Additional user-specific content */}\n     </div>\n\\ No newline at end of file\n-  );\n+  );\n+}\n"
                },
                {
                    "date": 1724944756362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,42 +1,49 @@\n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/router\";\n-import Login from \"./login/page\";\n-import { verifyTokenAndGetUser } from \"./lib/auth\";\n+import Script from \"next/script\";\n \n-export default function Home() {\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+export default function Login({ onLogin }) {\n   const router = useRouter();\n-  const [user, setUser] = useState(null);\n-  const [isLoading, setIsLoading] = useState(true);\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n-    const token = localStorage.getItem(\"token\");\n-    if (token) {\n-      verifyTokenAndGetUser(token)\n-        .then((userData) => {\n-          setUser(userData);\n-          setIsLoading(false);\n+    window.Telegram.WebApp.onEvent('auth', (user) => {\n+      console.log(\"Telegram auth successful\", user);\n+      setIsLoading(true);\n+      fetch(\"/api/auth/telegram\", {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify(user),\n+      })\n+        .then((response) => response.json())\n\\ No newline at end of file\n+        .then((data) => {\n+          if (data.token) {\n+            localStorage.setItem(\"token\", data.token);\n+            onLogin(user);\n+            router.push(\"/\");\n+          } else {\n+            throw new Error(\"No token received\");\n+          }\n         })\n         .catch((error) => {\n-          console.error(error);\n+          console.error(\"Error:\", error);\n+          setError(\"Failed to authenticate. Please try again.\");\n+        })\n+        .finally(() => {\n           setIsLoading(false);\n         });\n-    } else {\n-      setIsLoading(false);\n-      router.push(\"/login\");\n-    }\n-  }, [router]);\n-\n-  if (isLoading) {\n-    return <div>Loading...</div>;\n-  }\n-\n-  if (!user) {\n-    return <Login onLogin={setUser} />;\n-  }\n-\n-  return (\n-    <div>\n-      Welcome, {user.first_name}!{/* Additional user-specific content */}\n-    </div>\n-  );\n-}\n+    });\n+  }, [router, on\n"
                },
                {
                    "date": 1724945091836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,49 +1,29 @@\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/router\";\n+import { useEffect } from \"react\";\n import Script from \"next/script\";\n \n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n-}\n+export default function LoginPage() {\n+  useEffect(() => {\n+    window.Telegram.WebApp.onEvent(\"mainButtonClicked\", () => {\n+      const userData = window.Telegram.WebApp.initDataUnsafe;\n+      localStorage.setItem(\"userData\", JSON.stringify(userData));\n+      window.Telegram.WebApp.close();\n+    });\n \n-export default function Login({ onLogin }) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n+    if (window.Telegram) {\n+      window.Telegram.WebApp.ready();\n+    }\n+  }, []);\n \n-  useEffect(() => {\n-    window.Telegram.WebApp.onEvent('auth', (user) => {\n-      console.log(\"Telegram auth successful\", user);\n-      setIsLoading(true);\n-      fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            onLogin(user);\n-            router.push(\"/\");\n-          } else {\n\\ No newline at end of file\n-            throw new Error(\"No token received\");\n-          }\n-        })\n-        .catch((error) => {\n-          console.error(\"Error:\", error);\n-          setError(\"Failed to authenticate. Please try again.\");\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    });\n-  }, [router, on\n+  return (\n+    <div>\n+      <Script\n+        src=\"https://telegram.org/js/telegram-webapp.js\"\n+        strategy=\"afterInteractive\"\n+        onLoad={() => {\n+          window.Telegram && window.Telegram.WebApp.ready();\n+        }}\n+      />\n+      <h1>Login with Telegram</h1>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1725010136679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,97 @@\n-import { useEffect } from \"react\";\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n import Script from \"next/script\";\n \n-export default function LoginPage() {\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  photo_url?: string;\n+  auth_date: number;\n+  hash: string;\n+}\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+window.onTelegramAuth = (user: TelegramUser) => {\n+  console.log(\"Auth Callback Triggered\", user);\n+};\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+\n   useEffect(() => {\n-    window.Telegram.WebApp.onEvent(\"mainButtonClicked\", () => {\n-      const userData = window.Telegram.WebApp.initDataUnsafe;\n-      localStorage.setItem(\"userData\", JSON.stringify(userData));\n-      window.Telegram.WebApp.close();\n-    });\n+    console.log(\"Telegram auth successful\");\n+    window.onTelegramAuth = (user: TelegramUser) => {\n+      console.log(\"Telegram auth successful\", user);\n+      setIsLoading(true);\n+      fetch(\"/api/auth/telegram\", {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify(user),\n+      })\n+        .then((response) => response.json())\n+        .then((data) => {\n+          if (data.token) {\n+            localStorage.setItem(\"token\", data.token);\n+            onLogin(user);\n+            router.push(\"/\");\n+          } else {\n+            throw new Error(\"No token received\");\n+          }\n+        })\n+        .catch((error) => {\n+          console.error(\"Error:\", error);\n+          setError(\"Failed to authenticate. Please try again.\");\n+        })\n+        .finally(() => {\n+          setIsLoading(false);\n+        });\n+    };\n+  }, [router, onLogin]);\n+  console.log(\"telegram login isLoading\", isLoading);\n \n-    if (window.Telegram) {\n-      window.Telegram.WebApp.ready();\n-    }\n-  }, []);\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      {isLoading ? (\n+        <div className=\"spinner\">Loading...</div>\n+      ) : error ? (\n+        <div className=\"error text-red-500\">{error}</div>\n+      ) : (\n+        <>\n+          <Script\n+            src=\"https://telegram.org/js/telegram-webapp.js\"\n+            strategy=\"afterInteractive\"\n+            onLoad={() => {\n+              window?.Telegram?.WebApp.ready();\n+              window?.Telegram?.WebApp.onEvent(\"mainButtonClicked\", () => {\n+                // Handle main button click event\n+              });\n+            }}\n+          />\n \n-  return (\n-    <div>\n-      <Script\n-        src=\"https://telegram.org/js/telegram-webapp.js\"\n-        strategy=\"afterInteractive\"\n-        onLoad={() => {\n-          window.Telegram && window.Telegram.WebApp.ready();\n-        }}\n-      />\n-      <h1>Login with Telegram</h1>\n+          <div\n+            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n+            data-onauth=\"onTelegramAuth(user)\"\n+            data-request-access=\"write\"></div>\n+        </>\n+      )}\n     </div>\n   );\n }\n+\n+declare global {\n+  interface Window {\n+    onTelegramAuth: (user: TelegramUser) => void;\n+  }\n+}\n"
                },
                {
                    "date": 1725010241851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,15 @@\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n-    console.log(\"Telegram auth successful\");\n+    console.log(\"Telegram auth start\");\n+    if (window?.Telegram) {\n+      console.log(window?.Telegram);\n+    }\n+    if (window.onTelegramAuth) {\n+      console.log(window.onTelegramAuth);\n+    }\n     window.onTelegramAuth = (user: TelegramUser) => {\n       console.log(\"Telegram auth successful\", user);\n       setIsLoading(true);\n       fetch(\"/api/auth/telegram\", {\n"
                },
                {
                    "date": 1725010254596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n     console.log(\"Telegram auth start\");\n-    if (window?.Telegram) {\n+    if (window && window?.Telegram) {\n       console.log(window?.Telegram);\n     }\n     if (window.onTelegramAuth) {\n       console.log(window.onTelegramAuth);\n"
                },
                {
                    "date": 1725010433718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,12 +78,14 @@\n           <Script\n             src=\"https://telegram.org/js/telegram-webapp.js\"\n             strategy=\"afterInteractive\"\n             onLoad={() => {\n-              window?.Telegram?.WebApp.ready();\n-              window?.Telegram?.WebApp.onEvent(\"mainButtonClicked\", () => {\n-                // Handle main button click event\n-              });\n+              if (window.Telegram) {\n+                window?.Telegram?.WebApp.ready();\n+                window?.Telegram?.WebApp.onEvent(\"mainButtonClicked\", () => {\n+                  // Handle main button click event\n+                });\n+              }\n             }}\n           />\n \n           <div\n"
                },
                {
                    "date": 1725010451661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n           <Script\n             src=\"https://telegram.org/js/telegram-webapp.js\"\n             strategy=\"afterInteractive\"\n             onLoad={() => {\n-              if (window.Telegram) {\n+              if (window && window.Telegram) {\n                 window?.Telegram?.WebApp.ready();\n                 window?.Telegram?.WebApp.onEvent(\"mainButtonClicked\", () => {\n                   // Handle main button click event\n                 });\n"
                },
                {
                    "date": 1725010528143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \n   useEffect(() => {\n     console.log(\"Telegram auth start\");\n     if (window && window?.Telegram) {\n-      console.log(window?.Telegram);\n+      console.log(\"1\" + window?.Telegram);\n     }\n     if (window.onTelegramAuth) {\n       console.log(window.onTelegramAuth);\n     }\n"
                },
                {
                    "date": 1725010628828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     if (window && window?.Telegram) {\n       console.log(\"1\" + window?.Telegram);\n     }\n     if (window.onTelegramAuth) {\n-      console.log(window.onTelegramAuth);\n+      console.log(\"2\" + window.onTelegramAuth);\n     }\n     window.onTelegramAuth = (user: TelegramUser) => {\n       console.log(\"Telegram auth successful\", user);\n       setIsLoading(true);\n"
                },
                {
                    "date": 1725029456909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,105 +1,103 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import Script from \"next/script\";\n \n interface TelegramUser {\n   id: number;\n   first_name: string;\n   last_name?: string;\n   username?: string;\n+  language_code?: string;\n   photo_url?: string;\n-  auth_date: number;\n-  hash: string;\n }\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n-window.onTelegramAuth = (user: TelegramUser) => {\n-  console.log(\"Auth Callback Triggered\", user);\n-};\n+declare global {\n+  interface Window {\n+    Telegram?: {\n+      WebApp?: {\n+        initDataUnsafe: {\n+          user?: TelegramUser;\n+        };\n+        ready: () => void;\n+      };\n+    };\n+  }\n+}\n \n export default function Login({ onLogin }: LoginProps) {\n   const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(false);\n+  const [isLoading, setIsLoading] = useState(true);\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n-    console.log(\"Telegram auth start\");\n-    if (window && window?.Telegram) {\n-      console.log(\"1\" + window?.Telegram);\n+    // Ensure the Telegram WebApp object is available\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready(); // Notify Telegram that the WebApp is ready\n+\n+      // Check if user data is available\n+      if (webApp.initDataUnsafe.user) {\n+        const tUser = webApp.initDataUnsafe.user;\n+        console.log(\"Telegram user data:\", JSON.stringify(tUser, null, 2));\n+\n+        // Authenticate with your backend\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(tUser),\n+        })\n+          .then((response) => response.json())\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              onLogin(tUser);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      } else {\n+        console.error(\"User data is not available.\");\n+        setError(\n+          \"User data is not available. Please open this app from Telegram.\"\n+        );\n+        setIsLoading(false);\n+      }\n+    } else {\n+      console.error(\"Telegram WebApp is not initialized.\");\n+      setError(\n+        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n+      );\n+      setIsLoading(false);\n     }\n-    if (window.onTelegramAuth) {\n-      console.log(\"2\" + window.onTelegramAuth);\n-    }\n-    window.onTelegramAuth = (user: TelegramUser) => {\n-      console.log(\"Telegram auth successful\", user);\n-      setIsLoading(true);\n-      fetch(\"/api/auth/telegram\", {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify(user),\n-      })\n-        .then((response) => response.json())\n-        .then((data) => {\n-          if (data.token) {\n-            localStorage.setItem(\"token\", data.token);\n-            onLogin(user);\n-            router.push(\"/\");\n-          } else {\n-            throw new Error(\"No token received\");\n-          }\n-        })\n-        .catch((error) => {\n-          console.error(\"Error:\", error);\n-          setError(\"Failed to authenticate. Please try again.\");\n-        })\n-        .finally(() => {\n-          setIsLoading(false);\n-        });\n-    };\n-  }, [router, onLogin]);\n-  console.log(\"telegram login isLoading\", isLoading);\n+  }, [onLogin, router]);\n \n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n+\n+  if (error) {\n+    return <div className=\"error text-red-500\">{error}</div>;\n+  }\n+\n   return (\n     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      {isLoading ? (\n-        <div className=\"spinner\">Loading...</div>\n-      ) : error ? (\n-        <div className=\"error text-red-500\">{error}</div>\n-      ) : (\n-        <>\n-          <Script\n-            src=\"https://telegram.org/js/telegram-webapp.js\"\n-            strategy=\"afterInteractive\"\n-            onLoad={() => {\n-              if (window && window.Telegram) {\n-                window?.Telegram?.WebApp.ready();\n-                window?.Telegram?.WebApp.onEvent(\"mainButtonClicked\", () => {\n-                  // Handle main button click event\n-                });\n-              }\n-            }}\n-          />\n-\n-          <div\n-            id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}\n-            data-onauth=\"onTelegramAuth(user)\"\n-            data-request-access=\"write\"></div>\n-        </>\n-      )}\n+      <p>Please wait while we authenticate you...</p>\n     </div>\n   );\n }\n-\n-declare global {\n-  interface Window {\n-    onTelegramAuth: (user: TelegramUser) => void;\n-  }\n-}\n"
                },
                {
                    "date": 1725030265311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  language_code?: string;\n+  photo_url?: string;\n+}\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    Telegram?: {\n+      WebApp?: {\n+        initDataUnsafe: {\n+          user?: TelegramUser;\n+        };\n+        ready: () => void;\n+      };\n+    };\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    // Ensure the Telegram WebApp object is available\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready(); // Notify Telegram that the WebApp is ready\n+\n+      // Check if user data is available\n+      if (webApp.initDataUnsafe.user) {\n+        const tUser = webApp.initDataUnsafe.user;\n+        console.log(\"Telegram user data:\", JSON.stringify(tUser, null, 2));\n+\n+        // Authenticate with your backend\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(tUser),\n+        })\n+          .then((response) => response.json())\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              onLogin(tUser);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      } else {\n+        console.error(\"User data is not available.\");\n+        setError(\n+          \"User data is not available. Please open this app from Telegram.\"\n+        );\n+        setIsLoading(false);\n+      }\n+    } else {\n+      console.error(\"Telegram WebApp is not initialized.\");\n+      setError(\n+        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n+      );\n+      setIsLoading(false);\n+    }\n+  }, [onLogin, router]);\n+\n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n+\n+  if (error) {\n+    return <div className=\"error text-red-500\">{error}</div>;\n+  }\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      <p>Please wait while we authenticate you...</p>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1725031444492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,16 +2,16 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n \n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  language_code?: string;\n-  photo_url?: string;\n-}\n+// interface TelegramUser {\n+//   id: number;\n+//   first_name: string;\n+//   last_name?: string;\n+//   username?: string;\n+//   language_code?: string;\n+//   photo_url?: string;\n+// }\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n@@ -100,107 +100,4 @@\n       <p>Please wait while we authenticate you...</p>\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-\n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  language_code?: string;\n-  photo_url?: string;\n-}\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-declare global {\n-  interface Window {\n-    Telegram?: {\n-      WebApp?: {\n-        initDataUnsafe: {\n-          user?: TelegramUser;\n-        };\n-        ready: () => void;\n-      };\n-    };\n-  }\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    // Ensure the Telegram WebApp object is available\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready(); // Notify Telegram that the WebApp is ready\n-\n-      // Check if user data is available\n-      if (webApp.initDataUnsafe.user) {\n-        const tUser = webApp.initDataUnsafe.user;\n-        console.log(\"Telegram user data:\", JSON.stringify(tUser, null, 2));\n-\n-        // Authenticate with your backend\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(tUser),\n-        })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              onLogin(tUser);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      } else {\n-        console.error(\"User data is not available.\");\n-        setError(\n-          \"User data is not available. Please open this app from Telegram.\"\n-        );\n-        setIsLoading(false);\n-      }\n-    } else {\n-      console.error(\"Telegram WebApp is not initialized.\");\n-      setError(\n-        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n-      );\n-      setIsLoading(false);\n-    }\n-  }, [onLogin, router]);\n-\n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n-\n-  if (error) {\n-    return <div className=\"error text-red-500\">{error}</div>;\n-  }\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <p>Please wait while we authenticate you...</p>\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1725031648266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,104 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+\n+// interface TelegramUser {\n+//   id: number;\n+//   first_name: string;\n+//   last_name?: string;\n+//   username?: string;\n+//   language_code?: string;\n+//   photo_url?: string;\n+// }\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    Telegram?: {\n+      WebApp?: {\n+        initDataUnsafe: {\n+          user?: TelegramUser;\n+        };\n+        ready: () => void;\n+      };\n+    };\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    // Ensure the Telegram WebApp object is available\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready(); // Notify Telegram that the WebApp is ready\n+      console.log(\"Telegram WebApp is ready.\", webApp.initDataUnsafe);\n+\n+      // Check if user data is available\n+      if (webApp.initDataUnsafe.user) {\n+        const tUser = webApp.initDataUnsafe.user;\n+        console.log(\"Telegram user data:\", JSON.stringify(tUser, null, 2));\n+\n+        // Authenticate with your backend\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(tUser),\n+        })\n+          .then((response) => response.json())\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              onLogin(tUser);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      } else {\n+        console.error(\"User data is not available.\");\n+        setError(\n+          \"User data is not available. Please open this app from Telegram.\"\n+        );\n+        setIsLoading(false);\n+      }\n+    } else {\n+      console.error(\"Telegram WebApp is not initialized.\");\n+      setError(\n+        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n+      );\n+      setIsLoading(false);\n+    }\n+  }, [onLogin, router]);\n+\n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n+\n+  if (error) {\n+    return <div className=\"error text-red-500\">{error}</div>;\n+  }\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      <p>Please wait while we authenticate you...</p>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1725031693318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     // Ensure the Telegram WebApp object is available\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready(); // Notify Telegram that the WebApp is ready\n-      console.log(\"Telegram WebApp is ready.\", webApp.initDataUnsafe);\n+      console.log(\"Telegram WebApp is ready.\", webApp.initDataUnsafe, webApp);\n \n       // Check if user data is available\n       if (webApp.initDataUnsafe.user) {\n         const tUser = webApp.initDataUnsafe.user;\n@@ -101,107 +101,4 @@\n       <p>Please wait while we authenticate you...</p>\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-\n-// interface TelegramUser {\n-//   id: number;\n-//   first_name: string;\n-//   last_name?: string;\n-//   username?: string;\n-//   language_code?: string;\n-//   photo_url?: string;\n-// }\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-declare global {\n-  interface Window {\n-    Telegram?: {\n-      WebApp?: {\n-        initDataUnsafe: {\n-          user?: TelegramUser;\n-        };\n-        ready: () => void;\n-      };\n-    };\n-  }\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    // Ensure the Telegram WebApp object is available\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready(); // Notify Telegram that the WebApp is ready\n-\n-      // Check if user data is available\n-      if (webApp.initDataUnsafe.user) {\n-        const tUser = webApp.initDataUnsafe.user;\n-        console.log(\"Telegram user data:\", JSON.stringify(tUser, null, 2));\n-\n-        // Authenticate with your backend\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(tUser),\n-        })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              onLogin(tUser);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      } else {\n-        console.error(\"User data is not available.\");\n-        setError(\n-          \"User data is not available. Please open this app from Telegram.\"\n-        );\n-        setIsLoading(false);\n-      }\n-    } else {\n-      console.error(\"Telegram WebApp is not initialized.\");\n-      setError(\n-        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n-      );\n-      setIsLoading(false);\n-    }\n-  }, [onLogin, router]);\n-\n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n-\n-  if (error) {\n-    return <div className=\"error text-red-500\">{error}</div>;\n-  }\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <p>Please wait while we authenticate you...</p>\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1725031758471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,13 @@\n     // Ensure the Telegram WebApp object is available\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready(); // Notify Telegram that the WebApp is ready\n-      console.log(\"Telegram WebApp is ready.\", webApp.initDataUnsafe, webApp);\n+      console.log(\n+        \"Telegram WebApp is ready.\",\n+        webApp.initDataUnsafe.user,\n+        webApp\n+      );\n \n       // Check if user data is available\n       if (webApp.initDataUnsafe.user) {\n         const tUser = webApp.initDataUnsafe.user;\n"
                },
                {
                    "date": 1725031977399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,10 @@\n           .then((response) => response.json())\n           .then((data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n+              console.log(\"Token received:\", data.token, \"User:\", tUser);\n+\n               onLogin(tUser);\n               router.push(\"/\");\n             } else {\n               throw new Error(\"No token received\");\n"
                },
                {
                    "date": 1725032512387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,18 @@\n             \"Content-Type\": \"application/json\",\n           },\n           body: JSON.stringify(tUser),\n         })\n-          .then((response) => response.json())\n+          .then((response) => {\n+            if (!response.ok) {\n+              return response.text().then((text) => {\n+                throw new Error(\n+                  `HTTP error! status: ${response.status}, body: ${text}`\n+                );\n+              });\n+            }\n+            response.json();\n+          })\n           .then((data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n               console.log(\"Token received:\", data.token, \"User:\", tUser);\n"
                },
                {
                    "date": 1725032590124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,8 @@\n           .then((data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n               console.log(\"Token received:\", data.token, \"User:\", tUser);\n-\n               onLogin(tUser);\n               router.push(\"/\");\n             } else {\n               throw new Error(\"No token received\");\n"
                },
                {
                    "date": 1725033148638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+\n+// interface TelegramUser {\n+//   id: number;\n+//   first_name: string;\n+//   last_name?: string;\n+//   username?: string;\n+//   language_code?: string;\n+//   photo_url?: string;\n+// }\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    Telegram?: {\n+      WebApp?: {\n+        initDataUnsafe: {\n+          user?: TelegramUser;\n+        };\n+        ready: () => void;\n+      };\n+    };\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    // Ensure the Telegram WebApp object is available\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready(); // Notify Telegram that the WebApp is ready\n+      console.log(\n+        \"Telegram WebApp is ready.\",\n+        webApp.initDataUnsafe.user,\n+        webApp\n+      );\n+\n+      // Check if user data is available\n+      if (webApp.initDataUnsafe.user) {\n+        const tUser = webApp.initDataUnsafe.user;\n+        console.log(\"Telegram user data:\", JSON.stringify(tUser, null, 2));\n+\n+        // Authenticate with your backend\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(tUser),\n+        })\n+          .then((response) => {\n+            if (!response.ok) {\n+              return response.text().then((text) => {\n+                throw new Error(\n+                  `HTTP error! status: ${response.status}, body: ${text}`\n+                );\n+              });\n+            }\n+            response.json();\n+          })\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              console.log(\"Token received:\", data.token, \"User:\", tUser);\n+              onLogin(tUser);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      } else {\n+        console.error(\"User data is not available.\");\n+        setError(\n+          \"User data is not available. Please open this app from Telegram.\"\n+        );\n+        setIsLoading(false);\n+      }\n+    } else {\n+      console.error(\"Telegram WebApp is not initialized.\");\n+      setError(\n+        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n+      );\n+      setIsLoading(false);\n+    }\n+  }, [onLogin, router]);\n+\n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n+\n+  if (error) {\n+    return <div className=\"error text-red-500\">{error}</div>;\n+  }\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      <p>Please wait while we authenticate you...</p>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1725034325564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n       webApp.ready(); // Notify Telegram that the WebApp is ready\n       console.log(\n         \"Telegram WebApp is ready.\",\n         webApp.initDataUnsafe.user,\n-        webApp\n+        webApp.initData\n       );\n \n       // Check if user data is available\n       if (webApp.initDataUnsafe.user) {\n@@ -115,122 +115,4 @@\n       <p>Please wait while we authenticate you...</p>\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-\n-// interface TelegramUser {\n-//   id: number;\n-//   first_name: string;\n-//   last_name?: string;\n-//   username?: string;\n-//   language_code?: string;\n-//   photo_url?: string;\n-// }\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-declare global {\n-  interface Window {\n-    Telegram?: {\n-      WebApp?: {\n-        initDataUnsafe: {\n-          user?: TelegramUser;\n-        };\n-        ready: () => void;\n-      };\n-    };\n-  }\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    // Ensure the Telegram WebApp object is available\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready(); // Notify Telegram that the WebApp is ready\n-      console.log(\n-        \"Telegram WebApp is ready.\",\n-        webApp.initDataUnsafe.user,\n-        webApp\n-      );\n-\n-      // Check if user data is available\n-      if (webApp.initDataUnsafe.user) {\n-        const tUser = webApp.initDataUnsafe.user;\n-        console.log(\"Telegram user data:\", JSON.stringify(tUser, null, 2));\n-\n-        // Authenticate with your backend\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(tUser),\n-        })\n-          .then((response) => {\n-            if (!response.ok) {\n-              return response.text().then((text) => {\n-                throw new Error(\n-                  `HTTP error! status: ${response.status}, body: ${text}`\n-                );\n-              });\n-            }\n-            response.json();\n-          })\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              console.log(\"Token received:\", data.token, \"User:\", tUser);\n-              onLogin(tUser);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      } else {\n-        console.error(\"User data is not available.\");\n-        setError(\n-          \"User data is not available. Please open this app from Telegram.\"\n-        );\n-        setIsLoading(false);\n-      }\n-    } else {\n-      console.error(\"Telegram WebApp is not initialized.\");\n-      setError(\n-        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n-      );\n-      setIsLoading(false);\n-    }\n-  }, [onLogin, router]);\n-\n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n-\n-  if (error) {\n-    return <div className=\"error text-red-500\">{error}</div>;\n-  }\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <p>Please wait while we authenticate you...</p>\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1725034488586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,13 +38,9 @@\n     // Ensure the Telegram WebApp object is available\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready(); // Notify Telegram that the WebApp is ready\n-      console.log(\n-        \"Telegram WebApp is ready.\",\n-        webApp.initDataUnsafe.user,\n-        webApp.initData\n-      );\n+      console.log(\"Telegram WebApp is ready.\", webApp.initDataUnsafe.user);\n \n       // Check if user data is available\n       if (webApp.initDataUnsafe.user) {\n         const tUser = webApp.initDataUnsafe.user;\n"
                },
                {
                    "date": 1725035038873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,18 @@\n   interface Window {\n     Telegram?: {\n       WebApp?: {\n         initDataUnsafe: {\n-          user?: TelegramUser;\n+          user?: {\n+            id: number;\n+            first_name: string;\n+            last_name?: string;\n+            username?: string;\n+            language_code?: string;\n+          };\n+          auth_date: number;\n+          hash: string;\n+          query_id?: string;\n         };\n         ready: () => void;\n       };\n     };\n"
                },
                {
                    "date": 1725035102621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,22 +47,25 @@\n     // Ensure the Telegram WebApp object is available\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready(); // Notify Telegram that the WebApp is ready\n-      console.log(\"Telegram WebApp is ready.\", webApp.initDataUnsafe.user);\n+      const { user, auth_date, hash } = webApp.initDataUnsafe;\n \n-      // Check if user data is available\n-      if (webApp.initDataUnsafe.user) {\n-        const tUser = webApp.initDataUnsafe.user;\n-        console.log(\"Telegram user data:\", JSON.stringify(tUser, null, 2));\n+      if (user && auth_date && hash) {\n+        const authData: TelegramUser = {\n+          ...user,\n+          auth_date,\n+          hash,\n+        };\n \n+        console.log(\"Auth Data being sent:\", authData);\n         // Authenticate with your backend\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n           headers: {\n             \"Content-Type\": \"application/json\",\n           },\n-          body: JSON.stringify(tUser),\n+          body: JSON.stringify(authData),\n         })\n           .then((response) => {\n             if (!response.ok) {\n               return response.text().then((text) => {\n"
                },
                {
                    "date": 1725035193798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,10 +78,10 @@\n           })\n           .then((data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n-              console.log(\"Token received:\", data.token, \"User:\", tUser);\n-              onLogin(tUser);\n+              console.log(\"Token received:\", data.token, \"User:\", authData);\n+              onLogin(authData);\n               router.push(\"/\");\n             } else {\n               throw new Error(\"No token received\");\n             }\n"
                },
                {
                    "date": 1725036177060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,126 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+\n+// interface TelegramUser {\n+//   id: number;\n+//   first_name: string;\n+//   last_name?: string;\n+//   username?: string;\n+//   language_code?: string;\n+//   photo_url?: string;\n+// }\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    Telegram?: {\n+      WebApp?: {\n+        initDataUnsafe: {\n+          user?: {\n+            id: number;\n+            first_name: string;\n+            last_name?: string;\n+            username?: string;\n+            language_code?: string;\n+          };\n+          auth_date: number;\n+          hash: string;\n+          query_id?: string;\n+        };\n+        ready: () => void;\n+      };\n+    };\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    // Ensure the Telegram WebApp object is available\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready(); // Notify Telegram that the WebApp is ready\n+      const { user, auth_date, hash } = webApp.initDataUnsafe;\n+\n+      if (user && auth_date && hash) {\n+        const authData: TelegramUser = {\n+          ...user,\n+          auth_date,\n+          hash,\n+        };\n+\n+        console.log(\"Auth Data being sent:\", authData);\n+        // Authenticate with your backend\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(authData),\n+        })\n+          .then((response) => {\n+            if (!response.ok) {\n+              return response.text().then((text) => {\n+                throw new Error(\n+                  `HTTP error! status: ${response.status}, body: ${text}`\n+                );\n+              });\n+            }\n+            response.json();\n+          })\n+          .then((data: { token?: string }) => {\n+            if (data && data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              console.log(\"Token received:\", data.token, \"User:\", authData);\n+              onLogin(authData);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      } else {\n+        console.error(\"User data is not available.\");\n+        setError(\n+          \"User data is not available. Please open this app from Telegram.\"\n+        );\n+        setIsLoading(false);\n+      }\n+    } else {\n+      console.error(\"Telegram WebApp is not initialized.\");\n+      setError(\n+        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n+      );\n+      setIsLoading(false);\n+    }\n+  }, [onLogin, router]);\n+\n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n+\n+  if (error) {\n+    return <div className=\"error text-red-500\">{error}</div>;\n+  }\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      <p>Please wait while we authenticate you...</p>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1725036237691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n               });\n             }\n             response.json();\n           })\n-          .then((data: { token?: string }) => {\n+          .then((data: { token: string | undefined }) => {\n             if (data && data.token) {\n               localStorage.setItem(\"token\", data.token);\n               console.log(\"Token received:\", data.token, \"User:\", authData);\n               onLogin(authData);\n@@ -123,130 +123,4 @@\n       <p>Please wait while we authenticate you...</p>\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-\n-// interface TelegramUser {\n-//   id: number;\n-//   first_name: string;\n-//   last_name?: string;\n-//   username?: string;\n-//   language_code?: string;\n-//   photo_url?: string;\n-// }\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-declare global {\n-  interface Window {\n-    Telegram?: {\n-      WebApp?: {\n-        initDataUnsafe: {\n-          user?: {\n-            id: number;\n-            first_name: string;\n-            last_name?: string;\n-            username?: string;\n-            language_code?: string;\n-          };\n-          auth_date: number;\n-          hash: string;\n-          query_id?: string;\n-        };\n-        ready: () => void;\n-      };\n-    };\n-  }\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    // Ensure the Telegram WebApp object is available\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready(); // Notify Telegram that the WebApp is ready\n-      const { user, auth_date, hash } = webApp.initDataUnsafe;\n-\n-      if (user && auth_date && hash) {\n-        const authData: TelegramUser = {\n-          ...user,\n-          auth_date,\n-          hash,\n-        };\n-\n-        console.log(\"Auth Data being sent:\", authData);\n-        // Authenticate with your backend\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(authData),\n-        })\n-          .then((response) => {\n-            if (!response.ok) {\n-              return response.text().then((text) => {\n-                throw new Error(\n-                  `HTTP error! status: ${response.status}, body: ${text}`\n-                );\n-              });\n-            }\n-            response.json();\n-          })\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              console.log(\"Token received:\", data.token, \"User:\", authData);\n-              onLogin(authData);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      } else {\n-        console.error(\"User data is not available.\");\n-        setError(\n-          \"User data is not available. Please open this app from Telegram.\"\n-        );\n-        setIsLoading(false);\n-      }\n-    } else {\n-      console.error(\"Telegram WebApp is not initialized.\");\n-      setError(\n-        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n-      );\n-      setIsLoading(false);\n-    }\n-  }, [onLogin, router]);\n-\n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n-\n-  if (error) {\n-    return <div className=\"error text-red-500\">{error}</div>;\n-  }\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <p>Please wait while we authenticate you...</p>\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1725036286875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,126 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+\n+// interface TelegramUser {\n+//   id: number;\n+//   first_name: string;\n+//   last_name?: string;\n+//   username?: string;\n+//   language_code?: string;\n+//   photo_url?: string;\n+// }\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    Telegram?: {\n+      WebApp?: {\n+        initDataUnsafe: {\n+          user?: {\n+            id: number;\n+            first_name: string;\n+            last_name?: string;\n+            username?: string;\n+            language_code?: string;\n+          };\n+          auth_date: number;\n+          hash: string;\n+          query_id?: string;\n+        };\n+        ready: () => void;\n+      };\n+    };\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    // Ensure the Telegram WebApp object is available\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready(); // Notify Telegram that the WebApp is ready\n+      const { user, auth_date, hash } = webApp.initDataUnsafe;\n+\n+      if (user && auth_date && hash) {\n+        const authData: TelegramUser = {\n+          ...user,\n+          auth_date,\n+          hash,\n+        };\n+\n+        console.log(\"Auth Data being sent:\", authData);\n+        // Authenticate with your backend\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(authData),\n+        })\n+          .then((response) => {\n+            if (!response.ok) {\n+              return response.text().then((text) => {\n+                throw new Error(\n+                  `HTTP error! status: ${response.status}, body: ${text}`\n+                );\n+              });\n+            }\n+            response.json();\n+          })\n+          .then(data['token']) => {\n+            if (data && data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              console.log(\"Token received:\", data.token, \"User:\", authData);\n+              onLogin(authData);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      } else {\n+        console.error(\"User data is not available.\");\n+        setError(\n+          \"User data is not available. Please open this app from Telegram.\"\n+        );\n+        setIsLoading(false);\n+      }\n+    } else {\n+      console.error(\"Telegram WebApp is not initialized.\");\n+      setError(\n+        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n+      );\n+      setIsLoading(false);\n+    }\n+  }, [onLogin, router]);\n+\n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n+\n+  if (error) {\n+    return <div className=\"error text-red-500\">{error}</div>;\n+  }\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      <p>Please wait while we authenticate you...</p>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1725036331198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n               });\n             }\n             response.json();\n           })\n-          .then(data['token']) => {\n+          .then((data: { token?: string }) => {\n             if (data && data.token) {\n               localStorage.setItem(\"token\", data.token);\n               console.log(\"Token received:\", data.token, \"User:\", authData);\n               onLogin(authData);\n@@ -123,130 +123,4 @@\n       <p>Please wait while we authenticate you...</p>\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-\n-// interface TelegramUser {\n-//   id: number;\n-//   first_name: string;\n-//   last_name?: string;\n-//   username?: string;\n-//   language_code?: string;\n-//   photo_url?: string;\n-// }\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-declare global {\n-  interface Window {\n-    Telegram?: {\n-      WebApp?: {\n-        initDataUnsafe: {\n-          user?: {\n-            id: number;\n-            first_name: string;\n-            last_name?: string;\n-            username?: string;\n-            language_code?: string;\n-          };\n-          auth_date: number;\n-          hash: string;\n-          query_id?: string;\n-        };\n-        ready: () => void;\n-      };\n-    };\n-  }\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    // Ensure the Telegram WebApp object is available\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready(); // Notify Telegram that the WebApp is ready\n-      const { user, auth_date, hash } = webApp.initDataUnsafe;\n-\n-      if (user && auth_date && hash) {\n-        const authData: TelegramUser = {\n-          ...user,\n-          auth_date,\n-          hash,\n-        };\n-\n-        console.log(\"Auth Data being sent:\", authData);\n-        // Authenticate with your backend\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(authData),\n-        })\n-          .then((response) => {\n-            if (!response.ok) {\n-              return response.text().then((text) => {\n-                throw new Error(\n-                  `HTTP error! status: ${response.status}, body: ${text}`\n-                );\n-              });\n-            }\n-            response.json();\n-          })\n-          .then((data: { token: string | undefined }) => {\n-            if (data && data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              console.log(\"Token received:\", data.token, \"User:\", authData);\n-              onLogin(authData);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      } else {\n-        console.error(\"User data is not available.\");\n-        setError(\n-          \"User data is not available. Please open this app from Telegram.\"\n-        );\n-        setIsLoading(false);\n-      }\n-    } else {\n-      console.error(\"Telegram WebApp is not initialized.\");\n-      setError(\n-        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n-      );\n-      setIsLoading(false);\n-    }\n-  }, [onLogin, router]);\n-\n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n-\n-  if (error) {\n-    return <div className=\"error text-red-500\">{error}</div>;\n-  }\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <p>Please wait while we authenticate you...</p>\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1725036601223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,10 +75,10 @@\n               });\n             }\n             response.json();\n           })\n-          .then((data: { token?: string }) => {\n-            if (data && data.token) {\n+          .then((data) => {\n+            if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n               console.log(\"Token received:\", data.token, \"User:\", authData);\n               onLogin(authData);\n               router.push(\"/\");\n"
                },
                {
                    "date": 1725037129778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,15 +66,15 @@\n           },\n           body: JSON.stringify(authData),\n         })\n           .then((response) => {\n-            if (!response.ok) {\n-              return response.text().then((text) => {\n-                throw new Error(\n-                  `HTTP error! status: ${response.status}, body: ${text}`\n-                );\n-              });\n-            }\n+            // if (!response.ok) {\n+            //   return response.text().then((text) => {\n+            //     throw new Error(\n+            //       `HTTP error! status: ${response.status}, body: ${text}`\n+            //     );\n+            //   });\n+            // }\n             response.json();\n           })\n           .then((data) => {\n             if (data.token) {\n"
                },
                {
                    "date": 1725037136900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n             // }\n             response.json();\n           })\n           .then((data) => {\n-            if (data.token) {\n+            if (data?.token) {\n               localStorage.setItem(\"token\", data.token);\n               console.log(\"Token received:\", data.token, \"User:\", authData);\n               onLogin(authData);\n               router.push(\"/\");\n"
                },
                {
                    "date": 1725037545186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,126 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+\n+// interface TelegramUser {\n+//   id: number;\n+//   first_name: string;\n+//   last_name?: string;\n+//   username?: string;\n+//   language_code?: string;\n+//   photo_url?: string;\n+// }\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    Telegram?: {\n+      WebApp?: {\n+        initDataUnsafe: {\n+          user?: {\n+            id: number;\n+            first_name: string;\n+            last_name?: string;\n+            username?: string;\n+            language_code?: string;\n+          };\n+          auth_date: number;\n+          hash: string;\n+          query_id?: string;\n+        };\n+        ready: () => void;\n+      };\n+    };\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    // Ensure the Telegram WebApp object is available\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready(); // Notify Telegram that the WebApp is ready\n+      const { user, auth_date, hash } = webApp.initDataUnsafe;\n+\n+      if (user && auth_date && hash) {\n+        const authData: TelegramUser = {\n+          ...user,\n+          auth_date,\n+          hash,\n+        };\n+\n+        console.log(\"Auth Data being sent:\", authData);\n+        // Authenticate with your backend\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(authData),\n+        })\n+          .then((response) =>\n+            // if (!response.ok) {\n+            //   return response.text().then((text) => {\n+            //     throw new Error(\n+            //       `HTTP error! status: ${response.status}, body: ${text}`\n+            //     );\n+            //   });\n+            // }\n+            response.json()\n+          )\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              console.log(\"Token received:\", data.token, \"User:\", authData);\n+              onLogin(authData);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      } else {\n+        console.error(\"User data is not available.\");\n+        setError(\n+          \"User data is not available. Please open this app from Telegram.\"\n+        );\n+        setIsLoading(false);\n+      }\n+    } else {\n+      console.error(\"Telegram WebApp is not initialized.\");\n+      setError(\n+        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n+      );\n+      setIsLoading(false);\n+    }\n+  }, [onLogin, router]);\n+\n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n+\n+  if (error) {\n+    return <div className=\"error text-red-500\">{error}</div>;\n+  }\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      <p>Please wait while we authenticate you...</p>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1725039689450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,15 +99,15 @@\n           \"User data is not available. Please open this app from Telegram.\"\n         );\n         setIsLoading(false);\n       }\n-    } else {\n-      console.error(\"Telegram WebApp is not initialized.\");\n-      setError(\n-        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n-      );\n-      setIsLoading(false);\n-    }\n+    // } else {\n+    //   console.error(\"Telegram WebApp is not initialized.\");\n+    //   setError(\n+    //     \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n+    //   );\n+    //   setIsLoading(false);\n+    // }\n   }, [onLogin, router]);\n \n   if (isLoading) {\n     return <div className=\"spinner\">Loading...</div>;\n@@ -123,130 +123,4 @@\n       <p>Please wait while we authenticate you...</p>\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-\n-// interface TelegramUser {\n-//   id: number;\n-//   first_name: string;\n-//   last_name?: string;\n-//   username?: string;\n-//   language_code?: string;\n-//   photo_url?: string;\n-// }\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-declare global {\n-  interface Window {\n-    Telegram?: {\n-      WebApp?: {\n-        initDataUnsafe: {\n-          user?: {\n-            id: number;\n-            first_name: string;\n-            last_name?: string;\n-            username?: string;\n-            language_code?: string;\n-          };\n-          auth_date: number;\n-          hash: string;\n-          query_id?: string;\n-        };\n-        ready: () => void;\n-      };\n-    };\n-  }\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    // Ensure the Telegram WebApp object is available\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready(); // Notify Telegram that the WebApp is ready\n-      const { user, auth_date, hash } = webApp.initDataUnsafe;\n-\n-      if (user && auth_date && hash) {\n-        const authData: TelegramUser = {\n-          ...user,\n-          auth_date,\n-          hash,\n-        };\n-\n-        console.log(\"Auth Data being sent:\", authData);\n-        // Authenticate with your backend\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(authData),\n-        })\n-          .then((response) => {\n-            // if (!response.ok) {\n-            //   return response.text().then((text) => {\n-            //     throw new Error(\n-            //       `HTTP error! status: ${response.status}, body: ${text}`\n-            //     );\n-            //   });\n-            // }\n-            response.json();\n-          })\n-          .then((data) => {\n-            if (data?.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              console.log(\"Token received:\", data.token, \"User:\", authData);\n-              onLogin(authData);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      } else {\n-        console.error(\"User data is not available.\");\n-        setError(\n-          \"User data is not available. Please open this app from Telegram.\"\n-        );\n-        setIsLoading(false);\n-      }\n-    } else {\n-      console.error(\"Telegram WebApp is not initialized.\");\n-      setError(\n-        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n-      );\n-      setIsLoading(false);\n-    }\n-  }, [onLogin, router]);\n-\n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n-\n-  if (error) {\n-    return <div className=\"error text-red-500\">{error}</div>;\n-  }\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <p>Please wait while we authenticate you...</p>\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1725039734204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,15 +99,15 @@\n           \"User data is not available. Please open this app from Telegram.\"\n         );\n         setIsLoading(false);\n       }\n-    // } else {\n-    //   console.error(\"Telegram WebApp is not initialized.\");\n-    //   setError(\n-    //     \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n-    //   );\n-    //   setIsLoading(false);\n-    // }\n+    } else {\n+      console.error(\"Telegram WebApp is not initialized.\");\n+      setError(\n+        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n+      );\n+      setIsLoading(false);\n+    }\n   }, [onLogin, router]);\n \n   if (isLoading) {\n     return <div className=\"spinner\">Loading...</div>;\n"
                },
                {
                    "date": 1725040027164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n+import { createHash } from \"crypto\";\n \n // interface TelegramUser {\n //   id: number;\n //   first_name: string;\n@@ -55,9 +56,10 @@\n           ...user,\n           auth_date,\n           hash,\n         };\n-\n+        const botToken =7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ; // Replace with your actual bot token\n+        console.log('Client-side hash:', createHash(authData, botToken));\n         console.log(\"Auth Data being sent:\", authData);\n         // Authenticate with your backend\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n"
                },
                {
                    "date": 1725040084100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,10 +56,10 @@\n           ...user,\n           auth_date,\n           hash,\n         };\n-        const botToken =7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ; // Replace with your actual bot token\n-        console.log('Client-side hash:', createHash(authData, botToken));\n+        const botToken = process.env.TELEGRAM_BOT_TOKEN as string; // Replace with your actual bot token\n+        console.log(\"Client-side hash:\", createHash(authData, botToken));\n         console.log(\"Auth Data being sent:\", authData);\n         // Authenticate with your backend\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n"
                },
                {
                    "date": 1725040108654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import { createHash } from \"crypto\";\n+\n+// interface TelegramUser {\n+//   id: number;\n+//   first_name: string;\n+//   last_name?: string;\n+//   username?: string;\n+//   language_code?: string;\n+//   photo_url?: string;\n+// }\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    Telegram?: {\n+      WebApp?: {\n+        initDataUnsafe: {\n+          user?: {\n+            id: number;\n+            first_name: string;\n+            last_name?: string;\n+            username?: string;\n+            language_code?: string;\n+          };\n+          auth_date: number;\n+          hash: string;\n+          query_id?: string;\n+        };\n+        ready: () => void;\n+      };\n+    };\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    // Ensure the Telegram WebApp object is available\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready(); // Notify Telegram that the WebApp is ready\n+      const { user, auth_date, hash } = webApp.initDataUnsafe;\n+\n+      if (user && auth_date && hash) {\n+        const authData: TelegramUser = {\n+          ...user,\n+          auth_date,\n+          hash,\n+        };\n+        const botToken = process.env.TELEGRAM_BOT_TOKEN as string; // Replace with your actual bot token\n+        console.log(\n+          \"Client-side hash:\",\n+          createHash(authData.toString(), botToken)\n+        );\n+        console.log(\"Auth Data being sent:\", authData);\n+        // Authenticate with your backend\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(authData),\n+        })\n+          .then((response) =>\n+            // if (!response.ok) {\n+            //   return response.text().then((text) => {\n+            //     throw new Error(\n+            //       `HTTP error! status: ${response.status}, body: ${text}`\n+            //     );\n+            //   });\n+            // }\n+            response.json()\n+          )\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              console.log(\"Token received:\", data.token, \"User:\", authData);\n+              onLogin(authData);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      } else {\n+        console.error(\"User data is not available.\");\n+        setError(\n+          \"User data is not available. Please open this app from Telegram.\"\n+        );\n+        setIsLoading(false);\n+      }\n+    } else {\n+      console.error(\"Telegram WebApp is not initialized.\");\n+      setError(\n+        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n+      );\n+      setIsLoading(false);\n+    }\n+  }, [onLogin, router]);\n+\n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n+\n+  if (error) {\n+    return <div className=\"error text-red-500\">{error}</div>;\n+  }\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      <p>Please wait while we authenticate you...</p>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1725040127207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n           ...user,\n           auth_date,\n           hash,\n         };\n-        const botToken = process.env.TELEGRAM_BOT_TOKEN as string; // Replace with your actual bot token\n+        const botToken = process.env.TELEGRAM_BOT_TOKEN; // Replace with your actual bot token\n         console.log(\n           \"Client-side hash:\",\n           createHash(authData.toString(), botToken)\n         );\n@@ -128,132 +128,4 @@\n       <p>Please wait while we authenticate you...</p>\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import { createHash } from \"crypto\";\n-\n-// interface TelegramUser {\n-//   id: number;\n-//   first_name: string;\n-//   last_name?: string;\n-//   username?: string;\n-//   language_code?: string;\n-//   photo_url?: string;\n-// }\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-declare global {\n-  interface Window {\n-    Telegram?: {\n-      WebApp?: {\n-        initDataUnsafe: {\n-          user?: {\n-            id: number;\n-            first_name: string;\n-            last_name?: string;\n-            username?: string;\n-            language_code?: string;\n-          };\n-          auth_date: number;\n-          hash: string;\n-          query_id?: string;\n-        };\n-        ready: () => void;\n-      };\n-    };\n-  }\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    // Ensure the Telegram WebApp object is available\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready(); // Notify Telegram that the WebApp is ready\n-      const { user, auth_date, hash } = webApp.initDataUnsafe;\n-\n-      if (user && auth_date && hash) {\n-        const authData: TelegramUser = {\n-          ...user,\n-          auth_date,\n-          hash,\n-        };\n-        const botToken = process.env.TELEGRAM_BOT_TOKEN as string; // Replace with your actual bot token\n-        console.log(\"Client-side hash:\", createHash(authData, botToken));\n-        console.log(\"Auth Data being sent:\", authData);\n-        // Authenticate with your backend\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(authData),\n-        })\n-          .then((response) =>\n-            // if (!response.ok) {\n-            //   return response.text().then((text) => {\n-            //     throw new Error(\n-            //       `HTTP error! status: ${response.status}, body: ${text}`\n-            //     );\n-            //   });\n-            // }\n-            response.json()\n-          )\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              console.log(\"Token received:\", data.token, \"User:\", authData);\n-              onLogin(authData);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      } else {\n-        console.error(\"User data is not available.\");\n-        setError(\n-          \"User data is not available. Please open this app from Telegram.\"\n-        );\n-        setIsLoading(false);\n-      }\n-    } else {\n-      console.error(\"Telegram WebApp is not initialized.\");\n-      setError(\n-        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n-      );\n-      setIsLoading(false);\n-    }\n-  }, [onLogin, router]);\n-\n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n-\n-  if (error) {\n-    return <div className=\"error text-red-500\">{error}</div>;\n-  }\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <p>Please wait while we authenticate you...</p>\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1725040160261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n           ...user,\n           auth_date,\n           hash,\n         };\n-        const botToken = process.env.TELEGRAM_BOT_TOKEN; // Replace with your actual bot token\n+        const botToken = 7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ; // Replace with your actual bot token\n         console.log(\n           \"Client-side hash:\",\n           createHash(authData.toString(), botToken)\n         );\n"
                },
                {
                    "date": 1725040185391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n           ...user,\n           auth_date,\n           hash,\n         };\n-        const botToken = 7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ; // Replace with your actual bot token\n+        const botToken = \"7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ\"; // Replace with your actual bot token\n         console.log(\n           \"Client-side hash:\",\n           createHash(authData.toString(), botToken)\n         );\n"
                },
                {
                    "date": 1725040203518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,12 +57,12 @@\n           auth_date,\n           hash,\n         };\n         const botToken = \"7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ\"; // Replace with your actual bot token\n-        console.log(\n-          \"Client-side hash:\",\n-          createHash(authData.toString(), botToken)\n-        );\n+        // console.log(\n+        //   \"Client-side hash:\",\n+        //   createHash(authData.toString(), botToken)\n+        // );\n         console.log(\"Auth Data being sent:\", authData);\n         // Authenticate with your backend\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n"
                },
                {
                    "date": 1725040293012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n           ...user,\n           auth_date,\n           hash,\n         };\n-        const botToken = \"7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ\"; // Replace with your actual bot token\n+        // const botToken = \"7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ\"; // Replace with your actual bot token\n         // console.log(\n         //   \"Client-side hash:\",\n         //   createHash(authData.toString(), botToken)\n         // );\n"
                },
                {
                    "date": 1725040642159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,13 +56,10 @@\n           ...user,\n           auth_date,\n           hash,\n         };\n-        // const botToken = \"7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ\"; // Replace with your actual bot token\n-        // console.log(\n-        //   \"Client-side hash:\",\n-        //   createHash(authData.toString(), botToken)\n-        // );\n+        const botToken = \"7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ\"; // Replace with your actual bot token\n+        console.log(\"Client-side hash:\", createHash(authData, botToken));\n         console.log(\"Auth Data being sent:\", authData);\n         // Authenticate with your backend\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n"
                },
                {
                    "date": 1725040772577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n           auth_date,\n           hash,\n         };\n         const botToken = \"7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ\"; // Replace with your actual bot token\n-        console.log(\"Client-side hash:\", createHash(authData, botToken));\n+        // console.log(\"Client-side hash:\", createHash(authData, botToken));\n         console.log(\"Auth Data being sent:\", authData);\n         // Authenticate with your backend\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n"
                },
                {
                    "date": 1725042918629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,9 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { createHash } from \"crypto\";\n \n-// interface TelegramUser {\n-//   id: number;\n-//   first_name: string;\n-//   last_name?: string;\n-//   username?: string;\n-//   language_code?: string;\n-//   photo_url?: string;\n-// }\n-\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n@@ -56,9 +46,9 @@\n           ...user,\n           auth_date,\n           hash,\n         };\n-        const botToken = \"7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ\"; // Replace with your actual bot token\n+        // const botToken = \"7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ\"; // Replace with your actual bot token\n         // console.log(\"Client-side hash:\", createHash(authData, botToken));\n         console.log(\"Auth Data being sent:\", authData);\n         // Authenticate with your backend\n         fetch(\"/api/auth/telegram\", {\n"
                },
                {
                    "date": 1725049029257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,118 +1,118 @@\n-\"use client\";\n+// \"use client\";\n \n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n+// import { useEffect, useState } from \"react\";\n+// import { useRouter } from \"next/navigation\";\n \n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n+// interface LoginProps {\n+//   onLogin: (user: TelegramUser) => void;\n+// }\n \n-declare global {\n-  interface Window {\n-    Telegram?: {\n-      WebApp?: {\n-        initDataUnsafe: {\n-          user?: {\n-            id: number;\n-            first_name: string;\n-            last_name?: string;\n-            username?: string;\n-            language_code?: string;\n-          };\n-          auth_date: number;\n-          hash: string;\n-          query_id?: string;\n-        };\n-        ready: () => void;\n-      };\n-    };\n-  }\n-}\n+// declare global {\n+//   interface Window {\n+//     Telegram?: {\n+//       WebApp?: {\n+//         initDataUnsafe: {\n+//           user?: {\n+//             id: number;\n+//             first_name: string;\n+//             last_name?: string;\n+//             username?: string;\n+//             language_code?: string;\n+//           };\n+//           auth_date: number;\n+//           hash: string;\n+//           query_id?: string;\n+//         };\n+//         ready: () => void;\n+//       };\n+//     };\n+//   }\n+// }\n \n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n+// export default function Login({ onLogin }: LoginProps) {\n+//   const router = useRouter();\n+//   const [isLoading, setIsLoading] = useState(true);\n+//   const [error, setError] = useState<string | null>(null);\n \n-  useEffect(() => {\n-    // Ensure the Telegram WebApp object is available\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready(); // Notify Telegram that the WebApp is ready\n-      const { user, auth_date, hash } = webApp.initDataUnsafe;\n+//   useEffect(() => {\n+//     // Ensure the Telegram WebApp object is available\n+//     if (window.Telegram?.WebApp) {\n+//       const webApp = window.Telegram.WebApp;\n+//       webApp.ready(); // Notify Telegram that the WebApp is ready\n+//       const { user, auth_date, hash } = webApp.initDataUnsafe;\n \n-      if (user && auth_date && hash) {\n-        const authData: TelegramUser = {\n-          ...user,\n-          auth_date,\n-          hash,\n-        };\n-        // const botToken = \"7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ\"; // Replace with your actual bot token\n-        // console.log(\"Client-side hash:\", createHash(authData, botToken));\n-        console.log(\"Auth Data being sent:\", authData);\n-        // Authenticate with your backend\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(authData),\n-        })\n-          .then((response) =>\n-            // if (!response.ok) {\n-            //   return response.text().then((text) => {\n-            //     throw new Error(\n-            //       `HTTP error! status: ${response.status}, body: ${text}`\n-            //     );\n-            //   });\n-            // }\n-            response.json()\n-          )\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              console.log(\"Token received:\", data.token, \"User:\", authData);\n-              onLogin(authData);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      } else {\n-        console.error(\"User data is not available.\");\n-        setError(\n-          \"User data is not available. Please open this app from Telegram.\"\n-        );\n-        setIsLoading(false);\n-      }\n-    } else {\n-      console.error(\"Telegram WebApp is not initialized.\");\n-      setError(\n-        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n-      );\n-      setIsLoading(false);\n-    }\n-  }, [onLogin, router]);\n+//       if (user && auth_date && hash) {\n+//         const authData: TelegramUser = {\n+//           ...user,\n+//           auth_date,\n+//           hash,\n+//         };\n+//         // const botToken = \"7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ\"; // Replace with your actual bot token\n+//         // console.log(\"Client-side hash:\", createHash(authData, botToken));\n+//         console.log(\"Auth Data being sent:\", authData);\n+//         // Authenticate with your backend\n+//         fetch(\"/api/auth/telegram\", {\n+//           method: \"POST\",\n+//           headers: {\n+//             \"Content-Type\": \"application/json\",\n+//           },\n+//           body: JSON.stringify(authData),\n+//         })\n+//           .then((response) =>\n+//             // if (!response.ok) {\n+//             //   return response.text().then((text) => {\n+//             //     throw new Error(\n+//             //       `HTTP error! status: ${response.status}, body: ${text}`\n+//             //     );\n+//             //   });\n+//             // }\n+//             response.json()\n+//           )\n+//           .then((data) => {\n+//             if (data.token) {\n+//               localStorage.setItem(\"token\", data.token);\n+//               console.log(\"Token received:\", data.token, \"User:\", authData);\n+//               onLogin(authData);\n+//               router.push(\"/\");\n+//             } else {\n+//               throw new Error(\"No token received\");\n+//             }\n+//           })\n+//           .catch((error) => {\n+//             console.error(\"Authentication error:\", error);\n+//             setError(\"Failed to authenticate. Please try again.\");\n+//           })\n+//           .finally(() => {\n+//             setIsLoading(false);\n+//           });\n+//       } else {\n+//         console.error(\"User data is not available.\");\n+//         setError(\n+//           \"User data is not available. Please open this app from Telegram.\"\n+//         );\n+//         setIsLoading(false);\n+//       }\n+//     } else {\n+//       console.error(\"Telegram WebApp is not initialized.\");\n+//       setError(\n+//         \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n+//       );\n+//       setIsLoading(false);\n+//     }\n+//   }, [onLogin, router]);\n \n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n+//   if (isLoading) {\n+//     return <div className=\"spinner\">Loading...</div>;\n+//   }\n \n-  if (error) {\n-    return <div className=\"error text-red-500\">{error}</div>;\n-  }\n+//   if (error) {\n+//     return <div className=\"error text-red-500\">{error}</div>;\n+//   }\n \n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <p>Please wait while we authenticate you...</p>\n-    </div>\n-  );\n-}\n+//   return (\n+//     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+//       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+//       <p>Please wait while we authenticate you...</p>\n+//     </div>\n+//   );\n+// }\n"
                },
                {
                    "date": 1725053442959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,118 +1,74 @@\n-// \"use client\";\n+// src/app/login/page.tsx\n \n-// import { useEffect, useState } from \"react\";\n-// import { useRouter } from \"next/navigation\";\n+\"use client\";\n \n-// interface LoginProps {\n-//   onLogin: (user: TelegramUser) => void;\n-// }\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import { useTelegramInitData } from \"@/hooks/useTelegramInitData\";\n \n-// declare global {\n-//   interface Window {\n-//     Telegram?: {\n-//       WebApp?: {\n-//         initDataUnsafe: {\n-//           user?: {\n-//             id: number;\n-//             first_name: string;\n-//             last_name?: string;\n-//             username?: string;\n-//             language_code?: string;\n-//           };\n-//           auth_date: number;\n-//           hash: string;\n-//           query_id?: string;\n-//         };\n-//         ready: () => void;\n-//       };\n-//     };\n-//   }\n-// }\n+export default function LoginPage() {\n+  const router = useRouter();\n+  const initData = useTelegramInitData();\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n \n-// export default function Login({ onLogin }: LoginProps) {\n-//   const router = useRouter();\n-//   const [isLoading, setIsLoading] = useState(true);\n-//   const [error, setError] = useState<string | null>(null);\n+  useEffect(() => {\n+    if (initData) {\n+      const { user, auth_date, hash } = initData;\n \n-//   useEffect(() => {\n-//     // Ensure the Telegram WebApp object is available\n-//     if (window.Telegram?.WebApp) {\n-//       const webApp = window.Telegram.WebApp;\n-//       webApp.ready(); // Notify Telegram that the WebApp is ready\n-//       const { user, auth_date, hash } = webApp.initDataUnsafe;\n+      if (user && auth_date && hash) {\n+        // Send data to server for verification\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({\n+            data: {\n+              id: user.id,\n+              first_name: user.first_name,\n+              last_name: user.last_name,\n+              username: user.username,\n+              auth_date,\n+            },\n+            hash,\n+          }),\n+        })\n+          .then((response) => response.json())\n+          .then((data) => {\n+            if (data.success) {\n+              localStorage.setItem(\"token\", data.token);\n+              router.push(\"/\");\n+            } else {\n+              setError(\"Authentication failed. Please try again.\");\n+            }\n+          })\n+          .catch((err) => {\n+            console.error(\"Authentication error:\", err);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => setIsLoading(false));\n+      } else {\n+        setError(\n+          \"User data is not available. Please open this app from Telegram.\"\n+        );\n+        setIsLoading(false);\n+      }\n+    }\n+  }, [initData, router]);\n \n-//       if (user && auth_date && hash) {\n-//         const authData: TelegramUser = {\n-//           ...user,\n-//           auth_date,\n-//           hash,\n-//         };\n-//         // const botToken = \"7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ\"; // Replace with your actual bot token\n-//         // console.log(\"Client-side hash:\", createHash(authData, botToken));\n-//         console.log(\"Auth Data being sent:\", authData);\n-//         // Authenticate with your backend\n-//         fetch(\"/api/auth/telegram\", {\n-//           method: \"POST\",\n-//           headers: {\n-//             \"Content-Type\": \"application/json\",\n-//           },\n-//           body: JSON.stringify(authData),\n-//         })\n-//           .then((response) =>\n-//             // if (!response.ok) {\n-//             //   return response.text().then((text) => {\n-//             //     throw new Error(\n-//             //       `HTTP error! status: ${response.status}, body: ${text}`\n-//             //     );\n-//             //   });\n-//             // }\n-//             response.json()\n-//           )\n-//           .then((data) => {\n-//             if (data.token) {\n-//               localStorage.setItem(\"token\", data.token);\n-//               console.log(\"Token received:\", data.token, \"User:\", authData);\n-//               onLogin(authData);\n-//               router.push(\"/\");\n-//             } else {\n-//               throw new Error(\"No token received\");\n-//             }\n-//           })\n-//           .catch((error) => {\n-//             console.error(\"Authentication error:\", error);\n-//             setError(\"Failed to authenticate. Please try again.\");\n-//           })\n-//           .finally(() => {\n-//             setIsLoading(false);\n-//           });\n-//       } else {\n-//         console.error(\"User data is not available.\");\n-//         setError(\n-//           \"User data is not available. Please open this app from Telegram.\"\n-//         );\n-//         setIsLoading(false);\n-//       }\n-//     } else {\n-//       console.error(\"Telegram WebApp is not initialized.\");\n-//       setError(\n-//         \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n-//       );\n-//       setIsLoading(false);\n-//     }\n-//   }, [onLogin, router]);\n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n \n-//   if (isLoading) {\n-//     return <div className=\"spinner\">Loading...</div>;\n-//   }\n+  if (error) {\n+    return <div className=\"error text-red-500\">{error}</div>;\n+  }\n \n-//   if (error) {\n-//     return <div className=\"error text-red-500\">{error}</div>;\n-//   }\n-\n-//   return (\n-//     <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-//       <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-//       <p>Please wait while we authenticate you...</p>\n-//     </div>\n-//   );\n-// }\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      <p>Please wait while we authenticate you...</p>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1725053716526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n   const [isLoading, setIsLoading] = useState(true);\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n-    if (initData) {\n-      const { user, auth_date, hash } = initData;\n+    if (typeof window !== \"undefined\" && window.Telegram?.WebApp) {\n+      const { user, auth_date, hash } = window.Telegram.WebApp.initDataUnsafe;\n \n       if (user && auth_date && hash) {\n         // Send data to server for verification\n         fetch(\"/api/auth/telegram\", {\n@@ -53,8 +53,13 @@\n           \"User data is not available. Please open this app from Telegram.\"\n         );\n         setIsLoading(false);\n       }\n+    } else {\n+      setError(\n+        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n+      );\n+      setIsLoading(false);\n     }\n   }, [initData, router]);\n \n   if (isLoading) {\n"
                },
                {
                    "date": 1725053856196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n \n   useEffect(() => {\n     if (typeof window !== \"undefined\" && window.Telegram?.WebApp) {\n       const { user, auth_date, hash } = window.Telegram.WebApp.initDataUnsafe;\n+      console.log(user, auth_date, hash);\n \n       if (user && auth_date && hash) {\n         // Send data to server for verification\n         fetch(\"/api/auth/telegram\", {\n"
                },
                {
                    "date": 1725098491114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    Telegram?: {\n+      WebApp?: {\n+        initDataUnsafe: {\n+          user?: {\n+            id: number;\n+            first_name: string;\n+            last_name?: string;\n+            username?: string;\n+            language_code?: string;\n+          };\n+          auth_date: number;\n+          hash: string;\n+          query_id?: string;\n+        };\n+        ready: () => void;\n+      };\n+    };\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    // Ensure the Telegram WebApp object is available\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready(); // Notify Telegram that the WebApp is ready\n+      const { user, auth_date, hash } = webApp.initDataUnsafe;\n+\n+      if (user && auth_date && hash) {\n+        const authData: TelegramUser = {\n+          ...user,\n+          auth_date,\n+          hash,\n+        };\n+        // const botToken = \"7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ\"; // Replace with your actual bot token\n+        // console.log(\"Client-side hash:\", createHash(authData, botToken));\n+        console.log(\"Auth Data being sent:\", authData);\n+        // Authenticate with your backend\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(authData),\n+        })\n+          .then((response) =>\n+            // if (!response.ok) {\n+            //   return response.text().then((text) => {\n+            //     throw new Error(\n+            //       `HTTP error! status: ${response.status}, body: ${text}`\n+            //     );\n+            //   });\n+            // }\n+            response.json()\n+          )\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              console.log(\"Token received:\", data.token, \"User:\", authData);\n+              onLogin(authData);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      } else {\n+        console.error(\"User data is not available.\");\n+        setError(\n+          \"User data is not available. Please open this app from Telegram.\"\n+        );\n+        setIsLoading(false);\n+      }\n+    } else {\n+      console.error(\"Telegram WebApp is not initialized.\");\n+      setError(\n+        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n+      );\n+      setIsLoading(false);\n+    }\n+  }, [onLogin, router]);\n+\n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n+\n+  if (error) {\n+    return <div className=\"error text-red-500\">{error}</div>;\n+  }\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      <p>Please wait while we authenticate you...</p>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1725098762152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,24 +34,30 @@\n   const [isLoading, setIsLoading] = useState(true);\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n-    // Ensure the Telegram WebApp object is available\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n-      webApp.ready(); // Notify Telegram that the WebApp is ready\n-      const { user, auth_date, hash } = webApp.initDataUnsafe;\n+      webApp.ready();\n \n-      if (user && auth_date && hash) {\n-        const authData: TelegramUser = {\n-          ...user,\n-          auth_date,\n-          hash,\n+      const initData = webApp.initData;\n+      const initDataUnsafe = webApp.initDataUnsafe;\n+\n+      console.log(\"Init Data:\", initData);\n+      console.log(\"Init Data Unsafe:\", initDataUnsafe);\n+\n+      if (initDataUnsafe.user) {\n+        const authData = {\n+          ...initDataUnsafe.user,\n+          auth_date: initDataUnsafe.auth_date,\n+          hash: initData\n+            .split(\"&\")\n+            .find((param) => param.startsWith(\"hash=\"))\n+            ?.split(\"=\")[1],\n         };\n-        // const botToken = \"7380182355:AAErUVHY0lAxLI0PBmFrLTOr95UcvqnrhJQ\"; // Replace with your actual bot token\n-        // console.log(\"Client-side hash:\", createHash(authData, botToken));\n+\n         console.log(\"Auth Data being sent:\", authData);\n-        // Authenticate with your backend\n+\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n           headers: {\n             \"Content-Type\": \"application/json\",\n@@ -115,84 +121,4 @@\n       <p>Please wait while we authenticate you...</p>\n     </div>\n   );\n }\n-// src/app/login/page.tsx\n-\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import { useTelegramInitData } from \"@/hooks/useTelegramInitData\";\n-\n-export default function LoginPage() {\n-  const router = useRouter();\n-  const initData = useTelegramInitData();\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    if (typeof window !== \"undefined\" && window.Telegram?.WebApp) {\n-      const { user, auth_date, hash } = window.Telegram.WebApp.initDataUnsafe;\n-      console.log(user, auth_date, hash);\n-\n-      if (user && auth_date && hash) {\n-        // Send data to server for verification\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify({\n-            data: {\n-              id: user.id,\n-              first_name: user.first_name,\n-              last_name: user.last_name,\n-              username: user.username,\n-              auth_date,\n-            },\n-            hash,\n-          }),\n-        })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            if (data.success) {\n-              localStorage.setItem(\"token\", data.token);\n-              router.push(\"/\");\n-            } else {\n-              setError(\"Authentication failed. Please try again.\");\n-            }\n-          })\n-          .catch((err) => {\n-            console.error(\"Authentication error:\", err);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => setIsLoading(false));\n-      } else {\n-        setError(\n-          \"User data is not available. Please open this app from Telegram.\"\n-        );\n-        setIsLoading(false);\n-      }\n-    } else {\n-      setError(\n-        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n-      );\n-      setIsLoading(false);\n-    }\n-  }, [initData, router]);\n-\n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n-\n-  if (error) {\n-    return <div className=\"error text-red-500\">{error}</div>;\n-  }\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <p>Please wait while we authenticate you...</p>\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1725098771918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n           ...initDataUnsafe.user,\n           auth_date: initDataUnsafe.auth_date,\n           hash: initData\n             .split(\"&\")\n-            .find((param) => param.startsWith(\"hash=\"))\n+            .find((param: string) => param.startsWith(\"hash=\"))\n             ?.split(\"=\")[1],\n         };\n \n         console.log(\"Auth Data being sent:\", authData);\n"
                },
                {
                    "date": 1725099123368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,10 @@\n declare global {\n   interface Window {\n     Telegram?: {\n       WebApp?: {\n+        initData: string;\n+\n         initDataUnsafe: {\n           user?: {\n             id: number;\n             first_name: string;\n"
                },
                {
                    "date": 1725099158067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,137 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+declare global {\n+  interface Window {\n+    Telegram?: {\n+      WebApp?: {\n+        initData: {\n+            user?: {\n+                id: number;\n+                first_name: string;\n+                last_name?: string;\n+                username?: string;\n+                photo_url?: string;\n+                auth_date: number;\n+                hash: string;\n+            };\n+            query_id?: string;\n+            };\n+        }\n+        initDataUnsafe: {\n+          user?: {\n+            id: number;\n+            first_name: string;\n+            last_name?: string;\n+            username?: string;\n+            language_code?: string;\n+          };\n+          auth_date: number;\n+          hash: string;\n+          query_id?: string;\n+        };\n+        ready: () => void;\n+      };\n+    };\n+  }\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready();\n+\n+      const initData = webApp.initData;\n+      const initDataUnsafe = webApp.initDataUnsafe;\n+\n+      console.log(\"Init Data:\", initData);\n+      console.log(\"Init Data Unsafe:\", initDataUnsafe);\n+\n+      if (initDataUnsafe.user) {\n+        const authData = {\n+          ...initDataUnsafe.user,\n+          auth_date: initDataUnsafe.auth_date,\n+          hash: initData\n+            .split(\"&\")\n+            .find((param: string) => param.startsWith(\"hash=\"))\n+            ?.split(\"=\")[1],\n+        };\n+\n+        console.log(\"Auth Data being sent:\", authData);\n+\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify(authData),\n+        })\n+          .then((response) =>\n+            // if (!response.ok) {\n+            //   return response.text().then((text) => {\n+            //     throw new Error(\n+            //       `HTTP error! status: ${response.status}, body: ${text}`\n+            //     );\n+            //   });\n+            // }\n+            response.json()\n+          )\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              console.log(\"Token received:\", data.token, \"User:\", authData);\n+              onLogin(authData);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(\"Failed to authenticate. Please try again.\");\n+          })\n+          .finally(() => {\n+            setIsLoading(false);\n+          });\n+      } else {\n+        console.error(\"User data is not available.\");\n+        setError(\n+          \"User data is not available. Please open this app from Telegram.\"\n+        );\n+        setIsLoading(false);\n+      }\n+    } else {\n+      console.error(\"Telegram WebApp is not initialized.\");\n+      setError(\n+        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n+      );\n+      setIsLoading(false);\n+    }\n+  }, [onLogin, router]);\n+\n+  if (isLoading) {\n+    return <div className=\"spinner\">Loading...</div>;\n+  }\n+\n+  if (error) {\n+    return <div className=\"error text-red-500\">{error}</div>;\n+  }\n+\n+  return (\n+    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n+      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n+      <p>Please wait while we authenticate you...</p>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1725099555112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,21 +10,8 @@\n declare global {\n   interface Window {\n     Telegram?: {\n       WebApp?: {\n-        initData: {\n-            user?: {\n-                id: number;\n-                first_name: string;\n-                last_name?: string;\n-                username?: string;\n-                photo_url?: string;\n-                auth_date: number;\n-                hash: string;\n-            };\n-            query_id?: string;\n-            };\n-        }\n         initDataUnsafe: {\n           user?: {\n             id: number;\n             first_name: string;\n@@ -134,130 +121,4 @@\n       <p>Please wait while we authenticate you...</p>\n     </div>\n   );\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-declare global {\n-  interface Window {\n-    Telegram?: {\n-      WebApp?: {\n-        initData: string;\n-\n-        initDataUnsafe: {\n-          user?: {\n-            id: number;\n-            first_name: string;\n-            last_name?: string;\n-            username?: string;\n-            language_code?: string;\n-          };\n-          auth_date: number;\n-          hash: string;\n-          query_id?: string;\n-        };\n-        ready: () => void;\n-      };\n-    };\n-  }\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready();\n-\n-      const initData = webApp.initData;\n-      const initDataUnsafe = webApp.initDataUnsafe;\n-\n-      console.log(\"Init Data:\", initData);\n-      console.log(\"Init Data Unsafe:\", initDataUnsafe);\n-\n-      if (initDataUnsafe.user) {\n-        const authData = {\n-          ...initDataUnsafe.user,\n-          auth_date: initDataUnsafe.auth_date,\n-          hash: initData\n-            .split(\"&\")\n-            .find((param: string) => param.startsWith(\"hash=\"))\n-            ?.split(\"=\")[1],\n-        };\n-\n-        console.log(\"Auth Data being sent:\", authData);\n-\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify(authData),\n-        })\n-          .then((response) =>\n-            // if (!response.ok) {\n-            //   return response.text().then((text) => {\n-            //     throw new Error(\n-            //       `HTTP error! status: ${response.status}, body: ${text}`\n-            //     );\n-            //   });\n-            // }\n-            response.json()\n-          )\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              console.log(\"Token received:\", data.token, \"User:\", authData);\n-              onLogin(authData);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n-          });\n-      } else {\n-        console.error(\"User data is not available.\");\n-        setError(\n-          \"User data is not available. Please open this app from Telegram.\"\n-        );\n-        setIsLoading(false);\n-      }\n-    } else {\n-      console.error(\"Telegram WebApp is not initialized.\");\n-      setError(\n-        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n-      );\n-      setIsLoading(false);\n-    }\n-  }, [onLogin, router]);\n-\n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n-\n-  if (error) {\n-    return <div className=\"error text-red-500\">{error}</div>;\n-  }\n-\n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <p>Please wait while we authenticate you...</p>\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1725099945435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n           auth_date: number;\n           hash: string;\n           query_id?: string;\n         };\n+        initData: string;\n         ready: () => void;\n       };\n     };\n   }\n"
                },
                {
                    "date": 1725099987961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n \n-      const initData = webApp.initData;\n+      const initData = webApp[\"initData\"];\n       const initDataUnsafe = webApp.initDataUnsafe;\n \n       console.log(\"Init Data:\", initData);\n       console.log(\"Init Data Unsafe:\", initDataUnsafe);\n"
                },
                {
                    "date": 1725099995203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n \n-      const initData = webApp[\"initData\"];\n+      const initData = webApp.initData;\n       const initDataUnsafe = webApp.initDataUnsafe;\n \n       console.log(\"Init Data:\", initData);\n       console.log(\"Init Data Unsafe:\", initDataUnsafe);\n"
                },
                {
                    "date": 1725100062151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,73 +39,38 @@\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n \n+      const initDataUnsafe = webApp.initDataUnsafe;\n       const initData = webApp.initData;\n-      const initDataUnsafe = webApp.initDataUnsafe;\n \n+      console.log(\"Init Data Unsafe:\", initDataUnsafe);\n       console.log(\"Init Data:\", initData);\n-      console.log(\"Init Data Unsafe:\", initDataUnsafe);\n \n       if (initDataUnsafe.user) {\n-        const authData = {\n-          ...initDataUnsafe.user,\n-          auth_date: initDataUnsafe.auth_date,\n-          hash: initData\n-            .split(\"&\")\n-            .find((param: string) => param.startsWith(\"hash=\"))\n-            ?.split(\"=\")[1],\n-        };\n-\n-        console.log(\"Auth Data being sent:\", authData);\n-\n+        // Send the raw initData string instead of parsed object\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n           headers: {\n             \"Content-Type\": \"application/json\",\n           },\n-          body: JSON.stringify(authData),\n+          body: JSON.stringify({ initData }),\n         })\n-          .then((response) =>\n-            // if (!response.ok) {\n-            //   return response.text().then((text) => {\n-            //     throw new Error(\n-            //       `HTTP error! status: ${response.status}, body: ${text}`\n-            //     );\n-            //   });\n-            // }\n-            response.json()\n-          )\n+          .then((response) => response.json())\n           .then((data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n-              console.log(\"Token received:\", data.token, \"User:\", authData);\n-              onLogin(authData);\n+              onLogin(initDataUnsafe.user);\n               router.push(\"/\");\n             } else {\n               throw new Error(\"No token received\");\n             }\n           })\n           .catch((error) => {\n             console.error(\"Authentication error:\", error);\n             setError(\"Failed to authenticate. Please try again.\");\n-          })\n-          .finally(() => {\n-            setIsLoading(false);\n           });\n-      } else {\n-        console.error(\"User data is not available.\");\n-        setError(\n-          \"User data is not available. Please open this app from Telegram.\"\n-        );\n-        setIsLoading(false);\n       }\n-    } else {\n-      console.error(\"Telegram WebApp is not initialized.\");\n-      setError(\n-        \"Telegram WebApp is not initialized. Please open this app from Telegram.\"\n-      );\n-      setIsLoading(false);\n     }\n   }, [onLogin, router]);\n \n   if (isLoading) {\n"
                },
                {
                    "date": 1725100082693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n           .then((response) => response.json())\n           .then((data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n-              onLogin(initDataUnsafe.user);\n+              onLogin(initDataUnsafe.user | {});\n               router.push(\"/\");\n             } else {\n               throw new Error(\"No token received\");\n             }\n"
                },
                {
                    "date": 1725100089701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n           .then((response) => response.json())\n           .then((data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n-              onLogin(initDataUnsafe.user | {});\n+              onLogin(initDataUnsafe.user as TelegramUser);\n               router.push(\"/\");\n             } else {\n               throw new Error(\"No token received\");\n             }\n"
                },
                {
                    "date": 1725100098603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n \n       const initDataUnsafe = webApp.initDataUnsafe;\n-      const initData = webApp.initData;\n+      const initData = webApp.initData as string;\n \n       console.log(\"Init Data Unsafe:\", initDataUnsafe);\n       console.log(\"Init Data:\", initData);\n \n"
                },
                {
                    "date": 1725100106175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n \n       const initDataUnsafe = webApp.initDataUnsafe;\n-      const initData = webApp.initData as string;\n+      const initData = webApp.initData;\n \n       console.log(\"Init Data Unsafe:\", initDataUnsafe);\n       console.log(\"Init Data:\", initData);\n \n"
                },
                {
                    "date": 1725100976424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,33 +44,45 @@\n       const initData = webApp.initData;\n \n       console.log(\"Init Data Unsafe:\", initDataUnsafe);\n       console.log(\"Init Data:\", initData);\n-\n-      if (initDataUnsafe.user) {\n-        // Send the raw initData string instead of parsed object\n+      if (initData) {\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n           headers: {\n             \"Content-Type\": \"application/json\",\n           },\n           body: JSON.stringify({ initData }),\n         })\n-          .then((response) => response.json())\n+          .then((response) => {\n+            if (!response.ok) {\n+              throw new Error(`HTTP error! status: ${response.status}`);\n+            }\n+            return response.json();\n+          })\n           .then((data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n-              onLogin(initDataUnsafe.user as TelegramUser);\n+              const user = JSON.parse(\n+                new URLSearchParams(initData).get(\"user\") || \"{}\"\n+              );\n+              onLogin(user);\n               router.push(\"/\");\n             } else {\n               throw new Error(\"No token received\");\n             }\n           })\n           .catch((error) => {\n             console.error(\"Authentication error:\", error);\n-            setError(\"Failed to authenticate. Please try again.\");\n+            setError(`Failed to authenticate. ${error.message}`);\n           });\n+      } else {\n+        setError(\"No init data available. Please open this app from Telegram.\");\n       }\n+    } else {\n+      setError(\n+        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+      );\n     }\n   }, [onLogin, router]);\n \n   if (isLoading) {\n"
                },
                {
                    "date": 1725101153806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,13 +39,12 @@\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n \n-      const initDataUnsafe = webApp.initDataUnsafe;\n       const initData = webApp.initData;\n \n-      console.log(\"Init Data Unsafe:\", initDataUnsafe);\n       console.log(\"Init Data:\", initData);\n+\n       if (initData) {\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n           headers: {\n@@ -83,9 +82,8 @@\n         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n       );\n     }\n   }, [onLogin, router]);\n-\n   if (isLoading) {\n     return <div className=\"spinner\">Loading...</div>;\n   }\n \n"
                },
                {
                    "date": 1725101441979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,38 +2,23 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n \n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  language_code?: string;\n+  allows_write_to_pm?: boolean;\n+}\n+\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n-declare global {\n-  interface Window {\n-    Telegram?: {\n-      WebApp?: {\n-        initDataUnsafe: {\n-          user?: {\n-            id: number;\n-            first_name: string;\n-            last_name?: string;\n-            username?: string;\n-            language_code?: string;\n-          };\n-          auth_date: number;\n-          hash: string;\n-          query_id?: string;\n-        };\n-        initData: string;\n-        ready: () => void;\n-      };\n-    };\n-  }\n-}\n-\n export default function Login({ onLogin }: LoginProps) {\n   const router = useRouter();\n-  const [isLoading, setIsLoading] = useState(true);\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n     if (window.Telegram?.WebApp) {\n@@ -82,19 +67,11 @@\n         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n       );\n     }\n   }, [onLogin, router]);\n-  if (isLoading) {\n-    return <div className=\"spinner\">Loading...</div>;\n-  }\n \n   if (error) {\n-    return <div className=\"error text-red-500\">{error}</div>;\n+    return <div>{error}</div>;\n   }\n \n-  return (\n-    <div className=\"flex flex-col items-center justify-center min-h-screen py-2\">\n-      <h1 className=\"text-4xl mb-4\">Login with Telegram</h1>\n-      <p>Please wait while we authenticate you...</p>\n-    </div>\n-  );\n+  return <div>Authenticating...</div>;\n }\n"
                },
                {
                    "date": 1725101642417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n \n-      const initData = webApp.initData;\n+      const initData = webApp.initData as string;\n \n       console.log(\"Init Data:\", initData);\n \n       if (initData) {\n"
                },
                {
                    "date": 1725101663146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n   last_name?: string;\n   username?: string;\n   language_code?: string;\n   allows_write_to_pm?: boolean;\n+  initData: string;\n }\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n@@ -24,9 +25,9 @@\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n \n-      const initData = webApp.initData as string;\n+      const initData = webApp.initData;\n \n       console.log(\"Init Data:\", initData);\n \n       if (initData) {\n"
                },
                {
                    "date": 1725101670894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,8 @@\n   last_name?: string;\n   username?: string;\n   language_code?: string;\n   allows_write_to_pm?: boolean;\n-  initData: string;\n }\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n"
                },
                {
                    "date": 1725101751170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,92 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+\n+// interface TelegramUser {\n+//   id: number;\n+//   first_name: string;\n+//   last_name?: string;\n+//   username?: string;\n+//   language_code?: string;\n+//   allows_write_to_pm?: boolean;\n+// }\n+declare global {\n+  interface Window {\n+    Telegram?: {\n+      WebApp?: {\n+        initDataUnsafe: {\n+          user?: TelegramUser;\n+          auth_date: string;\n+          hash: string;\n+          query_id?: string;\n+        };\n+        initData: string;\n+        ready: () => void;\n+      };\n+    };\n+  }\n+}\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready();\n+\n+      const initData = webApp.initData;\n+\n+      console.log(\"Init Data:\", initData);\n+\n+      if (initData) {\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({ initData }),\n+        })\n+          .then((response) => {\n+            if (!response.ok) {\n+              throw new Error(`HTTP error! status: ${response.status}`);\n+            }\n+            return response.json();\n+          })\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              const user = JSON.parse(\n+                new URLSearchParams(initData).get(\"user\") || \"{}\"\n+              );\n+              onLogin(user);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(`Failed to authenticate. ${error.message}`);\n+          });\n+      } else {\n+        setError(\"No init data available. Please open this app from Telegram.\");\n+      }\n+    } else {\n+      setError(\n+        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+      );\n+    }\n+  }, [onLogin, router]);\n+\n+  if (error) {\n+    return <div>{error}</div>;\n+  }\n+\n+  return <div>Authenticating...</div>;\n+}\n"
                },
                {
                    "date": 1725101794543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,81 +89,4 @@\n   }\n \n   return <div>Authenticating...</div>;\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-\n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  language_code?: string;\n-  allows_write_to_pm?: boolean;\n-}\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready();\n-\n-      const initData = webApp.initData;\n-\n-      console.log(\"Init Data:\", initData);\n-\n-      if (initData) {\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify({ initData }),\n-        })\n-          .then((response) => {\n-            if (!response.ok) {\n-              throw new Error(`HTTP error! status: ${response.status}`);\n-            }\n-            return response.json();\n-          })\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              const user = JSON.parse(\n-                new URLSearchParams(initData).get(\"user\") || \"{}\"\n-              );\n-              onLogin(user);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(`Failed to authenticate. ${error.message}`);\n-          });\n-      } else {\n-        setError(\"No init data available. Please open this app from Telegram.\");\n-      }\n-    } else {\n-      setError(\n-        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-      );\n-    }\n-  }, [onLogin, router]);\n-\n-  if (error) {\n-    return <div>{error}</div>;\n-  }\n-\n-  return <div>Authenticating...</div>;\n-}\n"
                },
                {
                    "date": 1725101830719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,32 +2,19 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n \n-// interface TelegramUser {\n-//   id: number;\n-//   first_name: string;\n-//   last_name?: string;\n-//   username?: string;\n-//   language_code?: string;\n-//   allows_write_to_pm?: boolean;\n-// }\n-declare global {\n-  interface Window {\n-    Telegram?: {\n-      WebApp?: {\n-        initDataUnsafe: {\n-          user?: TelegramUser;\n-          auth_date: string;\n-          hash: string;\n-          query_id?: string;\n-        };\n-        initData: string;\n-        ready: () => void;\n-      };\n-    };\n-  }\n+interface TelegramUser {\n+  id: number;\n+  first_name: string;\n+  last_name?: string;\n+  username?: string;\n+  language_code?: string;\n+  allows_write_to_pm?: boolean;\n+  auth_date: number;\n+  hash: string;\n }\n+\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n@@ -60,13 +47,22 @@\n           })\n           .then((data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n-              const user = JSON.parse(\n-                new URLSearchParams(initData).get(\"user\") || \"{}\"\n-              );\n-              onLogin(user);\n-              router.push(\"/\");\n+              const userParams = new URLSearchParams(initData).get(\"user\");\n+              if (userParams) {\n+                const user: TelegramUser = {\n+                  ...JSON.parse(userParams),\n+                  auth_date: Number(\n+                    new URLSearchParams(initData).get(\"auth_date\")\n+                  ),\n+                  hash: new URLSearchParams(initData).get(\"hash\") || \"\",\n+                };\n+                onLogin(user);\n+                router.push(\"/\");\n+              } else {\n+                throw new Error(\"User data not found\");\n+              }\n             } else {\n               throw new Error(\"No token received\");\n             }\n           })\n"
                },
                {
                    "date": 1725102092487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,19 +2,8 @@\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n \n-interface TelegramUser {\n-  id: number;\n-  first_name: string;\n-  last_name?: string;\n-  username?: string;\n-  language_code?: string;\n-  allows_write_to_pm?: boolean;\n-  auth_date: number;\n-  hash: string;\n-}\n-\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n"
                },
                {
                    "date": 1725102187782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n+import { TelegramUser } from \"@/app/types\";\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n"
                },
                {
                    "date": 1725102201089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { TelegramUser } from \"@/app/types\";\n+import TelegramUser from \"@/app/types\";\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n"
                },
                {
                    "date": 1725102282814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import TelegramUser from \"@/app/types\";\n+import { TelegramUser } from \"@/app/types\";\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n"
                },
                {
                    "date": 1725102297223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import { TelegramUser } from \"@/types\";\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  const router = useRouter();\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready();\n+\n+      const initData = webApp.initData;\n+\n+      console.log(\"Init Data:\", initData);\n+\n+      if (initData) {\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({ initData }),\n+        })\n+          .then((response) => {\n+            if (!response.ok) {\n+              throw new Error(`HTTP error! status: ${response.status}`);\n+            }\n+            return response.json();\n+          })\n+          .then((data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              const userParams = new URLSearchParams(initData).get(\"user\");\n+              if (userParams) {\n+                const user: TelegramUser = {\n+                  ...JSON.parse(userParams),\n+                  auth_date: Number(\n+                    new URLSearchParams(initData).get(\"auth_date\")\n+                  ),\n+                  hash: new URLSearchParams(initData).get(\"hash\") || \"\",\n+                };\n+                onLogin(user);\n+                router.push(\"/\");\n+              } else {\n+                throw new Error(\"User data not found\");\n+              }\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(`Failed to authenticate. ${error.message}`);\n+          });\n+      } else {\n+        setError(\"No init data available. Please open this app from Telegram.\");\n+      }\n+    } else {\n+      setError(\n+        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+      );\n+    }\n+  }, [onLogin, router]);\n+\n+  if (error) {\n+    return <div>{error}</div>;\n+  }\n+\n+  return <div>Authenticating...</div>;\n+}\n"
                },
                {
                    "date": 1725102322814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   const router = useRouter();\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n-    if (window.Telegram?.WebApp) {\n+    if (window && window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n \n       const initData = webApp.initData;\n@@ -75,82 +75,4 @@\n   }\n \n   return <div>Authenticating...</div>;\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import { TelegramUser } from \"@/app/types\";\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready();\n-\n-      const initData = webApp.initData;\n-\n-      console.log(\"Init Data:\", initData);\n-\n-      if (initData) {\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify({ initData }),\n-        })\n-          .then((response) => {\n-            if (!response.ok) {\n-              throw new Error(`HTTP error! status: ${response.status}`);\n-            }\n-            return response.json();\n-          })\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              const userParams = new URLSearchParams(initData).get(\"user\");\n-              if (userParams) {\n-                const user: TelegramUser = {\n-                  ...JSON.parse(userParams),\n-                  auth_date: Number(\n-                    new URLSearchParams(initData).get(\"auth_date\")\n-                  ),\n-                  hash: new URLSearchParams(initData).get(\"hash\") || \"\",\n-                };\n-                onLogin(user);\n-                router.push(\"/\");\n-              } else {\n-                throw new Error(\"User data not found\");\n-              }\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(`Failed to authenticate. ${error.message}`);\n-          });\n-      } else {\n-        setError(\"No init data available. Please open this app from Telegram.\");\n-      }\n-    } else {\n-      setError(\n-        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-      );\n-    }\n-  }, [onLogin, router]);\n-\n-  if (error) {\n-    return <div>{error}</div>;\n-  }\n-\n-  return <div>Authenticating...</div>;\n-}\n"
                },
                {
                    "date": 1725102333610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   const router = useRouter();\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n-    if (window && window.Telegram?.WebApp) {\n+    if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n \n       const initData = webApp.initData;\n"
                },
                {
                    "date": 1725102446290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { TelegramUser } from \"@/types\";\n+import { TelegramUser, Window } from \"@/types\";\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n"
                },
                {
                    "date": 1725102477019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { TelegramUser, Window } from \"@/types\";\n+import { TelegramUser, window } from \"@/types\";\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n"
                },
                {
                    "date": 1725102501884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n import { useRouter } from \"next/navigation\";\n-import { TelegramUser, window } from \"@/types\";\n+import { TelegramUser } from \"@/types\";\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n"
                },
                {
                    "date": 1725102910259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,15 +39,9 @@\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n               const userParams = new URLSearchParams(initData).get(\"user\");\n               if (userParams) {\n-                const user: TelegramUser = {\n-                  ...JSON.parse(userParams),\n-                  auth_date: Number(\n-                    new URLSearchParams(initData).get(\"auth_date\")\n-                  ),\n-                  hash: new URLSearchParams(initData).get(\"hash\") || \"\",\n-                };\n+                const user: TelegramUser = JSON.parse(userParams);\n                 onLogin(user);\n                 router.push(\"/\");\n               } else {\n                 throw new Error(\"User data not found\");\n"
                },
                {
                    "date": 1725103290406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,10 @@\n   const router = useRouter();\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n+    console.log(\"Login component mounted\");\n+    console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n \n"
                },
                {
                    "date": 1725103644618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n       webApp.ready();\n \n       const initData = webApp.initData;\n \n-      console.log(\"Init Data:\", initData);\n+      //   console.log(\"Init Data:\", initData);\n \n       if (initData) {\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n"
                },
                {
                    "date": 1725103708451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n       setError(\n         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n       );\n     }\n-  }, [onLogin, router]);\n+  }, [onLogin]);\n \n   if (error) {\n     return <div>{error}</div>;\n   }\n"
                },
                {
                    "date": 1725103739168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n       setError(\n         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n       );\n     }\n-  }, [onLogin]);\n+  }, [onLogin, router]);\n \n   if (error) {\n     return <div>{error}</div>;\n   }\n"
                },
                {
                    "date": 1725104286040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,10 @@\n               localStorage.setItem(\"token\", data.token);\n               const userParams = new URLSearchParams(initData).get(\"user\");\n               if (userParams) {\n                 const user: TelegramUser = JSON.parse(userParams);\n+                console.log(\"User data:\", user);\n+\n                 onLogin(user);\n                 router.push(\"/\");\n               } else {\n                 throw new Error(\"User data not found\");\n"
                },
                {
                    "date": 1725104415723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,14 +36,14 @@\n               throw new Error(`HTTP error! status: ${response.status}`);\n             }\n             return response.json();\n           })\n-          .then((data) => {\n+          .then(async (data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n               const userParams = new URLSearchParams(initData).get(\"user\");\n               if (userParams) {\n-                const user: TelegramUser = JSON.parse(userParams);\n+                const user: TelegramUser = await JSON.parse(userParams);\n                 console.log(\"User data:\", user);\n \n                 onLogin(user);\n                 router.push(\"/\");\n"
                },
                {
                    "date": 1725104434723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n               if (userParams) {\n                 const user: TelegramUser = await JSON.parse(userParams);\n                 console.log(\"User data:\", user);\n \n-                onLogin(user);\n+                await onLogin(user);\n                 router.push(\"/\");\n               } else {\n                 throw new Error(\"User data not found\");\n               }\n"
                },
                {
                    "date": 1725104543660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n               if (userParams) {\n                 const user: TelegramUser = await JSON.parse(userParams);\n                 console.log(\"User data:\", user);\n \n-                await onLogin(user);\n+                onLogin(user);\n                 router.push(\"/\");\n               } else {\n                 throw new Error(\"User data not found\");\n               }\n"
                },
                {
                    "date": 1725104819802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,76 +1,46 @@\n \"use client\";\n \n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n+import { useEffect, useCallback } from \"react\";\n import { TelegramUser } from \"@/types\";\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [error, setError] = useState<string | null>(null);\n+  console.log(\"Login component rendered, onLogin type:\", typeof onLogin);\n \n+  const handleTelegramLogin = useCallback(\n+    (user: TelegramUser) => {\n+      console.log(\"Handling Telegram login:\", user);\n+      if (typeof onLogin === \"function\") {\n+        onLogin(user);\n+      } else {\n+        console.error(\"onLogin is not a function:\", onLogin);\n+      }\n+    },\n+    [onLogin]\n+  );\n+\n   useEffect(() => {\n     console.log(\"Login component mounted\");\n     console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n+\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n+      console.log(\"Telegram WebApp is available\");\n \n-      const initData = webApp.initData;\n-\n-      //   console.log(\"Init Data:\", initData);\n-\n-      if (initData) {\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify({ initData }),\n-        })\n-          .then((response) => {\n-            if (!response.ok) {\n-              throw new Error(`HTTP error! status: ${response.status}`);\n-            }\n-            return response.json();\n-          })\n-          .then(async (data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              const userParams = new URLSearchParams(initData).get(\"user\");\n-              if (userParams) {\n-                const user: TelegramUser = await JSON.parse(userParams);\n-                console.log(\"User data:\", user);\n-\n-                onLogin(user);\n-                router.push(\"/\");\n-              } else {\n-                throw new Error(\"User data not found\");\n-              }\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(`Failed to authenticate. ${error.message}`);\n-          });\n+      if (webApp.initDataUnsafe.user) {\n+        console.log(\"User data:\", webApp.initDataUnsafe.user);\n+        handleTelegramLogin(webApp.initDataUnsafe.user);\n       } else {\n-        setError(\"No init data available. Please open this app from Telegram.\");\n+        console.log(\"No user data available\");\n       }\n     } else {\n-      setError(\n-        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-      );\n+      console.log(\"Telegram WebApp is not available\");\n     }\n-  }, [onLogin, router]);\n+  }, [handleTelegramLogin]);\n \n-  if (error) {\n-    return <div>{error}</div>;\n-  }\n-\n   return <div>Authenticating...</div>;\n }\n"
                },
                {
                    "date": 1725105042120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +1,76 @@\n \"use client\";\n \n-import { useEffect, useCallback } from \"react\";\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n export default function Login({ onLogin }: LoginProps) {\n-  console.log(\"Login component rendered, onLogin type:\", typeof onLogin);\n+  const router = useRouter();\n+  const [error, setError] = useState<string | null>(null);\n \n-  const handleTelegramLogin = useCallback(\n-    (user: TelegramUser) => {\n-      console.log(\"Handling Telegram login:\", user);\n-      if (typeof onLogin === \"function\") {\n-        onLogin(user);\n-      } else {\n-        console.error(\"onLogin is not a function:\", onLogin);\n-      }\n-    },\n-    [onLogin]\n-  );\n-\n   useEffect(() => {\n     console.log(\"Login component mounted\");\n     console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n-\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n-      console.log(\"Telegram WebApp is available\");\n \n-      if (webApp.initDataUnsafe.user) {\n-        console.log(\"User data:\", webApp.initDataUnsafe.user);\n-        handleTelegramLogin(webApp.initDataUnsafe.user);\n+      const initData = webApp.initData;\n+\n+      //   console.log(\"Init Data:\", initData);\n+\n+      if (initData) {\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({ initData }),\n+        })\n+          .then((response) => {\n+            if (!response.ok) {\n+              throw new Error(`HTTP error! status: ${response.status}`);\n+            }\n+            return response.json();\n+          })\n+          .then(async (data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              const userParams = new URLSearchParams(initData).get(\"user\");\n+              if (userParams) {\n+                const user: TelegramUser = await JSON.parse(userParams);\n+                console.log(\"User data:\", user);\n+\n+                onLogin(user);\n+                router.push(\"/\");\n+              } else {\n+                throw new Error(\"User data not found\");\n+              }\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(`Failed to authenticate. ${error.message}`);\n+          });\n       } else {\n-        console.log(\"No user data available\");\n+        setError(\"No init data available. Please open this app from Telegram.\");\n       }\n     } else {\n-      console.log(\"Telegram WebApp is not available\");\n+      setError(\n+        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+      );\n     }\n-  }, [handleTelegramLogin]);\n+  }, [onLogin, router]);\n \n+  if (error) {\n+    return <div>{error}</div>;\n+  }\n+\n   return <div>Authenticating...</div>;\n }\n"
                },
                {
                    "date": 1725105312151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,76 +1,122 @@\n \"use client\";\n \n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n+import { useEffect, useCallback } from \"react\";\n import { TelegramUser } from \"@/types\";\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n export default function Login({ onLogin }: LoginProps) {\n-  const router = useRouter();\n-  const [error, setError] = useState<string | null>(null);\n+  console.log(\"Login component rendered, onLogin type:\", typeof onLogin);\n \n+  const handleTelegramLogin = useCallback(\n+    (user: TelegramUser) => {\n+      console.log(\"Handling Telegram login:\", user);\n+      if (typeof onLogin === \"function\") {\n+        onLogin(user);\n+      } else {\n+        console.error(\"onLogin is not a function:\", onLogin);\n+      }\n+    },\n+    [onLogin]\n+  );\n+\n   useEffect(() => {\n     console.log(\"Login component mounted\");\n     console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n+\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n+      console.log(\"Telegram WebApp is available\");\n \n-      const initData = webApp.initData;\n-\n-      //   console.log(\"Init Data:\", initData);\n-\n-      if (initData) {\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify({ initData }),\n-        })\n-          .then((response) => {\n-            if (!response.ok) {\n-              throw new Error(`HTTP error! status: ${response.status}`);\n-            }\n-            return response.json();\n-          })\n-          .then(async (data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              const userParams = new URLSearchParams(initData).get(\"user\");\n-              if (userParams) {\n-                const user: TelegramUser = await JSON.parse(userParams);\n-                console.log(\"User data:\", user);\n-\n-                onLogin(user);\n-                router.push(\"/\");\n-              } else {\n-                throw new Error(\"User data not found\");\n-              }\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(`Failed to authenticate. ${error.message}`);\n-          });\n+      if (webApp.initDataUnsafe.user) {\n+        console.log(\"User data:\", webApp.initDataUnsafe.user);\n+        handleTelegramLogin(webApp.initDataUnsafe.user);\n       } else {\n-        setError(\"No init data available. Please open this app from Telegram.\");\n+        console.log(\"No user data available\");\n       }\n     } else {\n-      setError(\n-        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-      );\n+      console.log(\"Telegram WebApp is not available\");\n     }\n-  }, [onLogin, router]);\n+  }, [handleTelegramLogin]);\n \n-  if (error) {\n-    return <div>{error}</div>;\n-  }\n-\n   return <div>Authenticating...</div>;\n }\n+// \"use client\";\n+\n+// import { useEffect, useState } from \"react\";\n+// import { useRouter } from \"next/navigation\";\n+// import { TelegramUser } from \"@/types\";\n+\n+// interface LoginProps {\n+//   onLogin: (user: TelegramUser) => void;\n+// }\n+\n+// export default function Login({ onLogin }: LoginProps) {\n+//   const router = useRouter();\n+//   const [error, setError] = useState<string | null>(null);\n+\n+//   useEffect(() => {\n+//     console.log(\"Login component mounted\");\n+//     console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n+//     if (window.Telegram?.WebApp) {\n+//       const webApp = window.Telegram.WebApp;\n+//       webApp.ready();\n+\n+//       const initData = webApp.initData;\n+\n+//       //   console.log(\"Init Data:\", initData);\n+\n+//       if (initData) {\n+//         fetch(\"/api/auth/telegram\", {\n+//           method: \"POST\",\n+//           headers: {\n+//             \"Content-Type\": \"application/json\",\n+//           },\n+//           body: JSON.stringify({ initData }),\n+//         })\n+//           .then((response) => {\n+//             if (!response.ok) {\n+//               throw new Error(`HTTP error! status: ${response.status}`);\n+//             }\n+//             return response.json();\n+//           })\n+//           .then(async (data) => {\n+//             if (data.token) {\n+//               localStorage.setItem(\"token\", data.token);\n+//               const userParams = new URLSearchParams(initData).get(\"user\");\n+//               if (userParams) {\n+//                 const user: TelegramUser = await JSON.parse(userParams);\n+//                 console.log(\"User data:\", user);\n+\n+//                 onLogin(user);\n+//                 router.push(\"/\");\n+//               } else {\n+//                 throw new Error(\"User data not found\");\n+//               }\n+//             } else {\n+//               throw new Error(\"No token received\");\n+//             }\n+//           })\n+//           .catch((error) => {\n+//             console.error(\"Authentication error:\", error);\n+//             setError(`Failed to authenticate. ${error.message}`);\n+//           });\n+//       } else {\n+//         setError(\"No init data available. Please open this app from Telegram.\");\n+//       }\n+//     } else {\n+//       setError(\n+//         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+//       );\n+//     }\n+//   }, [onLogin, router]);\n+\n+//   if (error) {\n+//     return <div>{error}</div>;\n+//   }\n+\n+//   return <div>Authenticating...</div>;\n+// }\n"
                },
                {
                    "date": 1725105340992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n-export default function Login({ onLogin }: LoginProps) {\n+export default function Login(onLogin: LoginProps) {\n   console.log(\"Login component rendered, onLogin type:\", typeof onLogin);\n \n   const handleTelegramLogin = useCallback(\n     (user: TelegramUser) => {\n"
                },
                {
                    "date": 1725106187828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n-export default function Login(onLogin: LoginProps) {\n+export default function Login({ onLogin }: LoginProps) {\n   console.log(\"Login component rendered, onLogin type:\", typeof onLogin);\n \n   const handleTelegramLogin = useCallback(\n     (user: TelegramUser) => {\n@@ -40,9 +40,9 @@\n     } else {\n       console.log(\"Telegram WebApp is not available\");\n     }\n   }, [handleTelegramLogin]);\n-\n+  console.log(\"Login component received onLogin prop:\", onLogin);\n   return <div>Authenticating...</div>;\n }\n // \"use client\";\n \n"
                },
                {
                    "date": 1725106490020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,122 +1,76 @@\n \"use client\";\n \n-import { useEffect, useCallback } from \"react\";\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n export default function Login({ onLogin }: LoginProps) {\n-  console.log(\"Login component rendered, onLogin type:\", typeof onLogin);\n+  const router = useRouter();\n+  const [error, setError] = useState<string | null>(null);\n \n-  const handleTelegramLogin = useCallback(\n-    (user: TelegramUser) => {\n-      console.log(\"Handling Telegram login:\", user);\n-      if (typeof onLogin === \"function\") {\n-        onLogin(user);\n-      } else {\n-        console.error(\"onLogin is not a function:\", onLogin);\n-      }\n-    },\n-    [onLogin]\n-  );\n-\n   useEffect(() => {\n     console.log(\"Login component mounted\");\n     console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n-\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n-      console.log(\"Telegram WebApp is available\");\n \n-      if (webApp.initDataUnsafe.user) {\n-        console.log(\"User data:\", webApp.initDataUnsafe.user);\n-        handleTelegramLogin(webApp.initDataUnsafe.user);\n+      const initData = webApp.initData;\n+\n+      //   console.log(\"Init Data:\", initData);\n+\n+      if (initData) {\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({ initData }),\n+        })\n+          .then((response) => {\n+            if (!response.ok) {\n+              throw new Error(`HTTP error! status: ${response.status}`);\n+            }\n+            return response.json();\n+          })\n+          .then(async (data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              const userParams = new URLSearchParams(initData).get(\"user\");\n+              if (userParams) {\n+                const user: TelegramUser = await JSON.parse(userParams);\n+                console.log(\"User data:\", user);\n+\n+                onLogin(user);\n+                router.push(\"/\");\n+              } else {\n+                throw new Error(\"User data not found\");\n+              }\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(`Failed to authenticate. ${error.message}`);\n+          });\n       } else {\n-        console.log(\"No user data available\");\n+        setError(\"No init data available. Please open this app from Telegram.\");\n       }\n     } else {\n-      console.log(\"Telegram WebApp is not available\");\n+      setError(\n+        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+      );\n     }\n-  }, [handleTelegramLogin]);\n-  console.log(\"Login component received onLogin prop:\", onLogin);\n+  }, [onLogin, router]);\n+\n+  if (error) {\n+    return <div>{error}</div>;\n+  }\n+\n   return <div>Authenticating...</div>;\n }\n-// \"use client\";\n-\n-// import { useEffect, useState } from \"react\";\n-// import { useRouter } from \"next/navigation\";\n-// import { TelegramUser } from \"@/types\";\n-\n-// interface LoginProps {\n-//   onLogin: (user: TelegramUser) => void;\n-// }\n-\n-// export default function Login({ onLogin }: LoginProps) {\n-//   const router = useRouter();\n-//   const [error, setError] = useState<string | null>(null);\n-\n-//   useEffect(() => {\n-//     console.log(\"Login component mounted\");\n-//     console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n-//     if (window.Telegram?.WebApp) {\n-//       const webApp = window.Telegram.WebApp;\n-//       webApp.ready();\n-\n-//       const initData = webApp.initData;\n-\n-//       //   console.log(\"Init Data:\", initData);\n-\n-//       if (initData) {\n-//         fetch(\"/api/auth/telegram\", {\n-//           method: \"POST\",\n-//           headers: {\n-//             \"Content-Type\": \"application/json\",\n-//           },\n-//           body: JSON.stringify({ initData }),\n-//         })\n-//           .then((response) => {\n-//             if (!response.ok) {\n-//               throw new Error(`HTTP error! status: ${response.status}`);\n-//             }\n-//             return response.json();\n-//           })\n-//           .then(async (data) => {\n-//             if (data.token) {\n-//               localStorage.setItem(\"token\", data.token);\n-//               const userParams = new URLSearchParams(initData).get(\"user\");\n-//               if (userParams) {\n-//                 const user: TelegramUser = await JSON.parse(userParams);\n-//                 console.log(\"User data:\", user);\n-\n-//                 onLogin(user);\n-//                 router.push(\"/\");\n-//               } else {\n-//                 throw new Error(\"User data not found\");\n-//               }\n-//             } else {\n-//               throw new Error(\"No token received\");\n-//             }\n-//           })\n-//           .catch((error) => {\n-//             console.error(\"Authentication error:\", error);\n-//             setError(`Failed to authenticate. ${error.message}`);\n-//           });\n-//       } else {\n-//         setError(\"No init data available. Please open this app from Telegram.\");\n-//       }\n-//     } else {\n-//       setError(\n-//         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-//       );\n-//     }\n-//   }, [onLogin, router]);\n-\n-//   if (error) {\n-//     return <div>{error}</div>;\n-//   }\n-\n-//   return <div>Authenticating...</div>;\n-// }\n"
                },
                {
                    "date": 1725106595973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n               localStorage.setItem(\"token\", data.token);\n               const userParams = new URLSearchParams(initData).get(\"user\");\n               if (userParams) {\n                 const user: TelegramUser = await JSON.parse(userParams);\n-                console.log(\"User data:\", user);\n+                console.log(\"User data: LOGIN\", user);\n \n                 onLogin(user);\n                 router.push(\"/\");\n               } else {\n"
                },
                {
                    "date": 1725106662621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n               localStorage.setItem(\"token\", data.token);\n               const userParams = new URLSearchParams(initData).get(\"user\");\n               if (userParams) {\n                 const user: TelegramUser = await JSON.parse(userParams);\n-                console.log(\"User data: LOGIN\", user);\n+                console.log(\"User data: LOGIN\", user, typeof onLogin);\n \n                 onLogin(user);\n                 router.push(\"/\");\n               } else {\n"
                },
                {
                    "date": 1725106729527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,10 @@\n   onLogin: (user: TelegramUser) => void;\n }\n \n export default function Login({ onLogin }: LoginProps) {\n+  console.log(\"ONLOG \" + typeof onLogin);\n+\n   const router = useRouter();\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1725107144944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n               localStorage.setItem(\"token\", data.token);\n               const userParams = new URLSearchParams(initData).get(\"user\");\n               if (userParams) {\n                 const user: TelegramUser = await JSON.parse(userParams);\n-                console.log(\"User data: LOGIN\", user, typeof onLogin);\n+                console.log(\"User data: LOGIN\", user, typeof onLogin(user));\n \n                 onLogin(user);\n                 router.push(\"/\");\n               } else {\n"
                },
                {
                    "date": 1725107177229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n               localStorage.setItem(\"token\", data.token);\n               const userParams = new URLSearchParams(initData).get(\"user\");\n               if (userParams) {\n                 const user: TelegramUser = await JSON.parse(userParams);\n-                console.log(\"User data: LOGIN\", user, typeof onLogin(user));\n+                console.log(\"User data: LOGIN\", user);\n \n                 onLogin(user);\n                 router.push(\"/\");\n               } else {\n"
                },
                {
                    "date": 1725107209269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n               localStorage.setItem(\"token\", data.token);\n               const userParams = new URLSearchParams(initData).get(\"user\");\n               if (userParams) {\n                 const user: TelegramUser = await JSON.parse(userParams);\n-                console.log(\"User data: LOGIN\", user);\n+                // console.log(\"User data: LOGIN\", user);\n \n                 onLogin(user);\n                 router.push(\"/\");\n               } else {\n"
                },
                {
                    "date": 1725107223979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,11 +33,11 @@\n           },\n           body: JSON.stringify({ initData }),\n         })\n           .then((response) => {\n-            if (!response.ok) {\n-              throw new Error(`HTTP error! status: ${response.status}`);\n-            }\n+            // if (!response.ok) {\n+            //   throw new Error(`HTTP error! status: ${response.status}`);\n+            // }\n             return response.json();\n           })\n           .then(async (data) => {\n             if (data.token) {\n"
                },
                {
                    "date": 1725107235624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,11 +33,11 @@\n           },\n           body: JSON.stringify({ initData }),\n         })\n           .then((response) => {\n-            // if (!response.ok) {\n-            //   throw new Error(`HTTP error! status: ${response.status}`);\n-            // }\n+            if (!response.ok) {\n+              throw new Error(`HTTP error! status: ${response.status}`);\n+            }\n             return response.json();\n           })\n           .then(async (data) => {\n             if (data.token) {\n"
                },
                {
                    "date": 1725107276345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import { TelegramUser } from \"@/types\";\n+\n+interface LoginProps {\n+  onLogin: (user: TelegramUser) => void;\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  //   console.log(\"ONLOG \" + typeof onLogin);\n+\n+  const router = useRouter();\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    console.log(\"Login component mounted\");\n+    // console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready();\n+\n+      const initData = webApp.initData;\n+\n+      //   console.log(\"Init Data:\", initData);\n+\n+      if (initData) {\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({ initData }),\n+        })\n+          .then((response) => {\n+            if (!response.ok) {\n+              throw new Error(`HTTP error! status: ${response.status}`);\n+            }\n+            return response.json();\n+          })\n+          .then(async (data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              const userParams = new URLSearchParams(initData).get(\"user\");\n+              if (userParams) {\n+                const user: TelegramUser = await JSON.parse(userParams);\n+                // console.log(\"User data: LOGIN\", user);\n+\n+                onLogin(user);\n+                router.push(\"/\");\n+              } else {\n+                throw new Error(\"User data not found\");\n+              }\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(`Failed to authenticate. ${error.message}`);\n+          });\n+      } else {\n+        setError(\"No init data available. Please open this app from Telegram.\");\n+      }\n+    } else {\n+      setError(\n+        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+      );\n+    }\n+  }, [onLogin, router]);\n+\n+  if (error) {\n+    return <div>{error}</div>;\n+  }\n+\n+  return <div>Authenticating...</div>;\n+}\n"
                },
                {
                    "date": 1725107316078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n+  onLogin: () => void;\n }\n \n export default function Login({ onLogin }: LoginProps) {\n   //   console.log(\"ONLOG \" + typeof onLogin);\n@@ -75,82 +75,4 @@\n   }\n \n   return <div>Authenticating...</div>;\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import { TelegramUser } from \"@/types\";\n-\n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  console.log(\"ONLOG \" + typeof onLogin);\n-\n-  const router = useRouter();\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    console.log(\"Login component mounted\");\n-    console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready();\n-\n-      const initData = webApp.initData;\n-\n-      //   console.log(\"Init Data:\", initData);\n-\n-      if (initData) {\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify({ initData }),\n-        })\n-          .then((response) => {\n-            if (!response.ok) {\n-              throw new Error(`HTTP error! status: ${response.status}`);\n-            }\n-            return response.json();\n-          })\n-          .then(async (data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              const userParams = new URLSearchParams(initData).get(\"user\");\n-              if (userParams) {\n-                const user: TelegramUser = await JSON.parse(userParams);\n-                // console.log(\"User data: LOGIN\", user);\n-\n-                onLogin(user);\n-                router.push(\"/\");\n-              } else {\n-                throw new Error(\"User data not found\");\n-              }\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(`Failed to authenticate. ${error.message}`);\n-          });\n-      } else {\n-        setError(\"No init data available. Please open this app from Telegram.\");\n-      }\n-    } else {\n-      setError(\n-        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-      );\n-    }\n-  }, [onLogin, router]);\n-\n-  if (error) {\n-    return <div>{error}</div>;\n-  }\n-\n-  return <div>Authenticating...</div>;\n-}\n"
                },
                {
                    "date": 1725107330252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n               if (userParams) {\n                 const user: TelegramUser = await JSON.parse(userParams);\n                 // console.log(\"User data: LOGIN\", user);\n \n-                onLogin(user);\n+                onLogin(user:TelegramUser);\n                 router.push(\"/\");\n               } else {\n                 throw new Error(\"User data not found\");\n               }\n"
                },
                {
                    "date": 1725107356620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useRouter } from \"next/navigation\";\n+import { TelegramUser } from \"@/types\";\n+\n+interface LoginProps {\n+  onLogin: () => void;\n+}\n+\n+export default function Login({ onLogin }: LoginProps) {\n+  //   console.log(\"ONLOG \" + typeof onLogin);\n+\n+  const router = useRouter();\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    console.log(\"Login component mounted\");\n+    // console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready();\n+\n+      const initData = webApp.initData;\n+\n+      //   console.log(\"Init Data:\", initData);\n+\n+      if (initData) {\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({ initData }),\n+        })\n+          .then((response) => {\n+            if (!response.ok) {\n+              throw new Error(`HTTP error! status: ${response.status}`);\n+            }\n+            return response.json();\n+          })\n+          .then(async (data) => {\n+            if (data.token) {\n+              localStorage.setItem(\"token\", data.token);\n+              const userParams = new URLSearchParams(initData).get(\"user\");\n+              if (userParams) {\n+                const user: TelegramUser = await JSON.parse(userParams);\n+                // console.log(\"User data: LOGIN\", user);\n+\n+                onLogin(user as TelegramUser);\n+                router.push(\"/\");\n+              } else {\n+                throw new Error(\"User data not found\");\n+              }\n+            } else {\n+              throw new Error(\"No token received\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(`Failed to authenticate. ${error.message}`);\n+          });\n+      } else {\n+        setError(\"No init data available. Please open this app from Telegram.\");\n+      }\n+    } else {\n+      setError(\n+        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+      );\n+    }\n+  }, [onLogin, router]);\n+\n+  if (error) {\n+    return <div>{error}</div>;\n+  }\n+\n+  return <div>Authenticating...</div>;\n+}\n"
                },
                {
                    "date": 1725107369695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n               if (userParams) {\n                 const user: TelegramUser = await JSON.parse(userParams);\n                 // console.log(\"User data: LOGIN\", user);\n \n-                onLogin(user as TelegramUser);\n+                onLogin(user);\n                 router.push(\"/\");\n               } else {\n                 throw new Error(\"User data not found\");\n               }\n@@ -75,82 +75,4 @@\n   }\n \n   return <div>Authenticating...</div>;\n }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n-import { TelegramUser } from \"@/types\";\n-\n-interface LoginProps {\n-  onLogin: () => void;\n-}\n-\n-export default function Login({ onLogin }: LoginProps) {\n-  //   console.log(\"ONLOG \" + typeof onLogin);\n-\n-  const router = useRouter();\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    console.log(\"Login component mounted\");\n-    // console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready();\n-\n-      const initData = webApp.initData;\n-\n-      //   console.log(\"Init Data:\", initData);\n-\n-      if (initData) {\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify({ initData }),\n-        })\n-          .then((response) => {\n-            if (!response.ok) {\n-              throw new Error(`HTTP error! status: ${response.status}`);\n-            }\n-            return response.json();\n-          })\n-          .then(async (data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              const userParams = new URLSearchParams(initData).get(\"user\");\n-              if (userParams) {\n-                const user: TelegramUser = await JSON.parse(userParams);\n-                // console.log(\"User data: LOGIN\", user);\n-\n-                onLogin(user:TelegramUser);\n-                router.push(\"/\");\n-              } else {\n-                throw new Error(\"User data not found\");\n-              }\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(`Failed to authenticate. ${error.message}`);\n-          });\n-      } else {\n-        setError(\"No init data available. Please open this app from Telegram.\");\n-      }\n-    } else {\n-      setError(\n-        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-      );\n-    }\n-  }, [onLogin, router]);\n-\n-  if (error) {\n-    return <div>{error}</div>;\n-  }\n-\n-  return <div>Authenticating...</div>;\n-}\n"
                },
                {
                    "date": 1725107389845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n interface LoginProps {\n-  onLogin: () => void;\n+  onLogin: (user: TelegramUser) => void;\n }\n \n export default function Login({ onLogin }: LoginProps) {\n   //   console.log(\"ONLOG \" + typeof onLogin);\n@@ -46,9 +46,9 @@\n               if (userParams) {\n                 const user: TelegramUser = await JSON.parse(userParams);\n                 // console.log(\"User data: LOGIN\", user);\n \n-                onLogin(user);\n+                onLogin(user) as void;\n                 router.push(\"/\");\n               } else {\n                 throw new Error(\"User data not found\");\n               }\n"
                },
                {
                    "date": 1725107431371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,14 +38,14 @@\n               throw new Error(`HTTP error! status: ${response.status}`);\n             }\n             return response.json();\n           })\n-          .then(async (data) => {\n+          .then((data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n               const userParams = new URLSearchParams(initData).get(\"user\");\n               if (userParams) {\n-                const user: TelegramUser = await JSON.parse(userParams);\n+                const user: TelegramUser = JSON.parse(userParams);\n                 // console.log(\"User data: LOGIN\", user);\n \n                 onLogin(user) as void;\n                 router.push(\"/\");\n"
                },
                {
                    "date": 1725107578497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n               if (userParams) {\n                 const user: TelegramUser = JSON.parse(userParams);\n                 // console.log(\"User data: LOGIN\", user);\n \n-                onLogin(user) as void;\n+                onLogin(user);\n                 router.push(\"/\");\n               } else {\n                 throw new Error(\"User data not found\");\n               }\n"
                },
                {
                    "date": 1725108037059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,10 @@\n           .then((data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n               const userParams = new URLSearchParams(initData).get(\"user\");\n+              console.log(\"User data:\", userParams);\n+\n               if (userParams) {\n                 const user: TelegramUser = JSON.parse(userParams);\n                 // console.log(\"User data: LOGIN\", user);\n \n"
                },
                {
                    "date": 1725108128022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n           .then((data) => {\n             if (data.token) {\n               localStorage.setItem(\"token\", data.token);\n               const userParams = new URLSearchParams(initData).get(\"user\");\n-              console.log(\"User data:\", userParams);\n+              console.log(\"User PARAMS:\", userParams);\n \n               if (userParams) {\n                 const user: TelegramUser = JSON.parse(userParams);\n                 // console.log(\"User data: LOGIN\", user);\n"
                },
                {
                    "date": 1725141232083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,80 +1,122 @@\n+// \"use client\";\n+\n+// import { useEffect, useState } from \"react\";\n+// import { useRouter } from \"next/navigation\";\n+// import { TelegramUser } from \"@/types\";\n+\n+// interface LoginProps {\n+//   onLogin: (user: TelegramUser) => void;\n+// }\n+\n+// export default function Login({ onLogin }: LoginProps) {\n+//   //   console.log(\"ONLOG \" + typeof onLogin);\n+\n+//   const router = useRouter();\n+//   const [error, setError] = useState<string | null>(null);\n+\n+//   useEffect(() => {\n+//     console.log(\"Login component mounted\");\n+//     // console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n+//     if (window.Telegram?.WebApp) {\n+//       const webApp = window.Telegram.WebApp;\n+//       webApp.ready();\n+\n+//       const initData = webApp.initData;\n+\n+//       //   console.log(\"Init Data:\", initData);\n+\n+//       if (initData) {\n+//         fetch(\"/api/auth/telegram\", {\n+//           method: \"POST\",\n+//           headers: {\n+//             \"Content-Type\": \"application/json\",\n+//           },\n+//           body: JSON.stringify({ initData }),\n+//         })\n+//           .then((response) => {\n+//             if (!response.ok) {\n+//               throw new Error(`HTTP error! status: ${response.status}`);\n+//             }\n+//             return response.json();\n+//           })\n+//           .then((data) => {\n+//             if (data.token) {\n+//               localStorage.setItem(\"token\", data.token);\n+//               const userParams = new URLSearchParams(initData).get(\"user\");\n+//               console.log(\"User PARAMS:\", userParams);\n+\n+//               if (userParams) {\n+//                 const user: TelegramUser = JSON.parse(userParams);\n+//                 // console.log(\"User data: LOGIN\", user);\n+\n+//                 onLogin(user);\n+//                 router.push(\"/\");\n+//               } else {\n+//                 throw new Error(\"User data not found\");\n+//               }\n+//             } else {\n+//               throw new Error(\"No token received\");\n+//             }\n+//           })\n+//           .catch((error) => {\n+//             console.error(\"Authentication error:\", error);\n+//             setError(`Failed to authenticate. ${error.message}`);\n+//           });\n+//       } else {\n+//         setError(\"No init data available. Please open this app from Telegram.\");\n+//       }\n+//     } else {\n+//       setError(\n+//         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+//       );\n+//     }\n+//   }, [onLogin, router]);\n+\n+//   if (error) {\n+//     return <div>{error}</div>;\n+//   }\n+\n+//   return <div>Authenticating...</div>;\n+// }\n+\n \"use client\";\n \n-import { useEffect, useState } from \"react\";\n-import { useRouter } from \"next/navigation\";\n+import { useEffect, useCallback } from \"react\";\n import { TelegramUser } from \"@/types\";\n \n interface LoginProps {\n   onLogin: (user: TelegramUser) => void;\n }\n \n export default function Login({ onLogin }: LoginProps) {\n-  //   console.log(\"ONLOG \" + typeof onLogin);\n+  console.log(\"Login component rendered, onLogin type:\", typeof onLogin);\n \n-  const router = useRouter();\n-  const [error, setError] = useState<string | null>(null);\n+  const handleTelegramLogin = useCallback(\n+    (user: TelegramUser) => {\n+      console.log(\"Handling Telegram login:\", user);\n+      onLogin(user);\n+    },\n+    [onLogin]\n+  );\n \n   useEffect(() => {\n     console.log(\"Login component mounted\");\n-    // console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n+\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n+      console.log(\"Telegram WebApp is available\");\n \n-      const initData = webApp.initData;\n-\n-      //   console.log(\"Init Data:\", initData);\n-\n-      if (initData) {\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify({ initData }),\n-        })\n-          .then((response) => {\n-            if (!response.ok) {\n-              throw new Error(`HTTP error! status: ${response.status}`);\n-            }\n-            return response.json();\n-          })\n-          .then((data) => {\n-            if (data.token) {\n-              localStorage.setItem(\"token\", data.token);\n-              const userParams = new URLSearchParams(initData).get(\"user\");\n-              console.log(\"User PARAMS:\", userParams);\n-\n-              if (userParams) {\n-                const user: TelegramUser = JSON.parse(userParams);\n-                // console.log(\"User data: LOGIN\", user);\n-\n-                onLogin(user);\n-                router.push(\"/\");\n-              } else {\n-                throw new Error(\"User data not found\");\n-              }\n-            } else {\n-              throw new Error(\"No token received\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(`Failed to authenticate. ${error.message}`);\n-          });\n+      if (webApp.initDataUnsafe.user) {\n+        console.log(\"User data:\", webApp.initDataUnsafe.user);\n+        handleTelegramLogin(webApp.initDataUnsafe.user as TelegramUser);\n       } else {\n-        setError(\"No init data available. Please open this app from Telegram.\");\n+        console.log(\"No user data available\");\n       }\n     } else {\n-      setError(\n-        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-      );\n+      console.log(\"Telegram WebApp is not available\");\n     }\n-  }, [onLogin, router]);\n+  }, [handleTelegramLogin]);\n \n-  if (error) {\n-    return <div>{error}</div>;\n-  }\n-\n-  return <div>Authenticating...</div>;\n+  return <div>Authenticating with Telegram...</div>;\n }\n"
                },
                {
                    "date": 1725141881447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,122 +1,31 @@\n-// \"use client\";\n-\n-// import { useEffect, useState } from \"react\";\n-// import { useRouter } from \"next/navigation\";\n-// import { TelegramUser } from \"@/types\";\n-\n-// interface LoginProps {\n-//   onLogin: (user: TelegramUser) => void;\n-// }\n-\n-// export default function Login({ onLogin }: LoginProps) {\n-//   //   console.log(\"ONLOG \" + typeof onLogin);\n-\n-//   const router = useRouter();\n-//   const [error, setError] = useState<string | null>(null);\n-\n-//   useEffect(() => {\n-//     console.log(\"Login component mounted\");\n-//     // console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n-//     if (window.Telegram?.WebApp) {\n-//       const webApp = window.Telegram.WebApp;\n-//       webApp.ready();\n-\n-//       const initData = webApp.initData;\n-\n-//       //   console.log(\"Init Data:\", initData);\n-\n-//       if (initData) {\n-//         fetch(\"/api/auth/telegram\", {\n-//           method: \"POST\",\n-//           headers: {\n-//             \"Content-Type\": \"application/json\",\n-//           },\n-//           body: JSON.stringify({ initData }),\n-//         })\n-//           .then((response) => {\n-//             if (!response.ok) {\n-//               throw new Error(`HTTP error! status: ${response.status}`);\n-//             }\n-//             return response.json();\n-//           })\n-//           .then((data) => {\n-//             if (data.token) {\n-//               localStorage.setItem(\"token\", data.token);\n-//               const userParams = new URLSearchParams(initData).get(\"user\");\n-//               console.log(\"User PARAMS:\", userParams);\n-\n-//               if (userParams) {\n-//                 const user: TelegramUser = JSON.parse(userParams);\n-//                 // console.log(\"User data: LOGIN\", user);\n-\n-//                 onLogin(user);\n-//                 router.push(\"/\");\n-//               } else {\n-//                 throw new Error(\"User data not found\");\n-//               }\n-//             } else {\n-//               throw new Error(\"No token received\");\n-//             }\n-//           })\n-//           .catch((error) => {\n-//             console.error(\"Authentication error:\", error);\n-//             setError(`Failed to authenticate. ${error.message}`);\n-//           });\n-//       } else {\n-//         setError(\"No init data available. Please open this app from Telegram.\");\n-//       }\n-//     } else {\n-//       setError(\n-//         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-//       );\n-//     }\n-//   }, [onLogin, router]);\n-\n-//   if (error) {\n-//     return <div>{error}</div>;\n-//   }\n-\n-//   return <div>Authenticating...</div>;\n-// }\n-\n \"use client\";\n \n-import { useEffect, useCallback } from \"react\";\n+import { useEffect } from \"react\";\n+import { useAuth } from \"@/context/AuthContext\";\n+import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n-interface LoginProps {\n-  onLogin: (user: TelegramUser) => void;\n-}\n+export default function Login() {\n+  const { login } = useAuth();\n+  const router = useRouter();\n \n-export default function Login({ onLogin }: LoginProps) {\n-  console.log(\"Login component rendered, onLogin type:\", typeof onLogin);\n-\n-  const handleTelegramLogin = useCallback(\n-    (user: TelegramUser) => {\n-      console.log(\"Handling Telegram login:\", user);\n-      onLogin(user);\n-    },\n-    [onLogin]\n-  );\n-\n   useEffect(() => {\n-    console.log(\"Login component mounted\");\n-\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n-      console.log(\"Telegram WebApp is available\");\n \n       if (webApp.initDataUnsafe.user) {\n-        console.log(\"User data:\", webApp.initDataUnsafe.user);\n-        handleTelegramLogin(webApp.initDataUnsafe.user as TelegramUser);\n+        const user = webApp.initDataUnsafe.user as TelegramUser;\n+        console.log(\"User data:\", user);\n+        login(user);\n+        router.push(\"/\");\n       } else {\n         console.log(\"No user data available\");\n       }\n     } else {\n       console.log(\"Telegram WebApp is not available\");\n     }\n-  }, [handleTelegramLogin]);\n+  }, [login, router]);\n \n   return <div>Authenticating with Telegram...</div>;\n }\n"
                },
                {
                    "date": 1725143080647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,152 @@\n+// \"use client\";\n+\n+// import { useEffect, useState } from \"react\";\n+// import { useRouter } from \"next/navigation\";\n+// import { TelegramUser } from \"@/types\";\n+\n+// interface LoginProps {\n+//   onLogin: (user: TelegramUser) => void;\n+// }\n+\n+// export default function Login({ onLogin }: LoginProps) {\n+//   //   console.log(\"ONLOG \" + typeof onLogin);\n+\n+//   const router = useRouter();\n+//   const [error, setError] = useState<string | null>(null);\n+\n+//   useEffect(() => {\n+//     console.log(\"Login component mounted\");\n+//     // console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n+//     if (window.Telegram?.WebApp) {\n+//       const webApp = window.Telegram.WebApp;\n+//       webApp.ready();\n+\n+//       const initData = webApp.initData;\n+\n+//       //   console.log(\"Init Data:\", initData);\n+\n+//       if (initData) {\n+//         fetch(\"/api/auth/telegram\", {\n+//           method: \"POST\",\n+//           headers: {\n+//             \"Content-Type\": \"application/json\",\n+//           },\n+//           body: JSON.stringify({ initData }),\n+//         })\n+//           .then((response) => {\n+//             if (!response.ok) {\n+//               throw new Error(`HTTP error! status: ${response.status}`);\n+//             }\n+//             return response.json();\n+//           })\n+//           .then((data) => {\n+//             if (data.token) {\n+//               localStorage.setItem(\"token\", data.token);\n+//               const userParams = new URLSearchParams(initData).get(\"user\");\n+//               console.log(\"User PARAMS:\", userParams);\n+\n+//               if (userParams) {\n+//                 const user: TelegramUser = JSON.parse(userParams);\n+//                 // console.log(\"User data: LOGIN\", user);\n+\n+//                 onLogin(user);\n+//                 router.push(\"/\");\n+//               } else {\n+//                 throw new Error(\"User data not found\");\n+//               }\n+//             } else {\n+//               throw new Error(\"No token received\");\n+//             }\n+//           })\n+//           .catch((error) => {\n+//             console.error(\"Authentication error:\", error);\n+//             setError(`Failed to authenticate. ${error.message}`);\n+//           });\n+//       } else {\n+//         setError(\"No init data available. Please open this app from Telegram.\");\n+//       }\n+//     } else {\n+//       setError(\n+//         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+//       );\n+//     }\n+//   }, [onLogin, router]);\n+\n+//   if (error) {\n+//     return <div>{error}</div>;\n+//   }\n+\n+//   return <div>Authenticating...</div>;\n+// }\n+\n \"use client\";\n \n-import { useEffect } from \"react\";\n-import { useAuth } from \"@/context/AuthContext\";\n+import { useEffect, useState } from \"react\";\n+import { useAuth } from \"@/contexts/AuthContext\";\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n export default function Login() {\n   const { login } = useAuth();\n   const router = useRouter();\n+  const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n \n-      if (webApp.initDataUnsafe.user) {\n-        const user = webApp.initDataUnsafe.user as TelegramUser;\n-        console.log(\"User data:\", user);\n-        login(user);\n-        router.push(\"/\");\n+      const initData = webApp.initData;\n+\n+      if (initData) {\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({ initData }),\n+        })\n+          .then((response) => {\n+            if (!response.ok) {\n+              throw new Error(`HTTP error! status: ${response.status}`);\n+            }\n+            return response.json();\n+          })\n+          .then((data) => {\n+            if (data.success) {\n+              const userParams = new URLSearchParams(initData).get(\"user\");\n+              console.log(\"User PARAMS:\", userParams);\n+\n+              if (userParams) {\n+                const user: TelegramUser = JSON.parse(userParams);\n+                console.log(\"User data:\", user);\n+\n+                login(user);\n+                router.push(\"/\");\n+              } else {\n+                throw new Error(\"User data not found\");\n+              }\n+            } else {\n+              throw new Error(\"Authentication failed\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(`Failed to authenticate. ${error.message}`);\n+          });\n       } else {\n-        console.log(\"No user data available\");\n+        setError(\"No init data available. Please open this app from Telegram.\");\n       }\n     } else {\n-      console.log(\"Telegram WebApp is not available\");\n+      setError(\n+        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+      );\n     }\n   }, [login, router]);\n \n+  if (error) {\n+    return <div>{error}</div>;\n+  }\n+\n   return <div>Authenticating with Telegram...</div>;\n }\n"
                },
                {
                    "date": 1725143086487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n \n \"use client\";\n \n import { useEffect, useState } from \"react\";\n-import { useAuth } from \"@/contexts/AuthContext\";\n+import { useAuth } from \"@/context/AuthContext\";\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n export default function Login() {\n"
                },
                {
                    "date": 1725143306216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,9 @@\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n \n       const initData = webApp.initData;\n+      console.log(\"Init Data:\", initData);\n \n       if (initData) {\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n"
                },
                {
                    "date": 1725143371785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,9 @@\n   useEffect(() => {\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n+      console.log(\"WEBAPP:\", webApp);\n \n       const initData = webApp.initData;\n       console.log(\"Init Data:\", initData);\n \n"
                },
                {
                    "date": 1725143445547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,78 +77,54 @@\n //   }\n \n //   return <div>Authenticating...</div>;\n // }\n-\n \"use client\";\n \n-import { useEffect, useState } from \"react\";\n-import { useAuth } from \"@/context/AuthContext\";\n+import { useEffect } from \"react\";\n+import { useAuth } from \"@/contexts/AuthContext\";\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n export default function Login() {\n   const { login } = useAuth();\n   const router = useRouter();\n-  const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n-      console.log(\"WEBAPP:\", webApp);\n \n-      const initData = webApp.initData;\n-      console.log(\"Init Data:\", initData);\n+      if (webApp.initDataUnsafe.user) {\n+        const user = webApp.initDataUnsafe.user as TelegramUser;\n+        console.log(\"User data:\", user);\n \n-      if (initData) {\n+        // Send the initData to your API for verification\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n           headers: {\n             \"Content-Type\": \"application/json\",\n           },\n-          body: JSON.stringify({ initData }),\n+          body: JSON.stringify({ initData: webApp.initData }),\n         })\n-          .then((response) => {\n-            if (!response.ok) {\n-              throw new Error(`HTTP error! status: ${response.status}`);\n-            }\n-            return response.json();\n-          })\n+          .then((response) => response.json())\n           .then((data) => {\n             if (data.success) {\n-              const userParams = new URLSearchParams(initData).get(\"user\");\n-              console.log(\"User PARAMS:\", userParams);\n-\n-              if (userParams) {\n-                const user: TelegramUser = JSON.parse(userParams);\n-                console.log(\"User data:\", user);\n-\n-                login(user);\n-                router.push(\"/\");\n-              } else {\n-                throw new Error(\"User data not found\");\n-              }\n+              login(user);\n+              router.push(\"/\");\n             } else {\n-              throw new Error(\"Authentication failed\");\n+              console.error(\"Authentication failed\");\n             }\n           })\n           .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(`Failed to authenticate. ${error.message}`);\n+            console.error(\"Error during authentication:\", error);\n           });\n       } else {\n-        setError(\"No init data available. Please open this app from Telegram.\");\n+        console.log(\"No user data available\");\n       }\n     } else {\n-      setError(\n-        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-      );\n+      console.log(\"Telegram WebApp is not available\");\n     }\n   }, [login, router]);\n \n-  if (error) {\n-    return <div>{error}</div>;\n-  }\n-\n   return <div>Authenticating with Telegram...</div>;\n }\n"
                },
                {
                    "date": 1725143542770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n // }\n \"use client\";\n \n import { useEffect } from \"react\";\n-import { useAuth } from \"@/contexts/AuthContext\";\n+import { useAuth } from \"@/context/AuthContext\";\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n export default function Login() {\n"
                },
                {
                    "date": 1725143853354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,19 +79,21 @@\n //   return <div>Authenticating...</div>;\n // }\n \"use client\";\n \n-import { useEffect } from \"react\";\n-import { useAuth } from \"@/context/AuthContext\";\n+import { useEffect, useState } from \"react\";\n+import { useAuth } from \"@/contexts/AuthContext\";\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n export default function Login() {\n   const { login } = useAuth();\n   const router = useRouter();\n+  const [loginUrl, setLoginUrl] = useState(\"\");\n \n   useEffect(() => {\n     if (window.Telegram?.WebApp) {\n+      console.log(\"Telegram WebApp is available\");\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n \n       if (webApp.initDataUnsafe.user) {\n@@ -122,9 +124,25 @@\n         console.log(\"No user data available\");\n       }\n     } else {\n       console.log(\"Telegram WebApp is not available\");\n+      // Generate login URL for regular web browser\n+      const botName = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME;\n+      const appUrl = encodeURIComponent(window.location.origin);\n+      setLoginUrl(`https://t.me/${botName}?start=${appUrl}`);\n     }\n   }, [login, router]);\n \n+  if (loginUrl) {\n+    return (\n+      <div>\n+        <h1>Login with Telegram</h1>\n+        <p>Please open this app in Telegram to log in:</p>\n+        <a href={loginUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n+          Open in Telegram\n+        </a>\n+      </div>\n+    );\n+  }\n+\n   return <div>Authenticating with Telegram...</div>;\n }\n"
                },
                {
                    "date": 1725143867457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n // }\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n-import { useAuth } from \"@/contexts/AuthContext\";\n+import { useAuth } from \"@/context/AuthContext\";\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n export default function Login() {\n"
                },
                {
                    "date": 1725144362055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,11 @@\n     if (window.Telegram?.WebApp) {\n       console.log(\"Telegram WebApp is available\");\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n+      const initData = webApp.initData;\n \n+      console.log(\"Init Data:\", initData);\n       if (webApp.initDataUnsafe.user) {\n         const user = webApp.initDataUnsafe.user as TelegramUser;\n         console.log(\"User data:\", user);\n \n"
                },
                {
                    "date": 1725144420159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,71 +80,85 @@\n // }\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n-import { useAuth } from \"@/context/AuthContext\";\n+import { useAuth } from \"@/contexts/AuthContext\";\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n export default function Login() {\n   const { login } = useAuth();\n   const router = useRouter();\n-  const [loginUrl, setLoginUrl] = useState(\"\");\n+  const [debugInfo, setDebugInfo] = useState<string>(\"\");\n \n   useEffect(() => {\n-    if (window.Telegram?.WebApp) {\n-      console.log(\"Telegram WebApp is available\");\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready();\n-      const initData = webApp.initData;\n+    let info = \"Debugging Information:\\n\";\n \n-      console.log(\"Init Data:\", initData);\n-      if (webApp.initDataUnsafe.user) {\n-        const user = webApp.initDataUnsafe.user as TelegramUser;\n-        console.log(\"User data:\", user);\n+    if (typeof window !== \"undefined\") {\n+      info += \"Window object is available.\\n\";\n \n-        // Send the initData to your API for verification\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify({ initData: webApp.initData }),\n-        })\n-          .then((response) => response.json())\n-          .then((data) => {\n-            if (data.success) {\n-              login(user);\n-              router.push(\"/\");\n-            } else {\n-              console.error(\"Authentication failed\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Error during authentication:\", error);\n-          });\n+      if (window.Telegram) {\n+        info += \"Telegram object is available.\\n\";\n+\n+        if (window.Telegram.WebApp) {\n+          info += \"WebApp object is available.\\n\";\n+          info += `initData: ${window.Telegram.WebApp.initData}\\n`;\n+          info += `initDataUnsafe: ${JSON.stringify(\n+            window.Telegram.WebApp.initDataUnsafe,\n+            null,\n+            2\n+          )}\\n`;\n+\n+          window.Telegram.WebApp.ready();\n+\n+          if (window.Telegram.WebApp.initDataUnsafe.user) {\n+            const user = window.Telegram.WebApp.initDataUnsafe\n+              .user as TelegramUser;\n+            info += `User data: ${JSON.stringify(user, null, 2)}\\n`;\n+\n+            fetch(\"/api/auth/telegram\", {\n+              method: \"POST\",\n+              headers: {\n+                \"Content-Type\": \"application/json\",\n+              },\n+              body: JSON.stringify({\n+                initData: window.Telegram.WebApp.initData,\n+              }),\n+            })\n+              .then((response) => response.json())\n+              .then((data) => {\n+                info += `API response: ${JSON.stringify(data, null, 2)}\\n`;\n+                if (data.success) {\n+                  login(user);\n+                  router.push(\"/\");\n+                } else {\n+                  info += \"Authentication failed.\\n\";\n+                }\n+                setDebugInfo(info);\n+              })\n+              .catch((error) => {\n+                info += `Error during authentication: ${error}\\n`;\n+                setDebugInfo(info);\n+              });\n+          } else {\n+            info += \"User data is not available in initDataUnsafe.\\n\";\n+          }\n+        } else {\n+          info += \"WebApp object is not available.\\n\";\n+        }\n       } else {\n-        console.log(\"No user data available\");\n+        info += \"Telegram object is not available.\\n\";\n       }\n     } else {\n-      console.log(\"Telegram WebApp is not available\");\n-      // Generate login URL for regular web browser\n-      const botName = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME;\n-      const appUrl = encodeURIComponent(window.location.origin);\n-      setLoginUrl(`https://t.me/${botName}?start=${appUrl}`);\n+      info += \"Window object is not available (server-side rendering).\\n\";\n     }\n+\n+    setDebugInfo(info);\n   }, [login, router]);\n \n-  if (loginUrl) {\n-    return (\n-      <div>\n-        <h1>Login with Telegram</h1>\n-        <p>Please open this app in Telegram to log in:</p>\n-        <a href={loginUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n-          Open in Telegram\n-        </a>\n-      </div>\n-    );\n-  }\n-\n-  return <div>Authenticating with Telegram...</div>;\n+  return (\n+    <div>\n+      <h1>Authenticating with Telegram...</h1>\n+      <pre>{debugInfo}</pre>\n+    </div>\n+  );\n }\n"
                },
                {
                    "date": 1725144571279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,74 +88,85 @@\n export default function Login() {\n   const { login } = useAuth();\n   const router = useRouter();\n   const [debugInfo, setDebugInfo] = useState<string>(\"\");\n+  const [loginUrl, setLoginUrl] = useState<string | null>(null);\n \n   useEffect(() => {\n     let info = \"Debugging Information:\\n\";\n \n     if (typeof window !== \"undefined\") {\n       info += \"Window object is available.\\n\";\n \n-      if (window.Telegram) {\n-        info += \"Telegram object is available.\\n\";\n+      if (window.Telegram?.WebApp) {\n+        info += \"Telegram WebApp is available.\\n\";\n+        const webApp = window.Telegram.WebApp;\n \n-        if (window.Telegram.WebApp) {\n-          info += \"WebApp object is available.\\n\";\n-          info += `initData: ${window.Telegram.WebApp.initData}\\n`;\n-          info += `initDataUnsafe: ${JSON.stringify(\n-            window.Telegram.WebApp.initDataUnsafe,\n-            null,\n-            2\n-          )}\\n`;\n+        info += `initData: ${webApp.initData}\\n`;\n+        info += `initDataUnsafe: ${JSON.stringify(\n+          webApp.initDataUnsafe,\n+          null,\n+          2\n+        )}\\n`;\n \n-          window.Telegram.WebApp.ready();\n+        webApp.ready();\n \n-          if (window.Telegram.WebApp.initDataUnsafe.user) {\n-            const user = window.Telegram.WebApp.initDataUnsafe\n-              .user as TelegramUser;\n-            info += `User data: ${JSON.stringify(user, null, 2)}\\n`;\n+        if (webApp.initDataUnsafe.user) {\n+          const user = webApp.initDataUnsafe.user as TelegramUser;\n+          info += `User data: ${JSON.stringify(user, null, 2)}\\n`;\n \n-            fetch(\"/api/auth/telegram\", {\n-              method: \"POST\",\n-              headers: {\n-                \"Content-Type\": \"application/json\",\n-              },\n-              body: JSON.stringify({\n-                initData: window.Telegram.WebApp.initData,\n-              }),\n+          fetch(\"/api/auth/telegram\", {\n+            method: \"POST\",\n+            headers: {\n+              \"Content-Type\": \"application/json\",\n+            },\n+            body: JSON.stringify({ initData: webApp.initData }),\n+          })\n+            .then((response) => response.json())\n+            .then((data) => {\n+              info += `API response: ${JSON.stringify(data, null, 2)}\\n`;\n+              if (data.success) {\n+                login(user);\n+                router.push(\"/\");\n+              } else {\n+                info += \"Authentication failed.\\n\";\n+              }\n+              setDebugInfo(info);\n             })\n-              .then((response) => response.json())\n-              .then((data) => {\n-                info += `API response: ${JSON.stringify(data, null, 2)}\\n`;\n-                if (data.success) {\n-                  login(user);\n-                  router.push(\"/\");\n-                } else {\n-                  info += \"Authentication failed.\\n\";\n-                }\n-                setDebugInfo(info);\n-              })\n-              .catch((error) => {\n-                info += `Error during authentication: ${error}\\n`;\n-                setDebugInfo(info);\n-              });\n-          } else {\n-            info += \"User data is not available in initDataUnsafe.\\n\";\n-          }\n+            .catch((error) => {\n+              info += `Error during authentication: ${error}\\n`;\n+              setDebugInfo(info);\n+            });\n         } else {\n-          info += \"WebApp object is not available.\\n\";\n+          info += \"User data is not available in initDataUnsafe.\\n\";\n         }\n       } else {\n-        info += \"Telegram object is not available.\\n\";\n+        info += \"Telegram WebApp is not available.\\n\";\n+        // Generate login URL for regular web browser\n+        const botName = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME;\n+        const appUrl = encodeURIComponent(window.location.origin);\n+        setLoginUrl(`https://t.me/${botName}?start=${appUrl}`);\n       }\n     } else {\n       info += \"Window object is not available (server-side rendering).\\n\";\n     }\n \n     setDebugInfo(info);\n   }, [login, router]);\n \n+  if (loginUrl) {\n+    return (\n+      <div>\n+        <h1>Login with Telegram</h1>\n+        <p>Please open this app in Telegram to log in:</p>\n+        <a href={loginUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n+          Open in Telegram\n+        </a>\n+        <pre>{debugInfo}</pre>\n+      </div>\n+    );\n+  }\n+\n   return (\n     <div>\n       <h1>Authenticating with Telegram...</h1>\n       <pre>{debugInfo}</pre>\n"
                },
                {
                    "date": 1725144590973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n // }\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n-import { useAuth } from \"@/contexts/AuthContext\";\n+import { useAuth } from \"@/context/AuthContext\";\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n export default function Login() {\n"
                },
                {
                    "date": 1725165089032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,8 +95,9 @@\n     let info = \"Debugging Information:\\n\";\n \n     if (typeof window !== \"undefined\") {\n       info += \"Window object is available.\\n\";\n+      console.log(\"Telegram\", window.Telegram);\n \n       if (window.Telegram?.WebApp) {\n         info += \"Telegram WebApp is available.\\n\";\n         const webApp = window.Telegram.WebApp;\n"
                },
                {
                    "date": 1725166454602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,98 +79,52 @@\n //   return <div>Authenticating...</div>;\n // }\n \"use client\";\n \n-import { useEffect, useState } from \"react\";\n+import { useEffect } from \"react\";\n import { useAuth } from \"@/context/AuthContext\";\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n export default function Login() {\n   const { login } = useAuth();\n   const router = useRouter();\n-  const [debugInfo, setDebugInfo] = useState<string>(\"\");\n-  const [loginUrl, setLoginUrl] = useState<string | null>(null);\n \n   useEffect(() => {\n-    let info = \"Debugging Information:\\n\";\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready();\n \n-    if (typeof window !== \"undefined\") {\n-      info += \"Window object is available.\\n\";\n-      console.log(\"Telegram\", window.Telegram);\n+      if (webApp.initDataUnsafe.user) {\n+        const user = webApp.initDataUnsafe.user as TelegramUser;\n+        console.log(\"User data:\", user);\n \n-      if (window.Telegram?.WebApp) {\n-        info += \"Telegram WebApp is available.\\n\";\n-        const webApp = window.Telegram.WebApp;\n-\n-        info += `initData: ${webApp.initData}\\n`;\n-        info += `initDataUnsafe: ${JSON.stringify(\n-          webApp.initDataUnsafe,\n-          null,\n-          2\n-        )}\\n`;\n-\n-        webApp.ready();\n-\n-        if (webApp.initDataUnsafe.user) {\n-          const user = webApp.initDataUnsafe.user as TelegramUser;\n-          info += `User data: ${JSON.stringify(user, null, 2)}\\n`;\n-\n-          fetch(\"/api/auth/telegram\", {\n-            method: \"POST\",\n-            headers: {\n-              \"Content-Type\": \"application/json\",\n-            },\n-            body: JSON.stringify({ initData: webApp.initData }),\n+        // Send the initData to your API for verification\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({ initData: webApp.initData }),\n+        })\n+          .then((response) => response.json())\n+          .then((data) => {\n+            if (data.success) {\n+              login(user);\n+              router.push(\"/\");\n+            } else {\n+              console.error(\"Authentication failed\");\n+            }\n           })\n-            .then((response) => response.json())\n-            .then((data) => {\n-              info += `API response: ${JSON.stringify(data, null, 2)}\\n`;\n-              if (data.success) {\n-                login(user);\n-                router.push(\"/\");\n-              } else {\n-                info += \"Authentication failed.\\n\";\n-              }\n-              setDebugInfo(info);\n-            })\n-            .catch((error) => {\n-              info += `Error during authentication: ${error}\\n`;\n-              setDebugInfo(info);\n-            });\n-        } else {\n-          info += \"User data is not available in initDataUnsafe.\\n\";\n-        }\n+          .catch((error) => {\n+            console.error(\"Error during authentication:\", error);\n+          });\n       } else {\n-        info += \"Telegram WebApp is not available.\\n\";\n-        // Generate login URL for regular web browser\n-        const botName = process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME;\n-        const appUrl = encodeURIComponent(window.location.origin);\n-        setLoginUrl(`https://t.me/${botName}?start=${appUrl}`);\n+        console.log(\"No user data available\");\n       }\n     } else {\n-      info += \"Window object is not available (server-side rendering).\\n\";\n+      console.log(\"Telegram WebApp is not available\");\n     }\n-\n-    setDebugInfo(info);\n   }, [login, router]);\n \n-  if (loginUrl) {\n-    return (\n-      <div>\n-        <h1>Login with Telegram</h1>\n-        <p>Please open this app in Telegram to log in:</p>\n-        <a href={loginUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n-          Open in Telegram\n-        </a>\n-        <pre>{debugInfo}</pre>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div>\n-      <h1>Authenticating with Telegram...</h1>\n-      <pre>{debugInfo}</pre>\n-    </div>\n-  );\n+  return <div>Authenticating with Telegram...</div>;\n }\n"
                },
                {
                    "date": 1725168732727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,54 +77,69 @@\n //   }\n \n //   return <div>Authenticating...</div>;\n // }\n+\n \"use client\";\n \n-import { useEffect } from \"react\";\n+import { useEffect, useState } from \"react\";\n import { useAuth } from \"@/context/AuthContext\";\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n export default function Login() {\n   const { login } = useAuth();\n   const router = useRouter();\n+  const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n+      const initData = webApp.initData;\n \n-      if (webApp.initDataUnsafe.user) {\n-        const user = webApp.initDataUnsafe.user as TelegramUser;\n-        console.log(\"User data:\", user);\n-\n-        // Send the initData to your API for verification\n+      console.log(\"Init Data:\", initData);\n+      if (initData) {\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n           headers: {\n             \"Content-Type\": \"application/json\",\n           },\n-          body: JSON.stringify({ initData: webApp.initData }),\n+          body: JSON.stringify({ initData }),\n         })\n-          .then((response) => response.json())\n+          .then((response) => {\n+            if (!response.ok) {\n+              throw new Error(`HTTP error! status: ${response.status}`);\n+            }\n+            return response.json();\n+          })\n           .then((data) => {\n             if (data.success) {\n+              const user = JSON.parse(\n+                new URLSearchParams(initData).get(\"user\") || \"{}\"\n+              ) as TelegramUser;\n               login(user);\n               router.push(\"/\");\n             } else {\n-              console.error(\"Authentication failed\");\n+              throw new Error(\"Authentication failed\");\n             }\n           })\n           .catch((error) => {\n-            console.error(\"Error during authentication:\", error);\n+            console.error(\"Authentication error:\", error);\n+            setError(`Failed to authenticate. ${error.message}`);\n           });\n       } else {\n-        console.log(\"No user data available\");\n+        setError(\"No init data available. Please open this app from Telegram.\");\n       }\n     } else {\n-      console.log(\"Telegram WebApp is not available\");\n+      setError(\n+        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+      );\n     }\n   }, [login, router]);\n \n+  if (error) {\n+    return <div>{error}</div>;\n+  }\n+\n   return <div>Authenticating with Telegram...</div>;\n }\n"
                },
                {
                    "date": 1725170224492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,13 +77,12 @@\n //   }\n \n //   return <div>Authenticating...</div>;\n // }\n-\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n-import { useAuth } from \"@/context/AuthContext\";\n+import { useAuth } from \"@/contexts/AuthContext\";\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n export default function Login() {\n@@ -104,8 +103,9 @@\n           headers: {\n             \"Content-Type\": \"application/json\",\n           },\n           body: JSON.stringify({ initData }),\n+          credentials: \"include\",\n         })\n           .then((response) => {\n             if (!response.ok) {\n               throw new Error(`HTTP error! status: ${response.status}`);\n"
                },
                {
                    "date": 1725170241479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n // }\n \"use client\";\n \n import { useEffect, useState } from \"react\";\n-import { useAuth } from \"@/contexts/AuthContext\";\n+import { useAuth } from \"@/context/AuthContext\";\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n export default function Login() {\n"
                },
                {
                    "date": 1725172412845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+// \"use client\";\n+\n+// import { useEffect, useState } from \"react\";\n+// import { useRouter } from \"next/navigation\";\n+// import { TelegramUser } from \"@/types\";\n+\n+// interface LoginProps {\n+//   onLogin: (user: TelegramUser) => void;\n+// }\n+\n+// export default function Login({ onLogin }: LoginProps) {\n+//   //   console.log(\"ONLOG \" + typeof onLogin);\n+\n+//   const router = useRouter();\n+//   const [error, setError] = useState<string | null>(null);\n+\n+//   useEffect(() => {\n+//     console.log(\"Login component mounted\");\n+//     // console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n+//     if (window.Telegram?.WebApp) {\n+//       const webApp = window.Telegram.WebApp;\n+//       webApp.ready();\n+\n+//       const initData = webApp.initData;\n+\n+//       //   console.log(\"Init Data:\", initData);\n+\n+//       if (initData) {\n+//         fetch(\"/api/auth/telegram\", {\n+//           method: \"POST\",\n+//           headers: {\n+//             \"Content-Type\": \"application/json\",\n+//           },\n+//           body: JSON.stringify({ initData }),\n+//         })\n+//           .then((response) => {\n+//             if (!response.ok) {\n+//               throw new Error(`HTTP error! status: ${response.status}`);\n+//             }\n+//             return response.json();\n+//           })\n+//           .then((data) => {\n+//             if (data.token) {\n+//               localStorage.setItem(\"token\", data.token);\n+//               const userParams = new URLSearchParams(initData).get(\"user\");\n+//               console.log(\"User PARAMS:\", userParams);\n+\n+//               if (userParams) {\n+//                 const user: TelegramUser = JSON.parse(userParams);\n+//                 // console.log(\"User data: LOGIN\", user);\n+\n+//                 onLogin(user);\n+//                 router.push(\"/\");\n+//               } else {\n+//                 throw new Error(\"User data not found\");\n+//               }\n+//             } else {\n+//               throw new Error(\"No token received\");\n+//             }\n+//           })\n+//           .catch((error) => {\n+//             console.error(\"Authentication error:\", error);\n+//             setError(`Failed to authenticate. ${error.message}`);\n+//           });\n+//       } else {\n+//         setError(\"No init data available. Please open this app from Telegram.\");\n+//       }\n+//     } else {\n+//       setError(\n+//         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+//       );\n+//     }\n+//   }, [onLogin, router]);\n+\n+//   if (error) {\n+//     return <div>{error}</div>;\n+//   }\n+\n+//   return <div>Authenticating...</div>;\n+// }\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useAuth } from \"@/context/AuthContext\";\n+import { useRouter } from \"next/navigation\";\n+import { TelegramUser } from \"@/types\";\n+\n+export default function Login() {\n+  const { login } = useAuth();\n+  const router = useRouter();\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready();\n+      const initData = webApp.initData;\n+\n+      console.log(\"Init Data:\", initData);\n+      if (initData) {\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({ initData }),\n+          credentials: \"include\",\n+        })\n+          .then((response) => {\n+            if (!response.ok) {\n+              throw new Error(`HTTP error! status: ${response.status}`);\n+            }\n+            return response.json();\n+          })\n+          .then((data) => {\n+            if (data.success) {\n+              const user = JSON.parse(\n+                new URLSearchParams(initData).get(\"user\") || \"{}\"\n+              ) as TelegramUser;\n+              console.log(\"User data: LOGIN\", user);\n+\n+              login(user);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"Authentication failed\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(`Failed to authenticate. ${error.message}`);\n+          });\n+      } else {\n+        setError(\"No init data available. Please open this app from Telegram.\");\n+      }\n+    } else {\n+      setError(\n+        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+      );\n+    }\n+  }, [login, router]);\n+\n+  if (error) {\n+    return <div>{error}</div>;\n+  }\n+\n+  return <div>Authenticating with Telegram...</div>;\n+}\n"
                },
                {
                    "date": 1725172431108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,153 +119,10 @@\n               ) as TelegramUser;\n               console.log(\"User data: LOGIN\", user);\n \n               login(user);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"Authentication failed\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(`Failed to authenticate. ${error.message}`);\n-          });\n-      } else {\n-        setError(\"No init data available. Please open this app from Telegram.\");\n-      }\n-    } else {\n-      setError(\n-        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-      );\n-    }\n-  }, [login, router]);\n+              console.log(\"after login\");\n \n-  if (error) {\n-    return <div>{error}</div>;\n-  }\n-\n-  return <div>Authenticating with Telegram...</div>;\n-}\n-// \"use client\";\n-\n-// import { useEffect, useState } from \"react\";\n-// import { useRouter } from \"next/navigation\";\n-// import { TelegramUser } from \"@/types\";\n-\n-// interface LoginProps {\n-//   onLogin: (user: TelegramUser) => void;\n-// }\n-\n-// export default function Login({ onLogin }: LoginProps) {\n-//   //   console.log(\"ONLOG \" + typeof onLogin);\n-\n-//   const router = useRouter();\n-//   const [error, setError] = useState<string | null>(null);\n-\n-//   useEffect(() => {\n-//     console.log(\"Login component mounted\");\n-//     // console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n-//     if (window.Telegram?.WebApp) {\n-//       const webApp = window.Telegram.WebApp;\n-//       webApp.ready();\n-\n-//       const initData = webApp.initData;\n-\n-//       //   console.log(\"Init Data:\", initData);\n-\n-//       if (initData) {\n-//         fetch(\"/api/auth/telegram\", {\n-//           method: \"POST\",\n-//           headers: {\n-//             \"Content-Type\": \"application/json\",\n-//           },\n-//           body: JSON.stringify({ initData }),\n-//         })\n-//           .then((response) => {\n-//             if (!response.ok) {\n-//               throw new Error(`HTTP error! status: ${response.status}`);\n-//             }\n-//             return response.json();\n-//           })\n-//           .then((data) => {\n-//             if (data.token) {\n-//               localStorage.setItem(\"token\", data.token);\n-//               const userParams = new URLSearchParams(initData).get(\"user\");\n-//               console.log(\"User PARAMS:\", userParams);\n-\n-//               if (userParams) {\n-//                 const user: TelegramUser = JSON.parse(userParams);\n-//                 // console.log(\"User data: LOGIN\", user);\n-\n-//                 onLogin(user);\n-//                 router.push(\"/\");\n-//               } else {\n-//                 throw new Error(\"User data not found\");\n-//               }\n-//             } else {\n-//               throw new Error(\"No token received\");\n-//             }\n-//           })\n-//           .catch((error) => {\n-//             console.error(\"Authentication error:\", error);\n-//             setError(`Failed to authenticate. ${error.message}`);\n-//           });\n-//       } else {\n-//         setError(\"No init data available. Please open this app from Telegram.\");\n-//       }\n-//     } else {\n-//       setError(\n-//         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-//       );\n-//     }\n-//   }, [onLogin, router]);\n-\n-//   if (error) {\n-//     return <div>{error}</div>;\n-//   }\n-\n-//   return <div>Authenticating...</div>;\n-// }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useAuth } from \"@/context/AuthContext\";\n-import { useRouter } from \"next/navigation\";\n-import { TelegramUser } from \"@/types\";\n-\n-export default function Login() {\n-  const { login } = useAuth();\n-  const router = useRouter();\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready();\n-      const initData = webApp.initData;\n-\n-      console.log(\"Init Data:\", initData);\n-      if (initData) {\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify({ initData }),\n-          credentials: \"include\",\n-        })\n-          .then((response) => {\n-            if (!response.ok) {\n-              throw new Error(`HTTP error! status: ${response.status}`);\n-            }\n-            return response.json();\n-          })\n-          .then((data) => {\n-            if (data.success) {\n-              const user = JSON.parse(\n-                new URLSearchParams(initData).get(\"user\") || \"{}\"\n-              ) as TelegramUser;\n-              login(user);\n               router.push(\"/\");\n             } else {\n               throw new Error(\"Authentication failed\");\n             }\n"
                },
                {
                    "date": 1725172639777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,8 +122,9 @@\n               login(user);\n               console.log(\"after login\");\n \n               router.push(\"/\");\n+              console.log(\"after login\");\n             } else {\n               throw new Error(\"Authentication failed\");\n             }\n           })\n"
                },
                {
                    "date": 1725172653066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n               login(user);\n               console.log(\"after login\");\n \n               router.push(\"/\");\n-              console.log(\"after login\");\n+              console.log(\"after PUSH\");\n             } else {\n               throw new Error(\"Authentication failed\");\n             }\n           })\n"
                },
                {
                    "date": 1725173317818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,13 +85,20 @@\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n export default function Login() {\n-  const { login } = useAuth();\n+  const { login, user } = useAuth();\n   const router = useRouter();\n   const [error, setError] = useState<string | null>(null);\n \n   useEffect(() => {\n+    console.log(\"Login component mounted, user:\", user);\n+    if (user) {\n+      console.log(\"User already logged in, redirecting to home\");\n+      router.push(\"/\");\n+    }\n+  }, [user, router]);\n+  useEffect(() => {\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n       const initData = webApp.initData;\n"
                },
                {
                    "date": 1725173327071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n       setError(\n         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n       );\n     }\n-  }, [login, router]);\n+  }, [login]);\n \n   if (error) {\n     return <div>{error}</div>;\n   }\n"
                },
                {
                    "date": 1725173564396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,13 +125,10 @@\n                 new URLSearchParams(initData).get(\"user\") || \"{}\"\n               ) as TelegramUser;\n               console.log(\"User data: LOGIN\", user);\n \n+              console.log(\"Authentication successful, logging in user:\", user);\n               login(user);\n-              console.log(\"after login\");\n-\n-              router.push(\"/\");\n-              console.log(\"after PUSH\");\n             } else {\n               throw new Error(\"Authentication failed\");\n             }\n           })\n"
                },
                {
                    "date": 1725174838724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,16 +119,12 @@\n             }\n             return response.json();\n           })\n           .then((data) => {\n-            if (data.success) {\n-              const user = JSON.parse(\n-                new URLSearchParams(initData).get(\"user\") || \"{}\"\n-              ) as TelegramUser;\n-              console.log(\"User data: LOGIN\", user);\n-\n-              console.log(\"Authentication successful, logging in user:\", user);\n-              login(user);\n+            if (data.success && data.user) {\n+              console.log(\"Login successful, user data:\", data.user);\n+              login(data.user);\n+              router.push(\"/\");\n             } else {\n               throw new Error(\"Authentication failed\");\n             }\n           })\n"
                },
                {
                    "date": 1725175013356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n       setError(\n         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n       );\n     }\n-  }, [login]);\n+  }, [login, router]);\n \n   if (error) {\n     return <div>{error}</div>;\n   }\n"
                },
                {
                    "date": 1725182634634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+// \"use client\";\n+\n+// import { useEffect, useState } from \"react\";\n+// import { useRouter } from \"next/navigation\";\n+// import { TelegramUser } from \"@/types\";\n+\n+// interface LoginProps {\n+//   onLogin: (user: TelegramUser) => void;\n+// }\n+\n+// export default function Login({ onLogin }: LoginProps) {\n+//   //   console.log(\"ONLOG \" + typeof onLogin);\n+\n+//   const router = useRouter();\n+//   const [error, setError] = useState<string | null>(null);\n+\n+//   useEffect(() => {\n+//     console.log(\"Login component mounted\");\n+//     // console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n+//     if (window.Telegram?.WebApp) {\n+//       const webApp = window.Telegram.WebApp;\n+//       webApp.ready();\n+\n+//       const initData = webApp.initData;\n+\n+//       //   console.log(\"Init Data:\", initData);\n+\n+//       if (initData) {\n+//         fetch(\"/api/auth/telegram\", {\n+//           method: \"POST\",\n+//           headers: {\n+//             \"Content-Type\": \"application/json\",\n+//           },\n+//           body: JSON.stringify({ initData }),\n+//         })\n+//           .then((response) => {\n+//             if (!response.ok) {\n+//               throw new Error(`HTTP error! status: ${response.status}`);\n+//             }\n+//             return response.json();\n+//           })\n+//           .then((data) => {\n+//             if (data.token) {\n+//               localStorage.setItem(\"token\", data.token);\n+//               const userParams = new URLSearchParams(initData).get(\"user\");\n+//               console.log(\"User PARAMS:\", userParams);\n+\n+//               if (userParams) {\n+//                 const user: TelegramUser = JSON.parse(userParams);\n+//                 // console.log(\"User data: LOGIN\", user);\n+\n+//                 onLogin(user);\n+//                 router.push(\"/\");\n+//               } else {\n+//                 throw new Error(\"User data not found\");\n+//               }\n+//             } else {\n+//               throw new Error(\"No token received\");\n+//             }\n+//           })\n+//           .catch((error) => {\n+//             console.error(\"Authentication error:\", error);\n+//             setError(`Failed to authenticate. ${error.message}`);\n+//           });\n+//       } else {\n+//         setError(\"No init data available. Please open this app from Telegram.\");\n+//       }\n+//     } else {\n+//       setError(\n+//         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+//       );\n+//     }\n+//   }, [onLogin, router]);\n+\n+//   if (error) {\n+//     return <div>{error}</div>;\n+//   }\n+\n+//   return <div>Authenticating...</div>;\n+// }\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useAuth } from \"@/context/AuthContext\";\n+import { useRouter } from \"next/navigation\";\n+import { TelegramUser } from \"@/types\";\n+\n+export default function Login() {\n+  const { login, user } = useAuth();\n+  const router = useRouter();\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    console.log(\"Login component mounted, user:\", user);\n+    if (user) {\n+      console.log(\"User already logged in, redirecting to home\");\n+      router.push(\"/\");\n+    }\n+  }, [user, router]);\n+  useEffect(() => {\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready();\n+      const initData = webApp.initData;\n+\n+      console.log(\"Init Data:\", initData);\n+      if (initData) {\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({ initData }),\n+          credentials: \"include\",\n+        })\n+          .then((response) => {\n+            if (!response.ok) {\n+              throw new Error(`HTTP error! status: ${response.status}`);\n+            }\n+            return response.json();\n+          })\n+          .then((data) => {\n+            if (data.success && data.user) {\n+              console.log(\"Login successful, user data:\", data.user);\n+              login(data.user);\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"Authentication failed\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(`Failed to authenticate. ${error.message}`);\n+          });\n+      } else {\n+        setError(\"No init data available. Please open this app from Telegram.\");\n+      }\n+    } else {\n+      setError(\n+        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+      );\n+    }\n+  }, [login, router]);\n+\n+  if (error) {\n+    return <div>{error}</div>;\n+  }\n+\n+  return <div>Authenticating with Telegram...</div>;\n+}\n"
                },
                {
                    "date": 1725266049890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,10 @@\n           .then((data) => {\n             if (data.success && data.user) {\n               console.log(\"Login successful, user data:\", data.user);\n               login(data.user);\n-              router.push(\"/\");\n+              window.location.href = \"/\";\n+              //   router.push(\"/\");\n             } else {\n               throw new Error(\"Authentication failed\");\n             }\n           })\n@@ -147,154 +148,4 @@\n   }\n \n   return <div>Authenticating with Telegram...</div>;\n }\n-// \"use client\";\n-\n-// import { useEffect, useState } from \"react\";\n-// import { useRouter } from \"next/navigation\";\n-// import { TelegramUser } from \"@/types\";\n-\n-// interface LoginProps {\n-//   onLogin: (user: TelegramUser) => void;\n-// }\n-\n-// export default function Login({ onLogin }: LoginProps) {\n-//   //   console.log(\"ONLOG \" + typeof onLogin);\n-\n-//   const router = useRouter();\n-//   const [error, setError] = useState<string | null>(null);\n-\n-//   useEffect(() => {\n-//     console.log(\"Login component mounted\");\n-//     // console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n-//     if (window.Telegram?.WebApp) {\n-//       const webApp = window.Telegram.WebApp;\n-//       webApp.ready();\n-\n-//       const initData = webApp.initData;\n-\n-//       //   console.log(\"Init Data:\", initData);\n-\n-//       if (initData) {\n-//         fetch(\"/api/auth/telegram\", {\n-//           method: \"POST\",\n-//           headers: {\n-//             \"Content-Type\": \"application/json\",\n-//           },\n-//           body: JSON.stringify({ initData }),\n-//         })\n-//           .then((response) => {\n-//             if (!response.ok) {\n-//               throw new Error(`HTTP error! status: ${response.status}`);\n-//             }\n-//             return response.json();\n-//           })\n-//           .then((data) => {\n-//             if (data.token) {\n-//               localStorage.setItem(\"token\", data.token);\n-//               const userParams = new URLSearchParams(initData).get(\"user\");\n-//               console.log(\"User PARAMS:\", userParams);\n-\n-//               if (userParams) {\n-//                 const user: TelegramUser = JSON.parse(userParams);\n-//                 // console.log(\"User data: LOGIN\", user);\n-\n-//                 onLogin(user);\n-//                 router.push(\"/\");\n-//               } else {\n-//                 throw new Error(\"User data not found\");\n-//               }\n-//             } else {\n-//               throw new Error(\"No token received\");\n-//             }\n-//           })\n-//           .catch((error) => {\n-//             console.error(\"Authentication error:\", error);\n-//             setError(`Failed to authenticate. ${error.message}`);\n-//           });\n-//       } else {\n-//         setError(\"No init data available. Please open this app from Telegram.\");\n-//       }\n-//     } else {\n-//       setError(\n-//         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-//       );\n-//     }\n-//   }, [onLogin, router]);\n-\n-//   if (error) {\n-//     return <div>{error}</div>;\n-//   }\n-\n-//   return <div>Authenticating...</div>;\n-// }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useAuth } from \"@/context/AuthContext\";\n-import { useRouter } from \"next/navigation\";\n-import { TelegramUser } from \"@/types\";\n-\n-export default function Login() {\n-  const { login, user } = useAuth();\n-  const router = useRouter();\n-  const [error, setError] = useState<string | null>(null);\n-\n-  useEffect(() => {\n-    console.log(\"Login component mounted, user:\", user);\n-    if (user) {\n-      console.log(\"User already logged in, redirecting to home\");\n-      router.push(\"/\");\n-    }\n-  }, [user, router]);\n-  useEffect(() => {\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready();\n-      const initData = webApp.initData;\n-\n-      console.log(\"Init Data:\", initData);\n-      if (initData) {\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify({ initData }),\n-          credentials: \"include\",\n-        })\n-          .then((response) => {\n-            if (!response.ok) {\n-              throw new Error(`HTTP error! status: ${response.status}`);\n-            }\n-            return response.json();\n-          })\n-          .then((data) => {\n-            if (data.success && data.user) {\n-              console.log(\"Login successful, user data:\", data.user);\n-              login(data.user);\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"Authentication failed\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(`Failed to authenticate. ${error.message}`);\n-          });\n-      } else {\n-        setError(\"No init data available. Please open this app from Telegram.\");\n-      }\n-    } else {\n-      setError(\n-        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-      );\n-    }\n-  }, [login, router]);\n-\n-  if (error) {\n-    return <div>{error}</div>;\n-  }\n-\n-  return <div>Authenticating with Telegram...</div>;\n-}\n"
                },
                {
                    "date": 1725266225789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,16 +89,16 @@\n   const { login, user } = useAuth();\n   const router = useRouter();\n   const [error, setError] = useState<string | null>(null);\n \n+  //   useEffect(() => {\n+  //     console.log(\"Login component mounted, user:\", user);\n+  //     if (user) {\n+  //       console.log(\"User already logged in, redirecting to home\");\n+  //       router.push(\"/\");\n+  //     }\n+  //   }, [user, router]);\n   useEffect(() => {\n-    console.log(\"Login component mounted, user:\", user);\n-    if (user) {\n-      console.log(\"User already logged in, redirecting to home\");\n-      router.push(\"/\");\n-    }\n-  }, [user, router]);\n-  useEffect(() => {\n     if (window.Telegram?.WebApp) {\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n       const initData = webApp.initData;\n"
                },
                {
                    "date": 1725266312387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n           .then((data) => {\n             if (data.success && data.user) {\n               console.log(\"Login successful, user data:\", data.user);\n               login(data.user);\n-              window.location.href = \"/\";\n+              history.pushState({}, \"\", \"/\");\n               //   router.push(\"/\");\n             } else {\n               throw new Error(\"Authentication failed\");\n             }\n"
                },
                {
                    "date": 1725266523604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n       setError(\n         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n       );\n     }\n-  }, [login, router]);\n+  }, [login]);\n \n   if (error) {\n     return <div>{error}</div>;\n   }\n"
                },
                {
                    "date": 1725269053798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,10 +122,10 @@\n           .then((data) => {\n             if (data.success && data.user) {\n               console.log(\"Login successful, user data:\", data.user);\n               login(data.user);\n-              history.pushState({}, \"\", \"/\");\n-              //   router.push(\"/\");\n+              // history.pushState({}, \"\", \"/\");\n+              router.push(\"/\");\n             } else {\n               throw new Error(\"Authentication failed\");\n             }\n           })\n"
                },
                {
                    "date": 1725269059467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n       setError(\n         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n       );\n     }\n-  }, [login]);\n+  }, [login, router]);\n \n   if (error) {\n     return <div>{error}</div>;\n   }\n"
                },
                {
                    "date": 1725269116911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+// \"use client\";\n+\n+// import { useEffect, useState } from \"react\";\n+// import { useRouter } from \"next/navigation\";\n+// import { TelegramUser } from \"@/types\";\n+\n+// interface LoginProps {\n+//   onLogin: (user: TelegramUser) => void;\n+// }\n+\n+// export default function Login({ onLogin }: LoginProps) {\n+//   //   console.log(\"ONLOG \" + typeof onLogin);\n+\n+//   const router = useRouter();\n+//   const [error, setError] = useState<string | null>(null);\n+\n+//   useEffect(() => {\n+//     console.log(\"Login component mounted\");\n+//     // console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n+//     if (window.Telegram?.WebApp) {\n+//       const webApp = window.Telegram.WebApp;\n+//       webApp.ready();\n+\n+//       const initData = webApp.initData;\n+\n+//       //   console.log(\"Init Data:\", initData);\n+\n+//       if (initData) {\n+//         fetch(\"/api/auth/telegram\", {\n+//           method: \"POST\",\n+//           headers: {\n+//             \"Content-Type\": \"application/json\",\n+//           },\n+//           body: JSON.stringify({ initData }),\n+//         })\n+//           .then((response) => {\n+//             if (!response.ok) {\n+//               throw new Error(`HTTP error! status: ${response.status}`);\n+//             }\n+//             return response.json();\n+//           })\n+//           .then((data) => {\n+//             if (data.token) {\n+//               localStorage.setItem(\"token\", data.token);\n+//               const userParams = new URLSearchParams(initData).get(\"user\");\n+//               console.log(\"User PARAMS:\", userParams);\n+\n+//               if (userParams) {\n+//                 const user: TelegramUser = JSON.parse(userParams);\n+//                 // console.log(\"User data: LOGIN\", user);\n+\n+//                 onLogin(user);\n+//                 router.push(\"/\");\n+//               } else {\n+//                 throw new Error(\"User data not found\");\n+//               }\n+//             } else {\n+//               throw new Error(\"No token received\");\n+//             }\n+//           })\n+//           .catch((error) => {\n+//             console.error(\"Authentication error:\", error);\n+//             setError(`Failed to authenticate. ${error.message}`);\n+//           });\n+//       } else {\n+//         setError(\"No init data available. Please open this app from Telegram.\");\n+//       }\n+//     } else {\n+//       setError(\n+//         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+//       );\n+//     }\n+//   }, [onLogin, router]);\n+\n+//   if (error) {\n+//     return <div>{error}</div>;\n+//   }\n+\n+//   return <div>Authenticating...</div>;\n+// }\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useAuth } from \"@/context/AuthContext\";\n+import { useRouter } from \"next/navigation\";\n+import { TelegramUser } from \"@/types\";\n+\n+export default function Login() {\n+  const { login, user } = useAuth();\n+  const router = useRouter();\n+  const [error, setError] = useState<string | null>(null);\n+\n+  //   useEffect(() => {\n+  //     console.log(\"Login component mounted, user:\", user);\n+  //     if (user) {\n+  //       console.log(\"User already logged in, redirecting to home\");\n+  //       router.push(\"/\");\n+  //     }\n+  //   }, [user, router]);\n+  useEffect(() => {\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready();\n+      const initData = webApp.initData;\n+\n+      console.log(\"Init Data:\", initData);\n+      if (initData) {\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({ initData }),\n+          credentials: \"include\",\n+        })\n+          .then((response) => {\n+            if (!response.ok) {\n+              throw new Error(`HTTP error! status: ${response.status}`);\n+            }\n+            return response.json();\n+          })\n+          .then((data) => {\n+            if (data.success && data.user && !user) {\n+              console.log(\"Login successful, user data:\", data.user);\n+              login(data.user);\n+              // history.pushState({}, \"\", \"/\");\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"Authentication failed\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(`Failed to authenticate. ${error.message}`);\n+          });\n+      } else {\n+        setError(\"No init data available. Please open this app from Telegram.\");\n+      }\n+    } else {\n+      setError(\n+        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+      );\n+    }\n+  }, [login, router]);\n+\n+  if (error) {\n+    return <div>{error}</div>;\n+  }\n+\n+  return <div>Authenticating with Telegram...</div>;\n+}\n"
                },
                {
                    "date": 1725271489045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n export default function Login() {\n-  const { login, user } = useAuth();\n+  const { login } = useAuth();\n   const router = useRouter();\n   const [error, setError] = useState<string | null>(null);\n \n   //   useEffect(() => {\n@@ -119,159 +119,8 @@\n             }\n             return response.json();\n           })\n           .then((data) => {\n-            if (data.success && data.user && !user) {\n-              console.log(\"Login successful, user data:\", data.user);\n-              login(data.user);\n-              // history.pushState({}, \"\", \"/\");\n-              router.push(\"/\");\n-            } else {\n-              throw new Error(\"Authentication failed\");\n-            }\n-          })\n-          .catch((error) => {\n-            console.error(\"Authentication error:\", error);\n-            setError(`Failed to authenticate. ${error.message}`);\n-          });\n-      } else {\n-        setError(\"No init data available. Please open this app from Telegram.\");\n-      }\n-    } else {\n-      setError(\n-        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-      );\n-    }\n-  }, [login, router]);\n-\n-  if (error) {\n-    return <div>{error}</div>;\n-  }\n-\n-  return <div>Authenticating with Telegram...</div>;\n-}\n-// \"use client\";\n-\n-// import { useEffect, useState } from \"react\";\n-// import { useRouter } from \"next/navigation\";\n-// import { TelegramUser } from \"@/types\";\n-\n-// interface LoginProps {\n-//   onLogin: (user: TelegramUser) => void;\n-// }\n-\n-// export default function Login({ onLogin }: LoginProps) {\n-//   //   console.log(\"ONLOG \" + typeof onLogin);\n-\n-//   const router = useRouter();\n-//   const [error, setError] = useState<string | null>(null);\n-\n-//   useEffect(() => {\n-//     console.log(\"Login component mounted\");\n-//     // console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n-//     if (window.Telegram?.WebApp) {\n-//       const webApp = window.Telegram.WebApp;\n-//       webApp.ready();\n-\n-//       const initData = webApp.initData;\n-\n-//       //   console.log(\"Init Data:\", initData);\n-\n-//       if (initData) {\n-//         fetch(\"/api/auth/telegram\", {\n-//           method: \"POST\",\n-//           headers: {\n-//             \"Content-Type\": \"application/json\",\n-//           },\n-//           body: JSON.stringify({ initData }),\n-//         })\n-//           .then((response) => {\n-//             if (!response.ok) {\n-//               throw new Error(`HTTP error! status: ${response.status}`);\n-//             }\n-//             return response.json();\n-//           })\n-//           .then((data) => {\n-//             if (data.token) {\n-//               localStorage.setItem(\"token\", data.token);\n-//               const userParams = new URLSearchParams(initData).get(\"user\");\n-//               console.log(\"User PARAMS:\", userParams);\n-\n-//               if (userParams) {\n-//                 const user: TelegramUser = JSON.parse(userParams);\n-//                 // console.log(\"User data: LOGIN\", user);\n-\n-//                 onLogin(user);\n-//                 router.push(\"/\");\n-//               } else {\n-//                 throw new Error(\"User data not found\");\n-//               }\n-//             } else {\n-//               throw new Error(\"No token received\");\n-//             }\n-//           })\n-//           .catch((error) => {\n-//             console.error(\"Authentication error:\", error);\n-//             setError(`Failed to authenticate. ${error.message}`);\n-//           });\n-//       } else {\n-//         setError(\"No init data available. Please open this app from Telegram.\");\n-//       }\n-//     } else {\n-//       setError(\n-//         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n-//       );\n-//     }\n-//   }, [onLogin, router]);\n-\n-//   if (error) {\n-//     return <div>{error}</div>;\n-//   }\n-\n-//   return <div>Authenticating...</div>;\n-// }\n-\"use client\";\n-\n-import { useEffect, useState } from \"react\";\n-import { useAuth } from \"@/context/AuthContext\";\n-import { useRouter } from \"next/navigation\";\n-import { TelegramUser } from \"@/types\";\n-\n-export default function Login() {\n-  const { login, user } = useAuth();\n-  const router = useRouter();\n-  const [error, setError] = useState<string | null>(null);\n-\n-  //   useEffect(() => {\n-  //     console.log(\"Login component mounted, user:\", user);\n-  //     if (user) {\n-  //       console.log(\"User already logged in, redirecting to home\");\n-  //       router.push(\"/\");\n-  //     }\n-  //   }, [user, router]);\n-  useEffect(() => {\n-    if (window.Telegram?.WebApp) {\n-      const webApp = window.Telegram.WebApp;\n-      webApp.ready();\n-      const initData = webApp.initData;\n-\n-      console.log(\"Init Data:\", initData);\n-      if (initData) {\n-        fetch(\"/api/auth/telegram\", {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify({ initData }),\n-          credentials: \"include\",\n-        })\n-          .then((response) => {\n-            if (!response.ok) {\n-              throw new Error(`HTTP error! status: ${response.status}`);\n-            }\n-            return response.json();\n-          })\n-          .then((data) => {\n             if (data.success && data.user) {\n               console.log(\"Login successful, user data:\", data.user);\n               login(data.user);\n               // history.pushState({}, \"\", \"/\");\n"
                },
                {
                    "date": 1725271569753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n import { useRouter } from \"next/navigation\";\n import { TelegramUser } from \"@/types\";\n \n export default function Login() {\n-  const { login } = useAuth();\n+  const { login, user } = useAuth();\n   const router = useRouter();\n   const [error, setError] = useState<string | null>(null);\n \n   //   useEffect(() => {\n@@ -119,9 +119,9 @@\n             }\n             return response.json();\n           })\n           .then((data) => {\n-            if (data.success && data.user) {\n+            if (data.success && data.user && !user) {\n               console.log(\"Login successful, user data:\", data.user);\n               login(data.user);\n               // history.pushState({}, \"\", \"/\");\n               router.push(\"/\");\n"
                },
                {
                    "date": 1725271642044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+// \"use client\";\n+\n+// import { useEffect, useState } from \"react\";\n+// import { useRouter } from \"next/navigation\";\n+// import { TelegramUser } from \"@/types\";\n+\n+// interface LoginProps {\n+//   onLogin: (user: TelegramUser) => void;\n+// }\n+\n+// export default function Login({ onLogin }: LoginProps) {\n+//   //   console.log(\"ONLOG \" + typeof onLogin);\n+\n+//   const router = useRouter();\n+//   const [error, setError] = useState<string | null>(null);\n+\n+//   useEffect(() => {\n+//     console.log(\"Login component mounted\");\n+//     // console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n+//     if (window.Telegram?.WebApp) {\n+//       const webApp = window.Telegram.WebApp;\n+//       webApp.ready();\n+\n+//       const initData = webApp.initData;\n+\n+//       //   console.log(\"Init Data:\", initData);\n+\n+//       if (initData) {\n+//         fetch(\"/api/auth/telegram\", {\n+//           method: \"POST\",\n+//           headers: {\n+//             \"Content-Type\": \"application/json\",\n+//           },\n+//           body: JSON.stringify({ initData }),\n+//         })\n+//           .then((response) => {\n+//             if (!response.ok) {\n+//               throw new Error(`HTTP error! status: ${response.status}`);\n+//             }\n+//             return response.json();\n+//           })\n+//           .then((data) => {\n+//             if (data.token) {\n+//               localStorage.setItem(\"token\", data.token);\n+//               const userParams = new URLSearchParams(initData).get(\"user\");\n+//               console.log(\"User PARAMS:\", userParams);\n+\n+//               if (userParams) {\n+//                 const user: TelegramUser = JSON.parse(userParams);\n+//                 // console.log(\"User data: LOGIN\", user);\n+\n+//                 onLogin(user);\n+//                 router.push(\"/\");\n+//               } else {\n+//                 throw new Error(\"User data not found\");\n+//               }\n+//             } else {\n+//               throw new Error(\"No token received\");\n+//             }\n+//           })\n+//           .catch((error) => {\n+//             console.error(\"Authentication error:\", error);\n+//             setError(`Failed to authenticate. ${error.message}`);\n+//           });\n+//       } else {\n+//         setError(\"No init data available. Please open this app from Telegram.\");\n+//       }\n+//     } else {\n+//       setError(\n+//         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+//       );\n+//     }\n+//   }, [onLogin, router]);\n+\n+//   if (error) {\n+//     return <div>{error}</div>;\n+//   }\n+\n+//   return <div>Authenticating...</div>;\n+// }\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useAuth } from \"@/context/AuthContext\";\n+import { useRouter } from \"next/navigation\";\n+import { TelegramUser } from \"@/types\";\n+\n+export default function Login() {\n+  const { login, user } = useAuth();\n+  const router = useRouter();\n+  const [error, setError] = useState<string | null>(null);\n+\n+  //   useEffect(() => {\n+  //     console.log(\"Login component mounted, user:\", user);\n+  //     if (user) {\n+  //       console.log(\"User already logged in, redirecting to home\");\n+  //       router.push(\"/\");\n+  //     }\n+  //   }, [user, router]);\n+  useEffect(() => {\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready();\n+      const initData = webApp.initData;\n+\n+      console.log(\"Init Data:\", initData);\n+      if (initData) {\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({ initData }),\n+          credentials: \"include\",\n+        })\n+          .then((response) => {\n+            if (!response.ok) {\n+              throw new Error(`HTTP error! status: ${response.status}`);\n+            }\n+            return response.json();\n+          })\n+          .then((data) => {\n+            if (data.success && data.user && !user) {\n+              console.log(\"Login successful, user data:\", data.user);\n+              login(data.user);\n+              // history.pushState({}, \"\", \"/\");\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"Authentication failed\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(`Failed to authenticate. ${error.message}`);\n+          });\n+      } else {\n+        setError(\"No init data available. Please open this app from Telegram.\");\n+      }\n+    } else {\n+      setError(\n+        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+      );\n+    }\n+  }, [login, router]);\n+\n+  if (error) {\n+    return <div>{error}</div>;\n+  }\n+\n+  return <div>Authenticating with Telegram...</div>;\n+}\n"
                },
                {
                    "date": 1725288348512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+// \"use client\";\n+\n+// import { useEffect, useState } from \"react\";\n+// import { useRouter } from \"next/navigation\";\n+// import { TelegramUser } from \"@/types\";\n+\n+// interface LoginProps {\n+//   onLogin: (user: TelegramUser) => void;\n+// }\n+\n+// export default function Login({ onLogin }: LoginProps) {\n+//   //   console.log(\"ONLOG \" + typeof onLogin);\n+\n+//   const router = useRouter();\n+//   const [error, setError] = useState<string | null>(null);\n+\n+//   useEffect(() => {\n+//     console.log(\"Login component mounted\");\n+//     // console.log(\"onLogin is a function:\", typeof onLogin === \"function\");\n+//     if (window.Telegram?.WebApp) {\n+//       const webApp = window.Telegram.WebApp;\n+//       webApp.ready();\n+\n+//       const initData = webApp.initData;\n+\n+//       //   console.log(\"Init Data:\", initData);\n+\n+//       if (initData) {\n+//         fetch(\"/api/auth/telegram\", {\n+//           method: \"POST\",\n+//           headers: {\n+//             \"Content-Type\": \"application/json\",\n+//           },\n+//           body: JSON.stringify({ initData }),\n+//         })\n+//           .then((response) => {\n+//             if (!response.ok) {\n+//               throw new Error(`HTTP error! status: ${response.status}`);\n+//             }\n+//             return response.json();\n+//           })\n+//           .then((data) => {\n+//             if (data.token) {\n+//               localStorage.setItem(\"token\", data.token);\n+//               const userParams = new URLSearchParams(initData).get(\"user\");\n+//               console.log(\"User PARAMS:\", userParams);\n+\n+//               if (userParams) {\n+//                 const user: TelegramUser = JSON.parse(userParams);\n+//                 // console.log(\"User data: LOGIN\", user);\n+\n+//                 onLogin(user);\n+//                 router.push(\"/\");\n+//               } else {\n+//                 throw new Error(\"User data not found\");\n+//               }\n+//             } else {\n+//               throw new Error(\"No token received\");\n+//             }\n+//           })\n+//           .catch((error) => {\n+//             console.error(\"Authentication error:\", error);\n+//             setError(`Failed to authenticate. ${error.message}`);\n+//           });\n+//       } else {\n+//         setError(\"No init data available. Please open this app from Telegram.\");\n+//       }\n+//     } else {\n+//       setError(\n+//         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+//       );\n+//     }\n+//   }, [onLogin, router]);\n+\n+//   if (error) {\n+//     return <div>{error}</div>;\n+//   }\n+\n+//   return <div>Authenticating...</div>;\n+// }\n+\"use client\";\n+\n+import { useEffect, useState } from \"react\";\n+import { useAuth } from \"@/context/AuthContext\";\n+import { useRouter } from \"next/navigation\";\n+import { TelegramUser } from \"@/types\";\n+\n+export default function Login() {\n+  const { login } = useAuth();\n+  const router = useRouter();\n+  const [error, setError] = useState<string | null>(null);\n+\n+  //   useEffect(() => {\n+  //     console.log(\"Login component mounted, user:\", user);\n+  //     if (user) {\n+  //       console.log(\"User already logged in, redirecting to home\");\n+  //       router.push(\"/\");\n+  //     }\n+  //   }, [user, router]);\n+  useEffect(() => {\n+    if (window.Telegram?.WebApp) {\n+      const webApp = window.Telegram.WebApp;\n+      webApp.ready();\n+      const initData = webApp.initData;\n+\n+      console.log(\"Init Data:\", initData);\n+      if (initData) {\n+        fetch(\"/api/auth/telegram\", {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({ initData }),\n+          credentials: \"include\",\n+        })\n+          .then((response) => {\n+            if (!response.ok) {\n+              throw new Error(`HTTP error! status: ${response.status}`);\n+            }\n+            return response.json();\n+          })\n+          .then((data) => {\n+            if (data.success && data.user) {\n+              console.log(\"Login successful, user data:\", data.user);\n+              login(data.user);\n+              // history.pushState({}, \"\", \"/\");\n+              router.push(\"/\");\n+            } else {\n+              throw new Error(\"Authentication failed\");\n+            }\n+          })\n+          .catch((error) => {\n+            console.error(\"Authentication error:\", error);\n+            setError(`Failed to authenticate. ${error.message}`);\n+          });\n+      } else {\n+        setError(\"No init data available. Please open this app from Telegram.\");\n+      }\n+    } else {\n+      setError(\n+        \"Telegram WebApp is not available. Please open this app from Telegram.\"\n+      );\n+    }\n+  }, [login, router]);\n+\n+  if (error) {\n+    return <div>{error}</div>;\n+  }\n+\n+  return <div>Authenticating with Telegram...</div>;\n+}\n"
                },
                {
                    "date": 1725516261290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n       const initData = webApp.initData;\n \n-      console.log(\"Init Data:\", initData);\n+      console.log({\"INIT:\": initData});\n       if (initData) {\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n           headers: {\n"
                },
                {
                    "date": 1725516306375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n       const webApp = window.Telegram.WebApp;\n       webApp.ready();\n       const initData = webApp.initData;\n \n-      console.log({ \"INIT:\": initData });\n+      console.log([\"INIT:\", initData]);\n       if (initData) {\n         fetch(\"/api/auth/telegram\", {\n           method: \"POST\",\n           headers: {\n"
                },
                {
                    "date": 1725516332300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n       setError(\n         \"Telegram WebApp is not available. Please open this app from Telegram.\"\n       );\n     }\n-  }, [login, router]);\n+  }, [login]);\n \n   if (error) {\n     return <div>{error}</div>;\n   }\n"
                }
            ],
            "date": 1724755858787,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\n\ninterface TelegramUser {\n  id: number;\n  first_name: string;\n  last_name?: string;\n  username?: string;\n  photo_url?: string;\n  auth_date: number;\n  hash: string;\n}\n\ndeclare global {\n  interface Window {\n    onTelegramAuth: (user: TelegramUser) => void;\n  }\n}\n\nexport default function Login() {\n  const router = useRouter();\n\n  useEffect(() => {\n    window.onTelegramAuth = function (user: TelegramUser) {\n      console.log(\n        \"Logged in as \" +\n          user.first_name +\n          \" \" +\n          (user.last_name || \"\") +\n          \" (\" +\n          user.id +\n          (user.username ? \", @\" + user.username : \"\") +\n          \")\"\n      );\n\n      fetch(\"/api/auth/telegram\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(user),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (data.token) {\n            localStorage.setItem(\"token\", data.token);\n            router.push(\"/\");\n          }\n        })\n        .catch((error) => console.error(\"Error:\", error));\n    };\n  }, [router]);\n\n  return (\n    <div>\n      <h1>Login with Telegram</h1>\n      <div\n        id={`telegram-login-${process.env.NEXT_PUBLIC_TELEGRAM_BOT_NAME}`}></div>\n    </div>\n  );\n}\n"
        }
    ]
}