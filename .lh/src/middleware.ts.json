{
    "sourceFile": "src/middleware.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1724756025805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725269516056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,40 @@\n-import { NextResponse } from \"next/server\";\n-import type { NextRequest } from \"next/server\";\n+// import { NextResponse } from \"next/server\";\n+// import type { NextRequest } from \"next/server\";\n \n-export function middleware(request: NextRequest) {\n-  const token = request.cookies.get(\"token\");\n-  if (!token && !request.nextUrl.pathname.startsWith(\"/login\")) {\n-    return NextResponse.redirect(new URL(\"/login\", request.url));\n-  }\n-  return NextResponse.next();\n+// export function middleware(request: NextRequest) {\n+//   const token = request.cookies.get(\"token\");\n+//   if (!token && !request.nextUrl.pathname.startsWith(\"/login\")) {\n+//     return NextResponse.redirect(new URL(\"/login\", request.url));\n+//   }\n+//   return NextResponse.next();\n+// }\n+\n+// export const config = {\n+//   matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).*)\"],\n+// };\n+\n+import Cors from \"cors\";\n+import { NextApiRequest, NextApiResponse } from \"next\";\n+\n+const cors = Cors({\n+  methods: [\"GET\", \"HEAD\", \"POST\"],\n+  origin: [\"https://your-ngrok-url.ngrok.io\", \"http://localhost:3000\"],\n+  credentials: true,\n+});\n+\n+export function runMiddleware(\n+  req: NextApiRequest,\n+  res: NextApiResponse,\n+  fn: Function\n+) {\n+  return new Promise((resolve, reject) => {\n+    fn(req, res, (result: any) => {\n+      if (result instanceof Error) {\n+        return reject(result);\n+      }\n+      return resolve(result);\n+    });\n+  });\n }\n \n-export const config = {\n-  matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).*)\"],\n-};\n+export default cors;\n"
                },
                {
                    "date": 1725269557375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n import { NextApiRequest, NextApiResponse } from \"next\";\n \n const cors = Cors({\n   methods: [\"GET\", \"HEAD\", \"POST\"],\n-  origin: [\"https://your-ngrok-url.ngrok.io\", \"http://localhost:3000\"],\n+  origin: [process.env.NEXT_PUBLIC_APP_URL, \"http://localhost:3000\"],\n   credentials: true,\n });\n \n export function runMiddleware(\n"
                }
            ],
            "date": 1724756025805,
            "name": "Commit-0",
            "content": "import { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\n\nexport function middleware(request: NextRequest) {\n  const token = request.cookies.get(\"token\");\n  if (!token && !request.nextUrl.pathname.startsWith(\"/login\")) {\n    return NextResponse.redirect(new URL(\"/login\", request.url));\n  }\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).*)\"],\n};\n"
        }
    ]
}